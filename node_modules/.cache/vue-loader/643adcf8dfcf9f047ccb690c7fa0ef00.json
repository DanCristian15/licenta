{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/shared/components/wizard/Control.vue?vue&type=style&index=0&id=3e1be7ef&scoped=true&lang=scss&","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/shared/components/wizard/Control.vue","mtime":1645805363978},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZhZGUtZW50ZXItYWN0aXZlLAouZmFkZS1sZWF2ZS1hY3RpdmUgewogICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzOwp9CgouZmFkZS1lbnRlciwKLmZhZGUtbGVhdmUtdG8gewogICAgaGVpZ2h0OiAwOwogICAgb3BhY2l0eTogMDsKfQo="},{"version":3,"sources":["Control.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Control.vue","sourceRoot":"src/core/shared/components/wizard","sourcesContent":["<template>\r\n    <div>\r\n        <transition v-if=\"destroySteps\" name=\"fade\">\r\n            <slot :name=\"currentSlot\"></slot>\r\n        </transition>\r\n        <div v-if=\"!destroySteps\">\r\n            <transition v-for=\"step in steps\" :key=\"step.index\" name=\"fade\">\r\n                <div v-show=\"currentSlot === step.slot\">\r\n                    <slot :name=\"step.slot\"></slot>\r\n                </div>\r\n            </transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: {\r\n            steps: {\r\n                type: Array,\r\n                required: true\r\n            },\r\n            busEvents: {\r\n                type: Object,\r\n                required: false,\r\n                default: null\r\n            },\r\n            controlByRoute: {\r\n                type: Boolean,\r\n                required: false,\r\n                default: false\r\n            },\r\n            routeStepParamName: {\r\n                type: String,\r\n                default: 'step'\r\n            },\r\n            startIndex: {\r\n                type: Number,\r\n                default: 0\r\n            },\r\n            destroySteps: {\r\n                type: Boolean,\r\n                default: true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                currentIndex: this.startIndex,\r\n                maxVisitedStep: 0\r\n            };\r\n        },\r\n        computed: {\r\n            currentSlot() {\r\n                return this.steps[this.currentIndex].slot;\r\n            }\r\n        },\r\n        methods: {\r\n            nextStep( ) {\r\n                let currentIndex = this.currentIndex,\r\n                    steps = this.steps,\r\n                    success = false;\r\n\r\n                while ( currentIndex < steps.length && !success ) {\r\n                    currentIndex++;\r\n                    if ( steps[ currentIndex ] && !steps[ currentIndex ].hidden ) {\r\n                        this.maxVisitedStep = Math.max ( this.maxVisitedStep, currentIndex );\r\n                        if ( !this.controlByRoute ) {\r\n                            this.currentIndex = currentIndex;\r\n                            this.$emit( 'change-index', this.currentIndex );\r\n                        } else {\r\n                            let routeParam = {};\r\n\r\n                            routeParam[this.routeStepParamName ] = currentIndex;\r\n                            this.$router.push( { name: this.$route.name, params: routeParam } );\r\n                        }\r\n                        success = true;\r\n                    }\r\n                }\r\n            },\r\n            previousStep( ) {\r\n                let currentIndex = this.currentIndex,\r\n                    steps = this.steps,\r\n                    success = false;\r\n\r\n                while ( currentIndex > 0 && !success ) {\r\n                    currentIndex--;\r\n                    if ( !steps[ currentIndex ].hidden ) {\r\n                        if ( !this.controlByRoute ) {\r\n                            this.currentIndex = currentIndex;\r\n                            this.$emit( 'change-index', this.currentIndex );\r\n                            success = true;\r\n                        } else {\r\n                            let routeParam = {};\r\n                            routeParam[this.routeStepParamName ] = currentIndex;\r\n\r\n                            this.$router.push( { name: this.$route.name, params: routeParam } );\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            goToStep( stepIndex ) {\r\n                const { steps } = this;\r\n                const stepToGo = steps[ stepIndex ];\r\n\r\n                if ( stepIndex === this.currentIndex || !stepToGo || stepToGo.hidden ) {\r\n                    return;\r\n                }\r\n                if ( !this.controlByRoute ) {\r\n                    this.currentIndex = stepIndex;\r\n                    this.$emit( 'change-index', this.currentIndex );\r\n                } else {\r\n                    let routeParam = {};\r\n                    routeParam[this.routeStepParamName ] = stepIndex;\r\n\r\n                    this.$router.push( { name: this.$route.name, params: routeParam } );\r\n                }\r\n\r\n            },\r\n            validateStep( step ) {\r\n                let stepNum = parseInt ( step );\r\n\r\n                return !( isNaN( stepNum ) || stepNum > this.maxVisitedStep || this.steps[stepNum].hidden );\r\n            }\r\n        },\r\n        created() {\r\n            !this.busEvents || this.busEvents.$on( 'next', this.nextStep );\r\n            !this.busEvents || this.busEvents.$on( 'back', this.previousStep );\r\n            !this.busEvents || this.busEvents.$on( 'go-to-step', this.goToStep );\r\n\r\n            if ( this.controlByRoute ) {\r\n                let routeStepParam = this.$route.params[this.routeStepParamName],\r\n                    routeName = this.$route.name,\r\n                    routeParam = {};\r\n\r\n                if ( this.$route.params.rolling )\r\n                    routeParam['rolling'] = this.$route.params.rolling;\r\n\r\n                if ( !this.validateStep ( routeStepParam ) ) {\r\n                    routeParam[this.routeStepParamName ] = 0;\r\n                    this.$router.replace( { name: routeName, params: routeParam } );\r\n                }\r\n                this.$watch( '$route', function ( to ) {\r\n                    let routeStepParam = to.params[this.routeStepParamName],\r\n                        routeName = to.name,\r\n                        routeParam = {};\r\n\r\n                    if ( !this.validateStep( routeStepParam ) ) {\r\n                        routeParam[this.routeStepParamName ] = this.currentIndex;\r\n                        this.$router.replace( { name: routeName, params: routeParam } );\r\n                    } else{\r\n                        this.currentIndex = parseInt( routeStepParam );\r\n                        this.$emit( 'change-index', this.currentIndex );\r\n                    }\r\n                } );\r\n            }\r\n\r\n        },\r\n        destroyed() {\r\n            !this.busEvents || this.busEvents.$off( 'next' );\r\n            !this.busEvents || this.busEvents.$off( 'back' );\r\n            !this.busEvents || this.busEvents.$off( 'go-to-step' );\r\n        },\r\n\r\n    };\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n    .fade-enter-active,\r\n    .fade-leave-active {\r\n        transition: opacity 0.5s;\r\n    }\r\n\r\n    .fade-enter,\r\n    .fade-leave-to {\r\n        height: 0;\r\n        opacity: 0;\r\n    }\r\n</style>\r\n"]}]}