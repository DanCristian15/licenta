{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/lifestyle-ui/src/core/App.vue?vue&type=style&index=0&id=0037afea&lang=scss&scoped=true&","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/App.vue","mtime":1646337648540},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hcHAgewogICAgYmFja2dyb3VuZDogcmdiKCAxMTAsIDEwOCwgMTA4ICk7Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA","file":"App.vue","sourceRoot":"src/core","sourcesContent":["<template>\n    <v-app>\n        <div class=\"app\">\n            <div class=\"home-banner\">\n                \n            </div>\n        </div>\n    </v-app>\n</template>\n\n<script>\n    import Vue from 'vue';\n    import { mapActions, mapGetters, mapState } from 'vuex';\n    import DefaultLayout from '@core/shared/layouts/Default';\n    import BlankLayout from '@core/shared/layouts/Blank';\n    import DataLoading from '@core/shared/components/loading/DataLoading';\n    import NotificationContainer from '@core/shared/components/notifications/NotificationContainer';\n    import BackToTop from '@shared/components/enhancers/BackToTop';\n    import viewportConstants from '@core/utils/constants/viewport';\n    import { setMetaViewport as viewportUtilsSetMetaViewport } from '@core/utils/viewportUtils';\n    import {\n        normalizeInitialStateFromQuery as searchUtilsNormalizeInitialStateFromQuery\n    } from '@core/utils/searchUtils';\n\n    /**\n     * TODO HACK ionut\n     * after we remove the pattern index.js we end up in a situatie where we have an css conflict order between chunks\n     * for now we will \"hide\" that and resurect ticket\n     * https://boatyardx.atlassian.net/browse/GL-1221\n     */\n    // eslint-disable-next-line no-unused-vars\n    import ExpansionPanel from '@core/shared/components/misc/ExpansionPanel.vue';\n    // eslint-disable-next-line no-unused-vars\n    import HeaderVariant2 from '@core/shared/components/modals/layout/HeaderVariant2.vue';\n    // eslint-disable-next-line no-unused-vars\n    import EventHealthCheckWarningCardVariant1 from '@core/shared/components/notifications/EventHealthCheckWarningCardVariant1.vue';\n    // eslint-disable-next-line no-unused-vars\n    import EventHealthCheckWarningCardVariant2 from '@core/shared/components/notifications/EventHealthCheckWarningCardVariant2.vue';\n\n    Vue.component( 'default-layout', DefaultLayout );\n    Vue.component( 'blank-layout', BlankLayout );\n\n\n    const STORE_SEARCH_STATE = 'searchState';\n    const DEFAULT_LAYOUT = 'default';\n\n    export default {\n        name: 'App',\n        components: {\n            BackToTop,\n            NotificationContainer,\n            DataLoading\n        },\n        computed: {\n            ...mapGetters( {\n                userEmail: 'user/profile/email',\n                userHasCurrentLocationPosition: 'user/location/hasCurrentPosition',\n                userCurrentCityLocation: 'user/location/currentCityLocation'\n            } ),\n            ...mapState( {\n                initialSearch: state => state[STORE_SEARCH_STATE].initial,\n                loadingOverlay: state => state['appState'].loading\n            } ),\n            layout( ) {\n                const layout = this.$route.meta.layout || DEFAULT_LAYOUT;\n\n                if ( layout.toLocaleLowerCase( ) === 'blank' ) {\n                    return 'blank-layout';\n                }\n\n                return 'default-layout';\n            }\n        },\n        methods: {\n            ...mapActions( {\n                clearCurrentSearchState:            `${STORE_SEARCH_STATE}/clearCurrent`,\n                getUserProfile:                     'user/profile/get',\n                instantDeleteAllCartsIfExpired:     'cart/deleteAllIfExpired',\n                instantDeleteCurrentCart:           'cart/instantDeleteCurrentCart',\n                updateInitialSearchState:           `${STORE_SEARCH_STATE}/updateInitial`,\n                updateCurrentSearchState:           `${STORE_SEARCH_STATE}/update`,\n                updateTopEventsFilter:              'topEvents/updateFilter',\n                getUserCurrentLocation:             'user/location/getCurrentLocation'\n            } ),\n            loadInitialSearchFromQuery( query ) {\n                return this.updateInitialSearchState( searchUtilsNormalizeInitialStateFromQuery ( query ) );\n            },\n            overwriteCurrentSearchWithInitialSearch( ) {\n                this.updateCurrentSearchState( this.initialSearch );\n            },\n            overwriteTopEventWithCity( ) {\n                if ( this.initialSearch && this.initialSearch.city && this.initialSearch.city.name ) {\n                    this.updateTopEventsFilter( { city: this.initialSearch.city } );\n                } else if ( this.userHasCurrentLocationPosition ) {\n                    this.updateTopEventsFilter( { city: this.userCurrentCityLocation } );\n                }\n            },\n            showModal( to ) {\n                let meta = to.meta;\n                let modalConfig = meta.modalConfig;\n\n                this.$modal.show(\n                    modalConfig.component,\n                    Object.assign( {}, modalConfig.props, to.params ),\n                    Object.assign(\n                        {\n                            'no-click-animation': true,\n                            persistent: true,\n                            scrollable: true,\n                            'hide-overlay': true,\n                            'retain-focus': false,\n                        },\n                        modalConfig.config,\n                        this.$vuetify.breakpoint.mdAndUp ? modalConfig.configDesktop : modalConfig.configMobile\n                    )\n                );\n            },\n            applyBeforeEachOnRouter( ) {\n                const router = this.$router;\n                const filterEachRoute = async ( to, from, next ) => {\n                    if ( await this.loadInitialSearchFromQuery( to.query ) ) {\n                        this.overwriteCurrentSearchWithInitialSearch( );\n                    } else {\n                        if ( to.meta.type !== 'modal' ) {\n                            this.clearCurrentSearchState( );\n                        }\n                    }\n\n                    if ( from.name === 'cartCheckout' && to.name !== 'cartCheckout' ) {\n                        this.instantDeleteCurrentCart( );\n                    }\n\n                    if ( to.meta.type === 'modal' ) {\n                        this.showModal( to );\n                    } else {\n                        next( );\n                    }\n                };\n\n                router.beforeEach( filterEachRoute );\n            },\n        },\n        created( ) {\n            this.instantDeleteAllCartsIfExpired( );\n            this.getUserProfile( this.userEmail );\n            this.getUserCurrentLocation( { } );\n\n            this.$router.onReady( () => {\n                this.loadInitialSearchFromQuery( this.$route.query );\n                this.overwriteCurrentSearchWithInitialSearch( );\n                this.overwriteTopEventWithCity( );\n                this.applyBeforeEachOnRouter( );\n            } );\n\n            if ( this.$vuetify.breakpoint.smAndDown && this.$device.hasIos ) {\n                viewportUtilsSetMetaViewport( viewportConstants.IOS );\n            }\n        }\n    };\n</script>\n\n\n<style lang=\"scss\" scoped>\n    .app {\n        background: rgb( 110, 108, 108 );\n    }\n</style>"]}]}