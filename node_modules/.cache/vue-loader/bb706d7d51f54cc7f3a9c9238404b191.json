{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/views/event/EventInfoModal/EventInfoModalBody.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/views/event/EventInfoModal/EventInfoModalBody.vue","mtime":1645805364020},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAiQHNjc3NWYXJpYWJsZXMiOwpAaW1wb3J0ICJAc2Nzc01peGlucyI7CgouZ3N0LWV2ZW50LWluZm8tbW9kYWxfX2JvZHkgLnYtZGl2aWRlciB7CiAgICBib3JkZXItY29sb3I6IHJnYmEoIHRoZW1lLWNvbG9yLWhleCggJ3RlcnRpYXJ5JyApLCAwLjIgKTsKfQoKLmdzdC1ldmVudC1pbmZvLW1vZGFsX19ib2R5IHsKICAgIC5nc3QtZXZlbnQtaW5mby1tb2RhbF9fYm9keS1oZWFsdGgtY2hlY2std2FybmluZy1jYXJkIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCB0aGVtZS1jb2xvci1oZXgoICdldmVudC1oZWFsdGgtY2hlY2snICksIDAuMSApOwogICAgICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsKICAgICAgICBib3JkZXItcmFkaXVzOiBib3JkZXItcmFkaXVzKCAnbm9uZScgKSAhaW1wb3J0YW50OwogICAgICAgIGJvcmRlci1sZWZ0OiBub25lICFpbXBvcnRhbnQ7CiAgICB9Cn0K"},{"version":3,"sources":["EventInfoModalBody.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EventInfoModalBody.vue","sourceRoot":"src/core/views/event/EventInfoModal","sourcesContent":["<template>\n    <v-card-text class=\"gst-event-info-modal__body flex-grow-1 content-max-width px-4 pb-2 pt-0\" :style=\"{ color:'inherit'}\">\n        <div\n            v-if=\"!!event.healthCheck\"\n            class=\"mx-n4 mt-4 mb-1\">\n            <EventHealthCheckWarningCardVariant1\n                :health-check=\"event.healthCheck\"\n                class=\"gst-event-info-modal__body-health-check-warning-card pl-4\" />\n        </div>\n        <DataLoading v-if=\"loading\" class=\"mt-5 mb-5 pt-5 pb-5\" />\n        <template v-else>\n            <v-expansion-panels v-if=\"!showNoData\" class=\"u-width-100\" accordion>\n                <v-flex v-if=\"details && details.info\">\n                    <ExpansionPanel>\n                        <template slot=\"header\">\n                            {{ $t('labels.info') }}\n                        </template>\n                        <template slot=\"content\">\n                            <p class=\"mb-0\">\n                                {{ details.info }}\n                            </p>\n                        </template>\n                    </ExpansionPanel>\n                    <v-divider />\n                </v-flex>\n                <EventInfoModalAttractionList :items=\"attractions\" />\n                <ExpansionPanel\n                    v-for=\"(detailGroup, i) in detailGroupsFiltered\"\n                    :key=\"i\">\n                    <template slot=\"header\">\n                        {{ $t(`labels.${detailGroup}`) }}\n                    </template>\n                    <template slot=\"content\">\n                        <div v-if=\"detailGroupHasMoreDetails(detailGroup)\">\n                            <div\n                                v-for=\"(detailGroupChild, j) in getDetailGroupMoreDetails(detailGroup)\"\n                                :key=\"j\"\n                                :class=\"{ 'mt-4': j > 0 }\">\n                                <h6>{{ $t(`labels.${detailGroupChild}`) }}</h6>\n                                <p class=\"mb-0\">\n                                    {{ details[detailGroup][detailGroupChild] }}\n                                </p>\n                            </div>\n                        </div>\n                        <p v-else class=\"mb-0\">\n                            {{ details[detailGroup] }}\n                        </p>\n                    </template>\n                </ExpansionPanel>\n            </v-expansion-panels>\n            <EventInfoModalNoData v-else class=\"u-height-100\" :icon=\"'$vuetify.icons.infoBordered'\" :content=\"$t( 'messages.noData' )\" />\n        </template>\n    </v-card-text>\n</template>\n\n<script>\n    import { mapActions, mapState } from 'vuex';\n    import DataLoading from '@core/shared/components/loading/DataLoading';\n    import ExpansionPanel from '@core/shared/components/misc/ExpansionPanel';\n    import asyncParallel from '@core/utils/asyncParallel';\n    import EventHealthCheckWarningCardVariant1 from '@core/shared/components/notifications/EventHealthCheckWarningCardVariant1.vue';\n    import EventInfoModalAttractionList from './EventInfoModalAttractionList.vue';\n    import EventInfoModalNoData from './EventInfoModalNoData.vue';\n\n\n    export default {\n        name: 'EventInfoModalBody',\n        components: {\n            ExpansionPanel,\n            EventInfoModalAttractionList,\n            EventInfoModalNoData,\n            EventHealthCheckWarningCardVariant1,\n            DataLoading,\n        },\n        props: {\n            event: {\n                type: Object,\n                required: true\n            },\n        },\n        i18nOptions: {\n            namespaces: 'main',\n            keyPrefix: 'views.event.eventInfoModal.details'\n        },\n        data() {\n            return {\n                loading: false,\n                attractions: [ ]\n            };\n        },\n        computed: {\n            ...mapState( {\n                details: state => state.events.informationDetails\n            } ),\n            detailGroups( ) {\n                return Object.keys( this.details );\n            },\n            detailGroupsFiltered( ) {\n                return this.detailGroups.filter( value => value !== 'info' );\n            },\n            hasDetails( ) {\n                return !!this.detailGroupsFiltered.length;\n            },\n            showNoData( ) {\n                return !this.hasDetails && !this.attractions.length;\n            }\n        },\n        methods: {\n            ...mapActions( {\n                loadInformationDetails: 'events/informationDetails',\n                loadAttractions: 'attractions/searchByEvent'\n            } ),\n            detailGroupHasMoreDetails( item ) {\n                const values = this.detailGroups.filter( value => typeof this.details[value] === 'object' );\n                return values ? values.includes( item ) : false;\n            },\n            getDetailGroupMoreDetails( item ) {\n                return Object.keys( this.details[item] );\n            }\n        },\n        async mounted() {\n            this.loading = true;\n            await asyncParallel( [\n                async ( ) => { await this.loadInformationDetails( this.event.id ); },\n                async ( ) => {\n                    const response = await this.loadAttractions( { eventId: this.event.id } );\n\n                    if ( response.success ) {\n                        this.attractions = [ ...response.data.list ];\n                    }\n                },\n            ], 2 );\n            this.loading = false;\n        }\n    };\n</script>\n\n<style lang=\"scss\">\n    @import \"@scssVariables\";\n    @import \"@scssMixins\";\n\n    .gst-event-info-modal__body .v-divider {\n        border-color: rgba( theme-color-hex( 'tertiary' ), 0.2 );\n    }\n\n    .gst-event-info-modal__body {\n        .gst-event-info-modal__body-health-check-warning-card {\n            background-color: rgba( theme-color-hex( 'event-health-check' ), 0.1 );\n            box-shadow: none !important;\n            border-radius: border-radius( 'none' ) !important;\n            border-left: none !important;\n        }\n    }\n</style>"]}]}