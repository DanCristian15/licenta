{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/lifestyle-ui/src/core/views/cart/TheChekoutWizard/Step2DeliveryForm.vue?vue&type=style&index=0&id=41122023&lang=scss&scoped=true&","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/views/cart/TheChekoutWizard/Step2DeliveryForm.vue","mtime":1645805364017},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIkBzY3NzVmFyaWFibGVzIjsKCi5nc3QtY2hlY2tvdXQtc3RlcC0yLWZvcm0gewogICAgLnYtY2FyZCB7CiAgICAgICAgYm9yZGVyLXJhZGl1czogYm9yZGVyLXJhZGl1cyggJ20nICkgIWltcG9ydGFudDsKICAgICAgICBib3JkZXItY29sb3I6IHRoZW1lLWNvbG9yKCAncXVpbmFyeScgKTsKICAgIH0KCiAgICA6OnYtZGVlcCAudi1pY29uX19jb21wb25lbnQgewogICAgICAgIGhlaWdodDogYXV0bzsKICAgICAgICB3aWR0aDogYXV0bzsKICAgIH0KCiAgICAuZ3N0LWlucHV0IHsKICAgICAgICAuZ3N0LWljb24tc3ZnIHsKICAgICAgICAgICAgLmdzdC1zdmctaWNvbiB7CiAgICAgICAgICAgICAgICBmaWxsOiB0aGVtZS1jb2xvciggJ3RlcnRpYXJ5JyApOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC5nc3QtaW5wdXQudi1zZWxlY3QtLWlzLW1lbnUtYWN0aXZlIHsKICAgICAgICAuZ3N0LWljb24tc3ZnIHsKICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoIDE4MGRlZyApOwoKICAgICAgICAgICAgLmdzdC1zdmctaWNvbiB7CiAgICAgICAgICAgICAgICBmaWxsOiB0aGVtZS1jb2xvciggJ3ByaW1hcnknICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCi5nc3QtaW5mbyB7CiAgICBmb250LXNpemU6IGZvbnQtc2l6ZSggJ3h4cycgKTsKCiAgICBzdmcgLmdzdC1zdmctaWNvbiB7CiAgICAgICAgZmlsbDogdGhlbWUtY29sb3IoICd3YXJuaW5nJyApOwogICAgfQoKICAgIHNwYW4gewogICAgICAgIGxpbmUtaGVpZ2h0OiAxNHB4OwogICAgICAgIHBhZGRpbmctbGVmdDogOHB4OwogICAgICAgIG1heC13aWR0aDogOTAlOwogICAgfQp9Cg=="},{"version":3,"sources":["Step2DeliveryForm.vue"],"names":[],"mappingsgBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Step2DeliveryForm.vue","sourceRoot":"src/core/views/cart/TheChekoutWizard","sourcesContent":["<template>\n    <v-container class=\"gst-checkout-step-2-form py-0 px-2\">\n        <v-row>\n            <v-col cols=\"12\" class=\"pt-0 pb-2\">\n                <SectionTitleSmall>{{ $t(\"fieldsets.customerInformation\") }}</SectionTitleSmall>\n            </v-col>\n            <v-col xs=\"6\" class=\"py-0 px-1\">\n                <v-text-field\n                    v-model=\"customerModel.firstName\"\n                    :data-test-id=\"$testId('input.firstName')\"\n                    color=\"primary\"\n                    :label=\"$t('labels.firstName')\"\n                    :error-messages=\"requiredError({model: 'customerModel', field: 'firstName'})\"\n                    required\n                    class=\"gst-input--secondary gst-input\"\n                    outlined\n                    maxlength=\"30\" />\n            </v-col>\n            <v-col xs=\"6\" class=\"py-0 px-1\">\n                <v-text-field\n                    v-model=\"customerModel.lastName\"\n                    :data-test-id=\"$testId('input.lastName')\"\n                    color=\"primary\"\n                    :label=\"$t('labels.lastName')\"\n                    :error-messages=\"requiredError({model: 'customerModel', field: 'lastName'})\"\n                    required\n                    class=\"gst-input--secondary gst-input\"\n                    outlined\n                    maxlength=\"30\" />\n            </v-col>\n            <v-col cols=\"12\" class=\"py-0 px-1\">\n                <v-text-field\n                    v-model=\"customerModel.address\"\n                    :data-test-id=\"$testId('input.address')\"\n                    color=\"primary\"\n                    :label=\"$t('labels.address')\"\n                    :error-messages=\"requiredError({model: 'customerModel', field: 'address'})\"\n                    required\n                    class=\"gst-input--secondary gst-input\"\n                    outlined\n                    maxlength=\"100\" />\n            </v-col>\n            <v-col cols=\"6\" class=\"py-0 px-1\">\n                <v-text-field\n                    v-model=\"customerModel.city\"\n                    :data-test-id=\"$testId('input.city')\"\n                    color=\"primary\"\n                    :label=\"$t('labels.city')\"\n                    :error-messages=\"requiredError({model: 'customerModel', field: 'city'})\"\n                    required\n                    class=\"gst-input--secondary gst-input\"\n                    outlined\n                    maxlength=\"100\" />\n            </v-col>\n            <v-col cols=\"6\" class=\"py-0 px-1\">\n                <v-select\n                    v-model=\"customerModel.state\"\n                    :data-test-id=\"$testId('select.state')\"\n                    :items=\"states\"\n                    item-value=\"code\"\n                    item-text=\"name\"\n                    :label=\"$t('labels.state')\"\n                    color=\"primary\"\n                    outlined\n                    :error-messages=\"requiredError({model: 'customerModel', field: 'state'})\"\n                    class=\"gst-input--secondary gst-input\">\n                    <template slot=\"append\">\n                        <i class=\"gst-icon-svg\">\n                            <IconDropDownArrow class=\"gst-dropdown-icon-svg\" />\n                        </i>\n                    </template>\n                </v-select>\n            </v-col>\n            <v-col cols=\"6\" class=\"py-0 px-1\">\n                <v-text-field\n                    v-model=\"customerModel.zip\"\n                    :data-test-id=\"$testId('input.zip')\"\n                    color=\"primary\"\n                    :label=\"$t('labels.zip')\"\n                    :error-messages=\"zipCodeErrors\"\n                    required\n                    class=\"gst-input--secondary gst-input\"\n                    outlined />\n            </v-col>\n            <v-col cols=\"6\" class=\"py-0 px-1\">\n                <v-select\n                    v-model=\"customerModel.country\"\n                    :data-test-id=\"$testId('select.country')\"\n                    :items=\"countries\"\n                    item-value=\"code\"\n                    item-text=\"name\"\n                    :label=\"$t('labels.country')\"\n                    color=\"primary\"\n                    outlined\n                    :error-messages=\"[\n                        ...requiredError({model: 'customerModel', field: 'country'}),\n                        ...countryShippingOptionsError({model: 'customerModel', field: 'country'}),\n                    ]\"\n                    class=\"gst-input--secondary gst-input\"\n                    @change=\"onChangeCountryDo\"\n                    @blur=\"onBlurCountryDo\">\n                    <template slot=\"append\">\n                        <i class=\"gst-icon-svg\">\n                            <IconDropDownArrow class=\"gst-dropdown-icon-svg\" />\n                        </i>\n                    </template>\n                </v-select>\n            </v-col>\n            <v-col v-if=\"isPhoneRequired\" cols=\"6\" class=\"py-0 px-1\">\n                <v-text-field\n                    v-model=\"customerModel.phone\"\n                    type=\"tel\"\n                    :data-test-id=\"$testId('input.phone')\"\n                    color=\"primary\"\n                    class=\"gst-input--secondary gst-input\"\n                    :label=\"$t('labels.phone')\"\n                    :error-messages=\"[\n                        ...requiredError({model: 'customerModel', field: 'phone'}),\n                        ...phoneNumberError({model: 'customerModel', field: 'phone'}),\n                    ]\"\n                    required\n                    outlined />\n            </v-col>\n            <v-col :cols=\"isPhoneRequired ? 6 : 12\" class=\"py-0 px-1\">\n                <v-text-field\n                    v-model=\"customerModel.email\"\n                    :data-test-id=\"$testId('input.email')\"\n                    color=\"primary\"\n                    class=\"gst-input--secondary gst-input\"\n                    :label=\"$t('labels.email')\"\n                    :error-messages=\"[\n                        ...requiredError({model: 'customerModel', field: 'email'}),\n                        ...emailError({model: 'customerModel', field: 'email'})\n                    ]\"\n                    required\n                    outlined\n                    maxlength=\"255\" />\n            </v-col>\n            <!-- TODO: For now this is static, when integrating loyalty program this should be sent to BE -->\n            <v-col cols=\"12\" class=\"py-0 px-1\">\n                <v-text-field\n                    :data-test-id=\"$testId('input.loyalty')\"\n                    color=\"primary\"\n                    class=\"gst-input--secondary gst-input\"\n                    :label=\"$t('labels.loyalty')\"\n                    outlined />\n            </v-col>\n            <v-col v-if=\"hasShippingOptions\" cols=\"12\" class=\"pa-0\">\n                <v-col cols=\"12\" class=\"pt-0 pb-2\">\n                    <SectionTitleSmall>{{ $t(\"fieldsets.deliveryInformation\") }}</SectionTitleSmall>\n                </v-col>\n                <v-col cols=\"12\" class=\"gst-info pt-0 px-1\">\n                    <IconWarning class=\"d-inline-block u-align-vertical-middle\" />\n                    <span class=\"d-inline-block u-align-vertical-middle tertiary--text\">{{ $t(\"messages.info\") }}</span>\n                </v-col>\n            </v-col>\n            <v-col cols=\"12\"\n                sm=\"8\"\n                md=\"8\"\n                class=\"py-0 px-1\">\n                <DataLoadingOverlay\n                    :show=\"shippingModel.loading\"\n                    :color=\"'white'\">\n                    <Step2DeliveryFormShippingOptions\n                        :shipping-model=\"shippingModel\"\n                        :error-messages=\"checkboxShippingOptionsError({model: 'shippingModel', field: 'optionId'})\" />\n                </DataLoadingOverlay>\n            </v-col>\n            <v-col cols=\"12\" class=\"py-0 px-1\">\n                <v-checkbox\n                    v-model=\"agreeModel.terms\"\n                    off-icon=\"$vuetify.icons.checkboxUnchecked\"\n                    on-icon=\"$vuetify.icons.checkboxChecked\"\n                    :data-test-id=\"$testId('checkbox.terms')\"\n                    class=\"gst-checkbox gst-checkout-step-2-form__field-terms-conditions d-inline-block u-align-vertical-middle\"\n                    :class=\"{ 'mt-0': !hasShippingOptions }\"\n                    :error-messages=\"checkboxTermsError({model: 'agreeModel', field: 'terms'})\">\n                    <template slot=\"label\">\n                        <span>\n                            {{ $t(\"labels.agree\") }}\n                            <a href=\"#\" class=\"d-inline\" @click=\"openTermsAgreementModal\">\n                                {{ $t(\"labels.terms\") }}\n                            </a>\n                        </span>\n                    </template>\n                </v-checkbox>\n            </v-col>\n            <v-col v-if=\"hasHealthCheck\" cols=\"12\" class=\"py-0 px-1\">\n                <v-checkbox\n                    v-model=\"agreeModel.healthCheck\"\n                    off-icon=\"$vuetify.icons.checkboxUnchecked\"\n                    on-icon=\"$vuetify.icons.checkboxChecked\"\n                    :data-test-id=\"$testId('checkbox.healthCheck')\"\n                    class=\"gst-checkbox gst-checkout-step-2-form__field-healthcheck d-inline-block u-align-vertical-middle mt-0\"\n                    :error-messages=\"checkboxHealthCheckError({model: 'agreeModel', field: 'healthCheck'})\">\n                    <template slot=\"label\">\n                        <span>\n                            {{ $t(\"labels.healthCheck\") }}\n                        </span>\n                    </template>\n                </v-checkbox>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n<script>\n    import {\n        required,\n        email,\n        numeric,\n        minLength\n    } from 'vuelidate/lib/validators';\n    import {\n        phoneNumber as validateUtilsPhoneNumber,\n        zipCA as validateUtilsZipCA\n    } from '@core/utils/validate';\n    import {\n        zipFormat as formatUtilsZipFormat\n    } from '@core/utils/formatUtils';\n    import IconWarning from '@core/shared/assets/icons/warning.svg';\n    import DataLoadingOverlay from '@core/shared/components/loading/DataLoadingOverlay.vue';\n    import SectionTitleSmall from '@core/shared/components/misc/SectionTitleSmall.vue';\n    import IconDropDownArrow from '@core/shared/assets/icons/dropdown_arrow.svg';\n    import Step2DeliveryFormTermsAgreementModalContent from './Step2DeliveryFormTermsAgreementModalContent.vue';\n    import Step2DeliveryFormShippingOptions from './Step2DeliveryFormShippingOptions.vue';\n\n    const ZIP_MIN_LENGTH_US = 5;\n\n    export default {\n        name: 'Step2DeliveryForm',\n        i18nOptions: {\n            namespaces: 'main',\n            keyPrefix: 'views.cart.theCheckoutWizard._components.step2Delivery.form'\n        },\n        testIdOptions: {\n            keyPrefix: 'checkoutWizard.step2Delivery.form'\n        },\n        components: {\n            IconWarning,\n            SectionTitleSmall,\n            Step2DeliveryFormShippingOptions,\n            IconDropDownArrow,\n            DataLoadingOverlay\n        },\n        props: {\n            customerModel: {\n                type: Object,\n                required: true\n            },\n            shippingModel: {\n                type: Object,\n                required: true\n            },\n            agreeModel: {\n                type: Object,\n                required: true\n            },\n            hasHealthCheck: {\n                type: Boolean,\n                default: false\n            },\n            countries: {\n                type: Array,\n                default: () => ( [] )\n            }\n        },\n        data() {\n            return {\n                tooltip: false,\n                states: []\n            };\n        },\n        computed: {\n            isPhoneRequired() {\n                return !!this.customerModel.hasOwnProperty( 'phone' );\n            },\n            zipCodeErrors() {\n                let commonErrors = [\n                    ...this.requiredError( { model: 'customerModel', field: 'zip' } ),\n                    ...this.minLengthError( { model: 'customerModel', field: 'zip' } ),\n                ];\n\n                if ( this.customerModel.country && this.customerModel.country === 'CA' ){\n                    return [\n                        ...commonErrors,\n                        ...this.zipError( { model: 'customerModel', field: 'zip' } )\n                    ];\n                }\n\n                return [\n                    ...commonErrors,\n                    ...this.numericError( { model: 'customerModel', field: 'zip' } ),\n                ];\n            },\n            hasShippingOptions() {\n                return !!this.shippingModel.options.length;\n            }\n        },\n        watch: {\n            'customerModel.country': {\n                handler: function ( value ) {\n                    if ( value ) {\n                        this.loadStates( );\n                    } else {\n                        this.clearStates( );\n                    }\n                },\n                deep: true,\n                immediate: true\n            },\n            '$v.agreeModel.healthCheck.$invalid': {\n                handler: function( value ) {\n                    this.$emit( 'healthcheck-validation-error', value );\n                },\n                deep: true\n            }\n        },\n        validations() {\n            const ret = {\n                customerModel: {\n                    firstName: {\n                        required\n                    },\n                    lastName: {\n                        required\n                    },\n                    address: {\n                        required\n                    },\n                    city: {\n                        required\n                    },\n                    zip: {\n                        required,\n                        numeric,\n                        minLength: minLength( ZIP_MIN_LENGTH_US )\n                    },\n                    state: {\n                        required\n                    },\n                    country: {\n                        required,\n                        requiredShippingOptions: function( ) {\n                            return this.hasShippingOptions;\n                        }\n                    },\n                    phone: {\n                        required,\n                        phoneNumber: validateUtilsPhoneNumber\n                    },\n                    email: {\n                        required,\n                        email\n                    },\n                },\n                shippingModel : {\n                    optionId: {\n                        requiredShippingOptions: function ( ) {\n                            return !!( this.hasShippingOptions && this.shippingModel.optionId );\n                        }\n                    }\n                },\n                agreeModel: {\n                    terms: {\n                        checked( val ) {\n                            return val;\n                        }\n                    },\n                    healthCheck: {\n                        checked( val ) {\n                            return val;\n                        }\n                    }\n                }\n            };\n            if ( !this.isPhoneRequired ) {\n                delete ret.customerModel.phone;\n            }\n\n            const zipValidationsCA = {\n                required,\n                minLength: minLength( 6 ),\n                zip: validateUtilsZipCA\n            };\n\n            if ( this.customerModel.country && this.customerModel.country === 'CA' ){\n                Object.assign( ret.customerModel, { zip: zipValidationsCA } );\n            }\n\n            return ret;\n        },\n        methods: {\n            requiredError( { model, field } ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].required   && errors.push ( this.$t( '_common:formErrors.requiredField', { field: this.$t( `labels.${field}` ), interpolation : { escapeValue: false } } ) );\n                return errors;\n            },\n            countryShippingOptionsError( { model, field } ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].requiredShippingOptions  && errors.push ( this.$t( 'messages.countryShippingOptionsError' ) );\n                return errors;\n            },\n            checkboxTermsError( { model, field }  ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].checked && errors.push( this.$t( 'messages.termsError' ) );\n                return errors;\n            },\n            checkboxShippingOptionsError( { model, field }  ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].requiredShippingOptions && errors.push( this.$t( 'messages.shippingOptionsError' ) );\n                return errors;\n            },\n            checkboxHealthCheckError( { model, field }  ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].checked && errors.push( this.$t( 'messages.healthCheckError' ) );\n                return errors;\n            },\n            numericError( { model, field }  ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                if ( !this.$v[`${model}`][`${field}`].numeric )  return [ this.$t( '_common:formErrors.numeric', { field: this.$t( `labels.${field}` ), interpolation: { escapeValue: false } } ) ];\n                return errors;\n            },\n            minLengthError( { model, field } ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].minLength &&  errors.push( this.$t( '_common:formErrors.minLength', { length : this.$v[`${model}`][`${field}`].$params.minLength.min } ) );\n                return errors;\n            },\n            emailError( { model, field } ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].email  && errors.push( this.$t( '_common:formErrors.email', { field: this.$t( `labels.${field}` ), interpolation: { escapeValue: false } } ) );\n                return errors;\n            },\n            phoneNumberError( { model, field } ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].phoneNumber  && errors.push( this.$t( '_common:formErrors.phone' ) );\n                return errors;\n            },\n            zipError( { model, field } ) {\n                let errors = [];\n                if ( !this.$v[`${model}`][`${field}`].$dirty ) return errors;\n                !this.$v[`${model}`][`${field}`].zip && errors.push ( this.$t( '_common:formErrors.zip' ) );\n                return errors;\n            },\n            validate( ) {\n                this.$v.$touch();\n                return !this.$v.$invalid;\n            },\n            clear( ) {\n                this.$v.$reset();\n            },\n            openTermsAgreementModal( event ) {\n                event.stopPropagation( );\n                const propsMobile = {\n                    'content-class': 'v-dialog__height-70 gst-v-dialog',\n                    scrollable: true,\n                    fullscreen: false,\n                    'hide-overlay': false,\n                    transition: 'dialog-bottom-transition'\n                };\n                const propsDesktop = {\n                    'no-click-animation': true,\n                    scrollable: true,\n                    fullscreen: false,\n                    'hide-overlay': false,\n                    'max-width': 500,\n                    'content-class': 'gst-v-dialog',\n                };\n\n                if ( this.$vuetify.breakpoint.mdAndUp  ){\n                    this.$modal.show(\n                        Step2DeliveryFormTermsAgreementModalContent,\n                        { },\n                        this.$vuetify.breakpoint.mdAndUp ? propsDesktop : propsMobile\n                    );\n                } else {\n                    this.$modal.showBottom(\n                        Step2DeliveryFormTermsAgreementModalContent,\n                        { },\n                        this.$vuetify.breakpoint.mdAndUp ? propsDesktop : propsMobile\n                    );\n                }\n            },\n            stateFilters() {\n                if ( this.customerModel.country ) {\n                    return {\n                        code: this.customerModel.country\n                    };\n                }\n                return null;\n            },\n            clearStates( ) {\n                this.options = [ ];\n            },\n            onBlurCountryDo() {\n                this.$v.customerModel.zip.$touch( );\n                this.formatZipCodeValue( );\n            },\n            onChangeCountryDo() {\n                this.$v.customerModel.country.$touch( );\n            },\n            formatZipCodeValue() {\n                if ( !this.$v.customerModel.zip.$invalid && this.customerModel.country ) {\n                    this.customerModel.zip = formatUtilsZipFormat( this.customerModel.zip, this.customerModel.country );\n                }\n            },\n            async loadStates() {\n                const { success, data } = await this.$store.dispatch( `states/getRaw`, { filter: this.stateFilters() }  );\n                if ( success ) {\n                    this.states = [ ...data.list ];\n                } else {\n                    this.states = [ ];\n                }\n            }\n        }\n    };\n</script>\n<style lang=\"scss\" scoped>\n    @import \"@scssVariables\";\n\n    .gst-checkout-step-2-form {\n        .v-card {\n            border-radius: border-radius( 'm' ) !important;\n            border-color: theme-color( 'quinary' );\n        }\n\n        ::v-deep .v-icon__component {\n            height: auto;\n            width: auto;\n        }\n\n        .gst-input {\n            .gst-icon-svg {\n                .gst-svg-icon {\n                    fill: theme-color( 'tertiary' );\n                }\n            }\n        }\n\n        .gst-input.v-select--is-menu-active {\n            .gst-icon-svg {\n                transform: rotate( 180deg );\n\n                .gst-svg-icon {\n                    fill: theme-color( 'primary' );\n                }\n            }\n        }\n    }\n\n    .gst-info {\n        font-size: font-size( 'xxs' );\n\n        svg .gst-svg-icon {\n            fill: theme-color( 'warning' );\n        }\n\n        span {\n            line-height: 14px;\n            padding-left: 8px;\n            max-width: 90%;\n        }\n    }\n</style>\n"]}]}