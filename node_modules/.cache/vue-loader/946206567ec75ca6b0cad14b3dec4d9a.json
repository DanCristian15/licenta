{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/lifestyle-ui/src/tenants/ticketmaster/app/views/event/TheEvent.vue?vue&type=style&index=0&id=7cce9f02&scoped=true&lang=scss&","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/tenants/ticketmaster/app/views/event/TheEvent.vue","mtime":1645805365988},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAiQHNjc3NWYXJpYWJsZXMiOwpAaW1wb3J0ICJAc2Nzc01peGlucyI7CgouZ3N0LWV2ZW50IHsKICAgIGhlaWdodDogY2FsYyggMTAwdmggLSA1MHB4ICk7Cn0KCi5nc3QtZXZlbnQtbW9iaWxlIHsKICAgIGhlaWdodDogMTAwdmg7Cn0KCi5nc3QtZXZlbnRfX2ZpbHRlciB7CiAgICBwYWRkaW5nLXRvcDogMTJweDsKICAgIHotaW5kZXg6IDE7CgogICAgQGluY2x1ZGUgbW9iaWxlLW9ubHkgewogICAgICAgIHBhZGRpbmctdG9wOiAxNnB4OwogICAgfQp9Cg=="},{"version":3,"sources":["TheEvent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA23BA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"TheEvent.vue","sourceRoot":"src/tenants/ticketmaster/app/views/event","sourcesContent":["<template>\n    <div class=\"gst-event\"\n        :class=\"{'gst-event-mobile': !$vuetify.breakpoint.mdAndUp}\">\n        <Header v-if=\"$vuetify.breakpoint.mdAndUp\" />\n        <DataLoading v-if=\"loading\" class=\"mt-5 mb-5 pt-5 pb-5\" />\n        <div v-else-if=\"isEvent\" class=\"d-flex flex-column u-height-100\">\n            <EventBanner :item=\"event\" @click-back=\"onBannerClickBackDo\" />\n            <EventNotAvailable v-if=\"isEventTicketsNotAvailable || isEventPackageOffersNotAvailable\" :event=\"event\" :is-package-offers-not-available=\"isEventPackageOffersNotAvailable\" />\n            <template v-else>\n                <EventVenueImage v-if=\"!$vuetify.breakpoint.smAndUp\" :loading=\"loadingTickets || loadingSections\" :tickets=\"tickets\" :venue-details=\"venueDetails\" />\n                <div :style=\"{'flex': 1, display: 'flex', 'min-height':0}\">\n                    <div v-if=\"$vuetify.breakpoint.smAndUp\" :style=\"{flex: 1}\" class=\"col col-sm-8 pa-0\">\n                        <EventTicketImage\n                            :loading-tickets=\"loadingTickets || loadingSections\"\n                            :tickets=\"tickets\"\n                            :venue-details=\"venueDetails\"\n                            :venue-seat-map-url=\"venueSeatMapUrl\" />\n                    </div>\n                    <div :style=\"{ flex: 1 }\" class=\"d-flex flex-column col col-sm-4 u-position-relative pa-0\">\n                        <DataLoading v-if=\"loadingSections\" class=\"mt-5 mb-5 pt-5 pb-5\" />\n                        <div v-else-if=\"!isPackageFlow\" class=\"d-flex flex-column u-position-relative pa-0 u-height-100\">\n                            <v-slide-x-reverse-transition>\n                                <EventTicketDetailSidebar\n                                    v-if=\"selectedTicket\"\n                                    :ticket=\"selectedTicket\"\n                                    :offers=\"selectedTicketDetailInfo.offers\"\n                                    :hotel-reservation=\"selectedHotelReservation\"\n                                    :event=\"selectedTicketDetailInfo.event\"\n                                    :quantity=\"selectedTicketDetailInfo.quantity\"\n                                    :bus-event-parent=\"busEvent\"\n                                    :venue-details=\"venueDetails\"\n                                    class=\"u-width-100 u-height-100 u-pull-front u-position-absolute\"\n                                    @close-ticket=\"selectedTicket = null\" />\n                            </v-slide-x-reverse-transition>\n                            <EventTicketFilter\n                                v-model=\"filter\"\n                                :options=\"filterOptions.current\"\n                                :show-filters=\"showAddionalTicketFilters\"\n                                @click-filter-btn=\"showAddionalTicketFilters = !showAddionalTicketFilters\" />\n                            <div :style=\"{'flex': 1, display: 'flex', 'min-height':0}\" class=\"u-position-relative\">\n                                <v-slide-x-reverse-transition>\n                                    <EventTicketAddionalFiltersSidebar\n                                        v-if=\"showAddionalTicketFilters\"\n                                        :value=\"filter\"\n                                        :options=\"filterOptions.current\"\n                                        class=\"u-width-100 u-height-100 u-pull-front u-position-absolute\"\n                                        @apply=\"updateFilter\"\n                                        @reset=\"resetFilter\"\n                                        @close=\"showAddionalTicketFilters = false\" />\n                                </v-slide-x-reverse-transition>\n                                <EventTicketList\n                                    :event=\"event\"\n                                    :tickets=\"tickets\"\n                                    :total-tickets=\"totalTickets\"\n                                    :tickets-with-offers=\"ticketsWithOffers\"\n                                    :loading-tickets=\"loadingTickets\"\n                                    :selected-ticket=\"selectedTicket\"\n                                    :selected-ticket-detail-info=\"selectedTicketDetailInfo\"\n                                    :sort=\"sort\"\n                                    :bus-event-parent=\"busEvent\"\n                                    @hightlight-ticket=\"setHighlightedTicket\"\n                                    @click-item=\"openEventTicketDetail\"\n                                    @load-more=\"loadTicketsDebounced\"\n                                    @close-ticket=\"selectedTicket = null\" />\n                            </div>\n                        </div>\n                        <div v-else-if=\"isPackageFlow\" class=\"d-flex flex-column u-position-relative pa-0 u-height-100\">\n                            <v-slide-x-reverse-transition>\n                                <SectionDetailSidebar\n                                    v-if=\"selectedSection\"\n                                    :section=\"selectedSection\"\n                                    :hotel-reservation=\"selectedHotelReservation\"\n                                    :event=\"event\"\n                                    :quantity=\"filterSections.quantity\"\n                                    :bus-event-parent=\"busEvent\"\n                                    :venue-details=\"venueDetails\"\n                                    class=\"u-width-100 u-height-100 u-pull-front u-position-absolute\"\n                                    @close-ticket=\"selectedSection = null\" />\n                            </v-slide-x-reverse-transition>\n                            <EventSectionsFilters v-model=\"filterSections\" :options=\"filterSectionOptions\" />\n                            <SectionsList\n                                :style=\"{'flex': 1, display: 'flex', 'min-height':0}\"\n                                :event=\"event\"\n                                :sections=\"sections\"\n                                :loading-sections=\"loadingSections\"\n                                @hightlight-section=\"setHighlightedSection\"\n                                @select-section=\"setSelectedSection\" />\n                        </div>\n                    </div>\n                </div>\n            </template>\n        </div>\n        <router-view />\n    </div>\n</template>\n\n<script>\n    import Header from '@tenant/app/layouts/components/Header.vue';\n    import Vue from 'vue';\n    import debounce from 'lodash/debounce';\n    import isEqual from 'lodash/isEqual';\n    import cloneDeep from 'lodash/cloneDeep';\n    import { mapActions, mapState, mapGetters } from 'vuex';\n    import { redirectToHome as tenantRedirectToHome } from '@tenant/app/utils/tenantUrlslUtils';\n    import eventConstants from '@core/utils/constants/event';\n    import apiConstants from '@core/utils/constants/api';\n    import listConstants from '@core/utils/constants/list';\n    import {\n        isAfter as dateUtilsIsAfter,\n        differenceInSeconds as dateUtilsDifferenceInSeconds\n    } from '@core/utils/dateUtils';\n    import {\n        hasTicketAvailable as eventUtilsHasTicketAvailable\n    } from '@core/utils/eventUtils';\n    import { getFromApiResponse as notificationUtilsGetFromApiResponse } from '@core/utils/notificationUtils';\n    import asyncParallel from '@core/utils/asyncParallel';\n    import EntityNotFoundRedirect404 from '@core/mixins/EntityNotFoundRedirect404';\n    import DataLoading from '@core/shared/components/loading/DataLoading.vue';\n    import ApiCancelService from '@services/ApiCancelService';\n    import EventBanner from './TheEvent/EventBanner.vue';\n    import EventTicketList from './TheEvent/EventTicketList.vue';\n    import EventTicketFilter from './TheEvent/EventTicketFilter.vue';\n    import EventTicketImage from './TheEvent/EventTicketImage.vue';\n    import EventVenueImage from './TheEvent/EventVenueImage.vue';\n    import HealthCheckConfirmationModal from './TheEvent/HealthCheckConfirmationModal/HealthCheckConfirmationModal';\n    import SectionsList from './TheEvent/SectionsList';\n    import EventSectionsFilters from './TheEvent/EventSectionsFilters';\n    import SectionDetailSidebar from './TheEvent/SectionDetailSidebar';\n\n    const STORE_NAME = 'events';\n    const STORE_NAME_PACKAGES = 'packageOffers';\n\n    const CONFIG_TICKETS = {\n        LIMIT: 20,\n        FILTER_DEFAULT: {\n            QUANTITY: 2,\n            MIN_QUANTITY: 1,\n            MAX_QUANTITY: 50,\n            PRICE: {\n                MIN: 0,\n                MAX: 5000,\n                CURRENCY: ''\n            },\n            ACCESSIBILITY: false,\n        },\n        FILTER_BUNDLE_DEFAULT: {\n            QUANTITY: 2,\n            MIN_QUANTITY: 2,\n            MAX_QUANTITY: 50\n        }\n    };\n\n    export default {\n        name: 'TheEvent',\n        components: {\n            SectionDetailSidebar,\n            Header,\n            DataLoading,\n            EventBanner,\n            EventTicketList,\n            EventTicketFilter,\n            EventTicketImage,\n            EventVenueImage,\n            SectionsList,\n            EventSectionsFilters,\n            EventNotAvailable: ( ) => import( './TheEvent/EventNotAvailable.vue' ),\n            EventTicketAddionalFiltersSidebar: () => import( './TheEvent/EventTicketAddionalFiltersSidebar' ),\n            EventTicketDetailSidebar: () => import( './TheEvent/EventTicketDetailSidebar' )\n        },\n        i18nOptions: {\n            namespaces: 'main',\n            keyPrefix: 'views.event.theEvent'\n        },\n        testIdOptions: {\n            keyPrefix: 'event'\n        },\n        mixins: [\n            EntityNotFoundRedirect404,\n        ],\n        data( ) {\n            const defaultSort = { value: 'price', 'display': this.$t( '_common:terms.lowestPrice' ) };\n\n            return {\n                loading: true,\n                tickets: [ ],\n                sections: [ ],\n                totalTickets: 0,\n                offersMap: { },\n                ticketTypesMap: { },\n                venueDetails: {\n                    mapUrl: '',\n                    mapWithlabelsUrl: ''\n                },\n                event: { },\n                selectedHotelReservation: null,\n                highlightedTicket: null,\n                highlightedSection: null,\n                selectedTicket: null,\n                selectedSection: null,\n                showAddionalTicketFilters: false,\n                defaultSort: defaultSort,\n                sort: {\n                    value: defaultSort,\n                    options: [\n                        defaultSort,\n                        { value: 'quality', 'display': this.$t( '_common:terms.bestSeats' ) },\n                    ]\n                },\n                filter: {\n                    quantity: CONFIG_TICKETS.FILTER_DEFAULT.QUANTITY,\n                    price: {\n                        range: [ CONFIG_TICKETS.FILTER_DEFAULT.PRICE.MIN, CONFIG_TICKETS.FILTER_DEFAULT.PRICE.MAX ],\n                        min: CONFIG_TICKETS.FILTER_DEFAULT.PRICE.MIN,\n                        max: CONFIG_TICKETS.FILTER_DEFAULT.PRICE.MAX,\n                        currency: CONFIG_TICKETS.FILTER_DEFAULT.PRICE.QUANTITY\n                    },\n                    accessibility: CONFIG_TICKETS.FILTER_DEFAULT.ACCESSIBILITY\n                },\n                filterOptions: {\n                    current: {\n                        accessibilityEnabled: false,\n                        minQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MIN_QUANTITY,\n                        maxQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MAX_QUANTITY\n                    },\n                    noAccesability: {\n                        minQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MIN_QUANTITY,\n                        maxQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MAX_QUANTITY\n                    },\n                    accessibility: {\n                        minQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MIN_QUANTITY,\n                        maxQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MAX_QUANTITY,\n                        companionMinQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MIN_QUANTITY,\n                        companionMaxQuantity: CONFIG_TICKETS.FILTER_DEFAULT.MAX_QUANTITY\n                    }\n                },\n                filterSectionOptions: {\n                    accessibilityEnabled: false,\n                    minQuantity: CONFIG_TICKETS.FILTER_BUNDLE_DEFAULT.MIN_QUANTITY,\n                    maxQuantity: CONFIG_TICKETS.FILTER_BUNDLE_DEFAULT.MAX_QUANTITY\n                },\n                busEvent: new Vue( ),\n                loadingTickets: false,\n                isEventTicketsMaintenance: false,\n                userAnalytics: false,\n                lastAppliedFilter: { },\n                previousRoute: { },\n                isPackageFlow: false\n            };\n        },\n        computed: {\n            ...mapState( {\n                item:               state => state[STORE_NAME].detail,\n                forceDynamicFlow:   state => state.appState.forceDynamicFlow\n            } ),\n            ...mapGetters( {\n                hasPackageByEventId             : `${STORE_NAME_PACKAGES}/hasByEventId`,\n                getAvailable                    : `${STORE_NAME_PACKAGES}/getAvailable`,\n                loadingSections                 : `${STORE_NAME_PACKAGES}/getLoading`,\n                isForcedDynamicFlow             : 'appState/isForcedDynamicFlow'\n            } ),\n            routeId( ) {\n                return this.$route.params.id;\n            },\n            itemId( ) {\n                return this.event.id;\n            },\n            venueSeatMapUrl( ) {\n                if( this.isPackageFlow ) {\n                    if( this.selectedSection ) {\n                        return this.selectedSection.venueSeatMapUrl;\n                    }\n\n                    if( this.highlightedSection ) {\n                        return this.highlightedSection.venueSeatMapUrl;\n                    }\n\n                    return null;\n                }\n                if ( this.selectedTicket ) {\n                    return this.selectedTicket.venueSeatMapUrl;\n                }\n                if ( this.highlightedTicket ) {\n                    return this.highlightedTicket.venueSeatMapUrl;\n                }\n                return null;\n            },\n            noTickets() {\n                return '';\n            },\n            selectedTicketDetailInfo( ) {\n                return this.selectedTicket ?  this.getTicketDetailInfo( this.selectedTicket ) : null;\n            },\n            isMaxQuantityAvailable( ) {\n                return this.filterOptions.current.maxQuantity >= CONFIG_TICKETS.FILTER_DEFAULT.MAX_QUANTITY;\n            },\n            isEventTicketsStatusFewAvailable( ) {\n                return this.event.ticketsStatus === eventConstants.TICKETS_STATUS.FEW_AVAILABLE;\n            },\n            isEventTicketsNotAvailable( ) {\n                return !eventUtilsHasTicketAvailable( this.event );\n            },\n            isEventPackageOffersNotAvailable() {\n                return !this.isPackageFlow && !this.loadingSections && !this.isForcedDynamicFlow;\n            },\n            isEvent( ) {\n                return !!this.event.id;\n            },\n            ticketsWithOffers( ) {\n                return this.tickets.filter( ticket => ticket.offers.length );\n            },\n            hasHealthCheck( ) {\n                return !!this.event.healthCheck;\n            },\n            needToShowConfirmationHealthCheck( ) {\n                return this.hasHealthCheck && ( !this.previousRoute || this.previousRoute.name !== 'cartCheckout' );\n            },\n            componentEventTicketDetailSidebar( ) {\n                return () => import( './TheEvent/EventTicketDetailSidebar' );\n            },\n            isUsingLegacyRoute() {\n                return this.$route.name === 'tmEvent';\n            },\n            filterSections: {\n                get( ) {\n                    return this.$store.state.packageOffers.filters;\n                },\n                set( value ) {\n                    this.updateFiltersSections( value );\n                }\n            }\n        },\n        watch: {\n            '$route.params.id': function( ) {\n                this.loadData( );\n            },\n            'sort.value': function ( ) {\n                this.loadTickets( true );\n            },\n            'showAddionalTicketFilters': function ( value ) {\n                if ( value && !this.$vuetify.breakpoint.mdAndUp ) {\n                    this.openTicketAdditionalFiltersModal( );\n                }\n            }\n        },\n        methods: {\n            ...mapActions( {\n                loadOne                         : `${STORE_NAME}/one`,\n                loadOneByLegacy                 : `${STORE_NAME}/oneByLegacy`,\n                loadEventTicketsAvailability    : `tickets/availability`,\n                loadEventTickets                : 'tickets/get',\n                showLoadingOverlay              : 'appState/setLoading',\n                addItemToCart                   : 'cart/addItem',\n                instantDeleteCurrentCart        : 'cart/instantDeleteCurrentCart',\n                initPackageOffers               : `${STORE_NAME_PACKAGES}/init`,\n                oneByEventId                    : `${STORE_NAME_PACKAGES}/oneByEventId`,\n                loadSectionsByEventId           : `${STORE_NAME_PACKAGES}/getSectionsByEventId`,\n                updateFiltersSections           : `${STORE_NAME_PACKAGES}/filters/update`,\n                notificationError               : 'notification/error',\n                notificationWarning             : 'notification/warning',\n            } ),\n            async loadData( ) {\n                let event, packageDetails;\n\n                this.loading = true;\n                await asyncParallel( [\n                    async ( ) => { event = !!this._destroyed || await this.loadEvent( ); },\n                    async ( ) => {\n                        this.initPackageOffers( { eventId: this.itemId } );\n                        packageDetails = !!this._destroyed || await this.oneByEventId( this.routeId );\n                    },\n                ], 2 );\n                this.loading = false;\n\n                if ( event && !this.isEventTicketsNotAvailable ) {\n                    !this.needToShowConfirmationHealthCheck || this.openHealthCheckConfirmationModal( );\n                    const isPackageDetailsAvailable = this.getAvailable( this.itemId );\n\n                    if ( isPackageDetailsAvailable ) {\n                        !!this._destroyed || await this.loadSections( );\n                        const { eventDetails } = packageDetails.data;\n                        this.isPackageFlow = true;\n\n                        if ( !this.venueDetails.mapUrl ) {\n                            Vue.set( this.venueDetails, 'mapUrl', eventDetails.venueMapWithLabelsUrl );\n                            Vue.set( this.venueDetails, 'mapWithlabelsUrl', eventDetails.venueMapWithLabelsUrl );\n                        }\n                    } else {\n                        if ( this.isEventTicketsStatusFewAvailable ) {\n                            this.filter.quantity = 1;\n                        }\n\n                        const responseTickets = !!this._destroyed || await this.loadTickets( true );\n                        if ( responseTickets.success ) {\n                            !!this._destroyed || await this.loadTicketsAvailability( );\n                        }\n                    }\n\n                    this.addFilterWatchers( );\n                } else {\n                    this.deferReloadFutureOnSaleDate( );\n                }\n            },\n            getEventData() {\n                if ( this.isUsingLegacyRoute ) {\n                    return this.loadOneByLegacy( { id: this.routeId } );\n                }\n\n                return this.loadOne( this.routeId );\n            },\n            async loadEvent( ) {\n                const responseEvent = await this.getEventData( );\n\n                if ( !responseEvent ) {\n                    this._goToNotFoundPage( );\n                    return;\n                }\n\n                const getMaxPrice = ( maxPrice ) => {\n                    const ret = parseFloat( maxPrice );\n\n                    return ret === Math.floor( ret ) ? ret : Math.floor( ret ) + 1;\n                };\n\n                this.event = responseEvent;\n                this.filter.price.min = 0;\n                this.filter.price.max = this.event.maxPrice ? getMaxPrice( this.event.maxPrice ) : 0;\n                this.filter.price.range = [ this.filter.price.min, this.filter.price.max ];\n                this.filter.price.currency = this.event.currency;\n\n                return this.event;\n            },\n            async loadTicketsAvailability( ) {\n                const response = await this.loadEventTicketsAvailability( { eventId: this.itemId } );\n\n                if ( response.success ) {\n                    if ( response.data && response.data.accessibility ) {\n                        const { accessibility } = response.data;\n\n                        this.filterOptions.current.accessibilityEnabled         = accessibility.enabled;\n                        this.filterOptions.accessibility.minQuantity            = accessibility.minLimit;\n                        this.filterOptions.accessibility.maxQuantity            = accessibility.maxLimit;\n                        this.filterOptions.accessibility.companionMinQuantity   = accessibility.companionMinLimit;\n                        this.filterOptions.accessibility.companionMaxQuantity   = accessibility.companionMaxLimit;\n                    }\n                }\n            },\n            async loadTickets( refresh = false ) {\n                const clearData = ( ) => {\n                    this.tickets = [];\n                    this.offersMap = {};\n                    this.ticketTypesMap = {};\n                    this.highlightedTicket = null;\n                    this.selectedTicket = null;\n                };\n\n                const getSearchParams = ( ) => {\n                    const { price, accessibility, quantity } = this.filter;\n                    const ret = {\n                        offset: refresh ? 0 : this.tickets.length,\n                        limit: CONFIG_TICKETS.LIMIT,\n                        sort: this.sort.value.value,\n                        quantity,\n                    };\n\n                    if ( price.range[0] > price.min || price.range[1] < price.max ) {\n                        ret.priceRange = price.range;\n                    }\n                    if ( accessibility ) {\n                        ret.accessibility = accessibility;\n                    }\n\n                    return ret;\n                };\n                const updateDataFromResponse = ( responseTickets, accessibility ) => {\n                    const updateFilterPriceRangeFromTicketOffers = ( offers ) => {\n                        const getNewMaxPriceFromOffers = ( ) => {\n                            return offers.reduce( ( maxPrice, item ) => {\n                                let basePrice = parseFloat( item.basePrice );\n\n                                basePrice = basePrice === Math.floor( basePrice ) ? basePrice : Math.floor( basePrice ) + 1;\n\n                                return basePrice > maxPrice ? basePrice : maxPrice;\n\n                            }, this.filter.price.max );\n                        };\n                        const maxPrice = getNewMaxPriceFromOffers( );\n                        if ( maxPrice > this.filter.price.max ) {\n                            if ( this.filter.price.max === this.filter.price.range[ 1 ] ) {\n                                this.removeFilterWatchers( );\n                                this.filter.price.range = [ this.filter.price.range[ 0 ], maxPrice ];\n                                this.addFilterWatchers( );\n                            }\n                            this.filter.price.max = maxPrice;\n                        }\n                    };\n                    const updateFilterQuantityRangeNoAccesibilityFromTicketOffers = ( offers ) => {\n                        const getNewMaxQuantityFromOffers = ( ) => {\n                            return offers.reduce( ( max, item ) => {\n                                let maxLimit = parseFloat( item.limitMax );\n\n                                return maxLimit > max ? maxLimit : max;\n\n                            }, this.filterOptions.noAccesability.maxQuantity );\n                        };\n\n                        const maxQuantity = getNewMaxQuantityFromOffers( );\n                        if ( maxQuantity > this.filterOptions.noAccesability.maxQuantity ) {\n                            this.filterOptions.noAccesability.maxQuantity = maxQuantity;\n                            this.filterOptions.current.maxQuantity = maxQuantity;\n                        }\n                    };\n\n                    this.ticketTypesMap = {\n                        ...this.ticketTypesMap,\n                        ...( responseTickets.ticketTypes.reduce( ( acc, item ) => {\n                            acc[ item.id ] = item;\n\n                            return acc;\n                        }, { } ) )\n                    };\n\n                    this.offersMap = {\n                        ...this.offersMap,\n                        ...( responseTickets.offers.reduce( ( acc, { pointsEarned, ...rest } ) => {\n                            acc[rest.id] = {\n                                ...rest,\n                                bonusPoints: pointsEarned || 0,\n                                ticketType: rest.id ? this.ticketTypesMap[ rest.id ] : null\n                            };\n\n                            return acc;\n                        }, { } ) )\n                    };\n\n\n\n                    this.tickets = [\n                        ...this.tickets,\n                        ...( responseTickets.tickets.items.map ( item => {\n                            return {\n                                ...item,\n                                offerIds: item.offers,\n                                offers: item.offers\n                                    .map( offerId => {\n                                        const offer = this.offersMap[ offerId ];\n\n                                        if ( !offer ) {\n                                            return;\n                                        }\n\n                                        return {\n                                            ...offer,\n                                            ticketType: this.ticketTypesMap[ offer.ticketTypeId ]\n                                        };\n                                    } )\n                                    .filter( offer => offer )\n                            };\n                        } ) )\n                    ];\n                    this.totalTickets = responseTickets.tickets.totalCount;\n\n                    updateFilterPriceRangeFromTicketOffers( responseTickets.offers );\n                    accessibility || updateFilterQuantityRangeNoAccesibilityFromTicketOffers( responseTickets.offers );\n                    if ( !this.venueDetails.mapUrl ) {\n                        Vue.set( this.venueDetails, 'mapUrl', responseTickets.eventDetails.venueMapUrl );\n                        Vue.set( this.venueDetails, 'mapWithlabelsUrl', responseTickets.eventDetails.venueMapWithLabelsUrl );\n                    }\n                };\n\n                if ( isEqual ( this.lastAppliedFilter, { ...this.filter, sort: this.sort.value.value } ) && refresh ) {\n                    return;\n                }\n\n                this.loadingTickets = true;\n                !refresh || clearData( );\n\n                this.lastAppliedFilter = cloneDeep( { ...this.filter, sort: this.sort.value.value } );\n\n                const accessibility = this.filter.accessibility;\n                const responseTickets = await this.loadEventTickets( {\n                    eventId: this.itemId,\n                    refresh,\n                    search: getSearchParams( ),\n                    userAnalytics: this.userAnalytics\n                }, );\n\n                if ( responseTickets.success ) {\n                    if ( refresh ) {\n                        clearData();\n                    }\n\n                    updateDataFromResponse ( responseTickets.data, accessibility );\n                } else {\n                    if ( responseTickets.code && responseTickets.code === apiConstants.ERROR_CODES.EVENT_PROVIDER.SYSTEM_DOWN ) {\n                        this.isEventTicketsMaintenance = true;\n                    }\n                }\n                this.loadingTickets = false;\n                this.userAnalytics = true;\n\n                return responseTickets;\n            },\n            async loadSections( ) {\n                const sectionsResponse = await this.loadSectionsByEventId( { eventId: this.itemId, guestCount: this.filterSections.quantity } );\n                this.sections = sectionsResponse.success ? sectionsResponse.data.sections : [] ;\n\n                return sectionsResponse;\n            },\n            loadTicketsDebounced: debounce( function( refresh = false ) {\n                this.loadTickets( refresh );\n            }, listConstants.DEBOUNCE_DELAY ),\n            loadSectionDebounced: debounce( function() {\n                this.loadSections( );\n            }, listConstants.DEBOUNCE_DELAY ),\n\n            getTicketDetailInfo( ticket ) {\n                return {\n                    ticket: ticket,\n                    offers: ticket.offers,\n                    event: this.event,\n                    quantity: this.filter.quantity,\n                };\n            },\n            openEventTicketDetail( ticket ) {\n                this.selectedTicket = ticket;\n            },\n            closeEventTicketDetail( ) {\n                this.selectedTicket = null;\n            },\n            setHighlightedTicket( ticket ) {\n                this.highlightedTicket = ticket;\n            },\n            setHighlightedSection( section ) {\n                this.highlightedSection = section;\n            },\n            setSelectedSection( section ) {\n                this.selectedSection = section;\n            },\n            closeSelectedSection( ) {\n                this.selectedSection = null;\n            },\n            setSelectedHotelReservation( item ) {\n                this.selectedHotelReservation = item;\n            },\n            openTicketAdditionalFiltersModal( ) {\n                this.$modal.showBottom(\n                    ( ) => import( './TheEvent/EventTicketFilterModal' ),\n                    {\n                        value: this.filter,\n                        options: this.filterOptions.current,\n                        sort : this.sort,\n                        busEventParent: this.busEvent\n                    },\n                    {\n                        scrollable: false,\n                        fullscreen: false,\n                        'hide-overlay': false\n                    },\n                    {\n                        beforeClose: ( ) => {\n                            this.showAddionalTicketFilters = false;\n                        }\n                    }\n                );\n            },\n            openHealthCheckConfirmationModal( ) {\n                const { healthCheck } = this.event;\n                this.$modal.show(\n                    HealthCheckConfirmationModal,\n                    {\n                        healthCheck\n                    },\n                    {\n                        'no-click-animation': true,\n                        scrollable: true,\n                        fullscreen: false,\n                        persistent: true,\n                        'hide-overlay': false,\n                        'max-width': 858,\n                        'content-class': 'gst-v-dialog',\n                    }\n                );\n            },\n            openEventPackageOffersNotAvailableModal( ) {\n                this.$modal.show(\n                    ( ) => import( './TheEvent/EventPackageOffersNotAvailableModal' ),\n                    { },\n                    {\n                        'max-width': 858\n                    },\n                    {\n                        beforeClose: ( ) => {\n                            this.closeSelectedSection( );\n                            this.closeEventTicketDetail( );\n                            this.loadSections( );\n                        }\n                    }\n                );\n            },\n            updateFilter( filter ) {\n                this.filter = filter;\n            },\n            resetFilter( ) {\n                this.filter.quantity = CONFIG_TICKETS.FILTER_DEFAULT.QUANTITY;\n                this.filter.price.range = [ this.filter.price.min, this.filter.price.max ];\n                this.filter.accessibility = CONFIG_TICKETS.FILTER_DEFAULT.ACCESSIBILITY;\n            },\n            removeFilterWatchers( ) {\n                !this._watchFilterQuantity || this._watchFilterQuantity( );\n                !this._watchFilterPriceRange ||  this._watchFilterPriceRange( );\n                !this._watchFilterAccessibility || this._watchFilterAccessibility( );\n            },\n            updateSort( sort ) {\n                this.sort = sort;\n            },\n            resetSort( ) {\n                this.sort.value = this.defaultSort;\n            },\n            addFilterWatchers( ) {\n                const addForQuantity = ( ) => {\n                    !this._watchFilterQuantity || this._watchFilterQuantity( );\n                    this._watchFilterQuantity = this.$watch( 'filter.quantity', ( ) => {\n                        this.selectedHotelReservation = null;\n                        this.loadTicketsDebounced( true );\n                    } );\n                };\n\n                const sectionsAddForQuantity = ( ) => {\n                    !this._watchFilterQuantity || this._watchFilterQuantity( );\n                    this._watchFilterQuantity = this.$watch( 'filterSections.quantity', ( ) => {\n                        this.loadSectionDebounced(  );\n                    } );\n                };\n\n                const addForPriceRange = ( ) => {\n                    !this._watchFilterPriceRange ||  this._watchFilterPriceRange( );\n                    this._watchFilterPriceRange = this.$watch( 'filter.price.range', ( newValue, oldValue ) => {\n                        if ( newValue[ 0 ] !== oldValue[ 0 ] || newValue[ 1 ] !== oldValue[ 1 ] ) {\n                            this.loadTicketsDebounced( true );\n                        }\n                    } );\n                };\n                const addForAccessibility = ( ) => {\n                    !this._watchFilterAccessibility || this._watchFilterAccessibility( );\n                    this._watchFilterAccessibility = this.$watch( 'filter.accessibility', value => {\n                        const { current, accessibility, noAccesability } = this.filterOptions;\n                        const { quantity } = this.filter;\n\n                        if ( value ) {\n                            this.filterOptions.current.minQuantity = accessibility.minQuantity;\n                            this.filterOptions.current.maxQuantity = accessibility.maxQuantity;\n                        } else {\n                            this.filterOptions.current.minQuantity = noAccesability.minQuantity;\n                            this.filterOptions.current.maxQuantity = noAccesability.maxQuantity;\n                        }\n                        if ( quantity >= current.minQuantity && quantity <=current.maxQuantity ) {\n                            this.loadTicketsDebounced( true );\n                        } else {\n                            this.filter.quantity = CONFIG_TICKETS.FILTER_DEFAULT.QUANTITY <= current.maxQuantity ? Math.max( current.minQuantity, CONFIG_TICKETS.FILTER_DEFAULT.QUANTITY ) : current.minQuantity;\n                        }\n                    } );\n                };\n\n                if( this.isPackageFlow ) {\n                    sectionsAddForQuantity();\n                    return;\n                }\n\n                addForQuantity( );\n                addForPriceRange( );\n                addForAccessibility( );\n            },\n            deferReloadFutureOnSaleDate( ) {\n                const now = new Date( );\n                const { onSaleStartDateTimeAt } = this.event;\n\n                if ( onSaleStartDateTimeAt && dateUtilsIsAfter( onSaleStartDateTimeAt, now ) ) {\n                    const delay = Math.min( ( dateUtilsDifferenceInSeconds( onSaleStartDateTimeAt, now ) * 1000 ), ( Math.pow( 2, 31 ) - 1 ) );\n\n                    this.deferReload = setTimeout(\n                        ( ) => {\n                            this.loadData( );\n                        },\n                        delay\n                    );\n                }\n            },\n            async checkout( payload ) {\n                const callbackAddItemToCartErrorFn = ( response ) => {\n                    const { code } = response;\n\n                    const i18Prefix = '_common:messageServerErrorCodesFromContext.reserve';\n                    switch ( code ) {\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.PRODUCT_ERROR:\n                            this.notificationWarning( {\n                                title: this.$t( `${i18Prefix}.${code}.title` ),\n                                content: this.$t( `${i18Prefix}.${code}.detail` ),\n                                autoDismiss: false\n                            } );\n                            break;\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.INVALID_REQUEST:\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.INVALID_DATA:\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.SYSTEM_ERROR:\n                            this.notificationError( {\n                                title: this.$t( `${i18Prefix}.hotelProviderDefault.title` ),\n                                content: this.$t( `${i18Prefix}.hotelProviderDefault.detail` )\n                            } );\n                            break;\n                        case apiConstants.ERROR_CODES.PACKAGE_OFFERS_NOT_AVAILABLE:\n                            this.openEventPackageOffersNotAvailableModal( );\n                            break;\n                        default:\n                            this.notificationError( notificationUtilsGetFromApiResponse( response ) );\n                            this.closeSelectedSection( );\n                            this.closeEventTicketDetail( );\n                            break;\n                    }\n                };\n\n\n                if ( this.selectedHotelReservation ) {\n                    this.$router.push( { name: `${this.$route.name}.reservation`, params: { payload, callbackAddItemToCartErrorFn } } );\n                } else {\n                    this.$modal.show(\n                        ( ) => import( './TheEvent/EventCheckoutConfirmationModal' ),\n                        {\n                            onConfirmFn: ( ) => {\n                                this.$router.push( { name: `${this.$route.name}.reservation`, params: { payload, callbackAddItemToCartErrorFn } } );\n                            }\n                        },\n                        {\n                            'max-width': 800,\n                        }\n                    );\n                    return;\n                }\n\n            },\n            onBannerClickBackDo( ) {\n                const { selectedTicket, selectedSection } = this;\n\n                if ( selectedTicket ) {\n                    return this.closeEventTicketDetail( );\n                }\n                if ( selectedSection ) {\n                    return this.closeSelectedSection( );\n                } else {\n                    tenantRedirectToHome( );\n                }\n            }\n        },\n        async mounted( ) {\n            await this.loadData( );\n        },\n        created( ) {\n            this.busEvent.$on( 'reset-filter', this.resetFilter );\n            this.busEvent.$on( 'update-filter', this.updateFilter );\n            this.busEvent.$on( 'checkout', this.checkout );\n            this.busEvent.$on( 'update-sort', this.updateSort );\n            this.busEvent.$on( 'reset-sort', this.resetSort );\n            this.busEvent.$on( 'set-hotel-reservation', this.setSelectedHotelReservation );\n        },\n        destroyed( ) {\n            this.busEvent.$off( 'reset-filter' );\n            this.busEvent.$off( 'update-filter' );\n            this.busEvent.$off( 'checkout' );\n            this.busEvent.$off( 'update-sort' );\n            this.busEvent.$off( 'reset-sort' );\n            this.busEvent.$off( 'set-hotel-reservation' );\n\n            ApiCancelService.clear( 'events.one' );\n            ApiCancelService.clear( 'packageOffers.oneByEventId' );\n            ApiCancelService.clear( 'packageOffers.getSectionsByEventId' );\n            ApiCancelService.clear( 'tickets.get' );\n            ApiCancelService.clear( 'tickets.availability' );\n\n            this._destroyed = true;\n        },\n        beforeRouteEnter( to, from, next ) {\n            next( ( cmp ) => {\n                cmp.previousRoute = from;\n            } );\n        },\n        beforeRouteUpdate( to, from, next ) {\n            this.previousRoute = from;\n            next( );\n        },\n    };\n</script>\n\n<style scoped lang=\"scss\">\n    @import \"@scssVariables\";\n    @import \"@scssMixins\";\n\n    .gst-event {\n        height: calc( 100vh - 50px );\n    }\n\n    .gst-event-mobile {\n        height: 100vh;\n    }\n\n    .gst-event__filter {\n        padding-top: 12px;\n        z-index: 1;\n\n        @include mobile-only {\n            padding-top: 16px;\n        }\n    }\n</style>\n"]}]}