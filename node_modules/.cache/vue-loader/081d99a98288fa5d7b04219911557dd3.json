{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/lifestyle-ui/src/core/shared/components/input/BaseFormSelect.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/shared/components/input/BaseFormSelect.vue","mtime":1645805363956},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIkBzY3NzVmFyaWFibGVzIjsKQGltcG9ydCAiQHNjc3NNaXhpbnMiOwoKLmdzdC1zZWxlY3QgewogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgYm9yZGVyOiAxcHggc29saWQgdGhlbWUtY29sb3IoICdwcmltYXJ5JyApOwoKICAgIC5nc3Qtc2VsZWN0X19pbnB1dCB7CiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBjb2xvcjogdGhlbWUtY29sb3IoICdwcmltYXJ5JyApOwogICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICBvdXRsaW5lOiBub25lOwogICAgfQoKICAgIC5nc3Qtc2VsZWN0X19pY29uIHsKICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgIHRvcDogMDsKICAgICAgICByaWdodDogOHB4OwogICAgICAgIGJvdHRvbTogMDsKICAgICAgICBtYXJnaW46IGF1dG87CiAgICAgICAgZmlsbDogdGhlbWUtY29sb3IoICdwcmltYXJ5JyApOwogICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOwogICAgfQp9Cgo="},{"version":3,"sources":["BaseFormSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseFormSelect.vue","sourceRoot":"src/core/shared/components/input","sourcesContent":["<template>\n    <div class=\"gst-select\">\n        <BaseSelect\n            :value=\"value\"\n            v-bind=\"{ ...$attrs, ...$props }\"\n            class=\"gst-select__input\"\n            @input=\"onInputDo\" />\n        <slot name=\"append\">\n            <ChevronDownIcon class=\"gst-select__icon\" />\n        </slot>\n    </div>\n</template>\n\n<script>\n    import ChevronDownIcon from '@core/shared/assets/icons/chevron_down.svg';\n    import BaseSelect from './BaseSelect';\n\n    export default {\n        name: 'BaseFormSelect',\n        components: {\n            BaseSelect,\n            ChevronDownIcon\n        },\n        inheritAttrs: false,\n        props: {\n            clearable: {\n                type: Boolean,\n                default: false,\n            },\n            displayProp: {\n                type: String,\n                default: 'name'\n            },\n            disabled: {\n                type: Boolean,\n                default: false,\n            },\n            loading: {\n                type: Boolean,\n                default: false\n            },\n            i18nPrefix: {\n                type: String,\n                default: ''\n            },\n            invalidateOnChangeOptions: {\n                type: Boolean,\n                default: true\n            },\n            options: {\n                type: Array,\n                required: true\n            },\n            optionsArrayObj: {\n                type: Boolean,\n                default: true\n            },\n            renderer: {\n                type: Function,\n                default: null,\n            },\n            valueProp: {\n                type: String,\n                default: 'id'\n            },\n            value: {\n                type: [ Object, String, Number ],\n                default: null\n            },\n        },\n        methods: {\n            onInputDo ( value ) {\n                this.$emit( 'input', value );\n            }\n        }\n    };\n</script>\n\n<style lang=\"scss\">\n    @import \"@scssVariables\";\n    @import \"@scssMixins\";\n\n    .gst-select {\n        position: relative;\n        border: 1px solid theme-color( 'primary' );\n\n        .gst-select__input {\n            position: relative;\n            height: 100%;\n            width: 100%;\n            color: theme-color( 'primary' );\n            cursor: pointer;\n            outline: none;\n        }\n\n        .gst-select__icon {\n            display: inline-block;\n            position: absolute;\n            top: 0;\n            right: 8px;\n            bottom: 0;\n            margin: auto;\n            fill: theme-color( 'primary' );\n            pointer-events: none;\n        }\n    }\n\n</style>\n"]}]}