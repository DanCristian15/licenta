{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/shared/components/search/SearchCity.vue?vue&type=style&index=0&id=1061edb4&lang=scss&scoped=true&","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/shared/components/search/SearchCity.vue","mtime":1645805363970},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAiQHNjc3NWYXJpYWJsZXMiOwpAaW1wb3J0ICJAc2Nzc01peGlucyI7CgouZ3N0LXNlYXJjaC1jaXR5LW1lbnUgewogICAgbWFyZ2luLXRvcDogOHB4OwogICAgYmFja2dyb3VuZC1jb2xvcjogdGhlbWUtY29sb3IoICd3aGl0ZScgKTsKICAgIGJvcmRlci1yYWRpdXM6IGJvcmRlci1yYWRpdXMoICdtJyApICFpbXBvcnRhbnQ7Cn0KCi5nc3Qtc2VhcmNoLWNpdHktbWVudV9fbG9hZGluZyB7CiAgICBwYWRkaW5nOiAxNnB4Owp9CgouZ3N0LXNlYXJjaC1jaXR5LW1lbnVfX2xpc3QgewogICAgcGFkZGluZy10b3A6IDA7CiAgICBwYWRkaW5nLWJvdHRvbTogMDsKICAgIG1pbi13aWR0aDogMjgwcHg7CgogICAgLnYtbGlzdC1pdGVtX190aXRsZSB7CiAgICAgICAgZm9udC1zaXplOiAkYmFzZS1mb250LXNpemUgIWltcG9ydGFudDsKICAgIH0KCiAgICAudi1saXN0LWl0ZW1fX2ljb24gewogICAgICAgIG1hcmdpbi1yaWdodDogMTZweDsKICAgIH0KfQoKLmdzdC1zZWFyY2gtY2l0eS1tZW51X19pdGVtLWljb24gewogICAgLmdzdC1zdmctaWNvbiB7CiAgICAgICAgZmlsbDogdGhlbWUtY29sb3IoICdwcmltYXJ5JyApOwogICAgfQp9Cg=="},{"version":3,"sources":["SearchCity.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAySA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"SearchCity.vue","sourceRoot":"src/core/shared/components/search","sourcesContent":["<template>\n    <v-menu\n        v-model=\"isMenuOpen\"\n        :position-x=\"menuTargetPositionX\"\n        :position-y=\"menuTargetPositionY\"\n        :close-on-content-click=\"false\"\n        bottom\n        absolute\n        allow-overflow\n        content-class=\"gst-search-city-menu\">\n        <template v-slot:activator=\"{ on }\">\n            <v-text-field\n                ref=\"inputSearch\"\n                :value=\"isFocused ? searchValue : ''\"\n                :placeholder=\"!isFocused ? selectValueLabel : ''\"\n                class=\"mx-1 pt-0 mr-3 gst-search-input gst-search-city-menu__input-search\"\n                v-bind=\"inputSearchAttrs\"\n                autocomplete=\"off\"\n                data-hj-allow\n                @click=\"toggleMenu\"\n                @input=\"onInputInputSearch\"\n                @blur=\"onBlurInputSearch\"\n                @focus=\"onFocusInputSearch\"\n                @keydown.tab=\"onTabKeyDo\">\n                <template slot=\"prepend-inner\" class=\"text-primary\">\n                    <IconLocation\n                        class=\"gst-search-icon-svg\"\n                        :class=\"{\n                            'gst-search-icon-svg-focused': isFocused\n                        }\"\n                        @click=\"toggleMenu\" />\n                </template>\n                <template v-if=\"!isFocused\" slot=\"label\">\n                    <!-- eslint-disable-next-line vue/no-v-html -->\n                    <span class=\"gst-search-label\" v-html=\"$options.filters.cityHTML( value, { country: true } )\"></span>\n                </template>\n                <template slot=\"append\" class=\"text-primary\">\n                    <data-loading v-if=\"loadingCurrentLocation\" :width=\"2\" :size=\"20\" class=\"d-flex align-self-center justify-center\" />\n                    <IconCancel v-if=\"searchValue && clearable\" class=\"gst-search-icon-cancel-svg u-mouse-pointer\" @click=\"searchValue = ''\" />\n                </template>\n            </v-text-field>\n            <v-btn class=\"d-none\" v-on=\"on\" />\n        </template>\n        <v-list class=\"gst-search-city-menu__list\">\n            <template v-if=\"canFindMyLocation\">\n                <v-list-item key=\"gps\" @click=\"findMyLocation\">\n                    <v-list-item-icon>\n                        <IconGPS class=\"gst-search-city-menu__item-icon\" />\n                    </v-list-item-icon>\n                    <v-list-item-title>\n                        {{ $t('_common:terms.useMyCurrentLocation') }}\n                    </v-list-item-title>\n                </v-list-item>\n                <v-divider />\n            </template>\n            <template v-if=\"showRecentCities\">\n                <SectionTitleSmall class=\"px-5 pt-4\">\n                    {{ $t('labels.recent') }}\n                </SectionTitleSmall>\n                <SearchResultNoData v-if=\"!historyCities.length\">\n                    {{ $t('labels.noRecent') }}\n                </SearchResultNoData>\n                <SearchCityList class=\"gst-search-city-menu__list\" :items=\"historyCities\" @select=\"selectCity\">\n                    <template v-slot:icon>\n                        <v-list-item-icon>\n                            <IconHistory class=\"gst-search-city-menu__item-icon\" />\n                        </v-list-item-icon>\n                    </template>\n                </SearchCityList>\n            </template>\n            <template v-if=\"showFilteredCities\">\n                <DataLoading v-if=\"!!loading\" :width=\"2\" class=\"gst-search-city-menu__loading\" />\n                <template v-else>\n                    <SectionTitleSmall class=\"px-5 pt-4\">\n                        {{ $t('labels.results') }}\n                    </SectionTitleSmall>\n                    <SearchResultNoData v-if=\"!cities.length\">\n                        {{ $t('labels.noResults') }}\n                    </SearchResultNoData>\n                    <SearchCityList :items=\"cities\" :highlight=\"searchValue\" @select=\"selectCity\">\n                        <template v-slot:icon>\n                            <v-list-item-icon>\n                                <IconLocation class=\"gst-search-city-menu__item-icon\" />\n                            </v-list-item-icon>\n                        </template>\n                    </SearchCityList>\n                </template>\n            </template>\n        </v-list>\n    </v-menu>\n</template>\n\n<script>\n    import { mapState, mapActions } from 'vuex';\n    import throttle from 'lodash/throttle';\n    import debounce from 'lodash/debounce';\n    import {\n        hasLocation as cityObjectUtilsHasLocation,\n        hasCurrentLocation as cityObjectUtilsHasCurrentLocation\n    } from '@utils/cityObjectUtils';\n    import IconLocation from '@core/shared/assets/icons/location.svg';\n    import IconHistory from '@core/shared/assets/icons/history.svg';\n    import IconGPS from '@core/shared/assets/icons/gps.svg';\n    import IconCancel from '@core/shared/assets/icons/cancel.svg';\n    import DataLoading from '@core/shared/components/loading/DataLoading.vue';\n    import SearchResultNoData from './common/SearchResultNoData.vue';\n    import SectionTitleSmall from '../misc/SectionTitleSmall.vue';\n    import SearchCityList from './SearchCityList.vue';\n\n    const STORE_NAME = 'cities';\n    const CONFIG = {\n        MAX_RESULTS: 3\n    };\n\n    export default {\n        name: 'SeachCity',\n        components: {\n            IconCancel,\n            IconLocation,\n            IconHistory,\n            IconGPS,\n            DataLoading,\n            SectionTitleSmall,\n            SearchResultNoData,\n            SearchCityList\n        },\n        i18nOptions: {\n            namespaces: 'shared',\n            keyPrefix: 'components.search.searchCity'\n        },\n        props: {\n            value: {\n                type: Object,\n                default: ( ) => { return { name: '' }; }\n            },\n            inputSearchAttrs: {\n                type: Object,\n                default: () => {\n                    return {\n                        'single-line': true,\n                        solo: true,\n                        'hide-details': true,\n                        flat: true\n                    };\n                }\n            },\n            clearable: {\n                type: Boolean,\n                default: true\n            }\n        },\n        data( ) {\n            return {\n                searchValue: '',\n                isSearching: false,\n                isFocused: false,\n                isMenuOpen: false,\n                menuTargetPositionX: 0,\n                menuTargetPositionY: 0,\n                loadingCurrentLocation: false,\n                cities: [],\n                loading: 0\n            };\n        },\n        computed: {\n            ...mapState( {\n                historyCities: state => state.user.browsingHistory.cities\n            } ),\n            showRecentCities( ) {\n                return !this.isSearching;\n            },\n            showFilteredCities( ) {\n                return this.isSearching;\n            },\n            canFindMyLocation( ) {\n                return !!navigator.geolocation;\n            },\n            selectValueLabel( ) {\n                const { value } = this;\n                const cityLabel = this.$options.filters.city( value, { country: true } );\n\n                if ( cityLabel ) {\n                    return cityLabel;\n                }\n\n                if ( cityObjectUtilsHasLocation ( value ) ) {\n                    if ( cityObjectUtilsHasCurrentLocation( value ) ) {\n                        return this.$t( '_common:terms.myCurrentLocation' );\n                    } else {\n                        return this.$t( '_common:terms.location' );\n                    }\n                }\n                return this.$t( 'placeholder' );\n            }\n        },\n        watch: {\n            'searchValue': function ( newValue ) {\n                if ( !newValue ) {\n                    this.$emit( 'input', { name: '' } );\n                }\n            },\n            'value': function ( newValue ) {\n                this.searchValue = newValue.name || '';\n                this.isSearching = false;\n                !this.unwatchSearchValPropAfterValueChange || this.unwatchSearchValPropAfterValueChange( );\n                this.unwatchSearchValPropAfterValueChange = this.$watch( 'searchValue', ( newVal ) => {\n                    if( newVal ) {\n                        this.isSearching = true;\n                        this.unwatchSearchValPropAfterValueChange( );\n                    }\n                } );\n            },\n        },\n        methods: {\n            ...mapActions( {\n                searchCities: `${STORE_NAME}/searchList`,\n                getCurrentLocation: 'user/location/getCurrentLocation',\n                notificationError: 'notification/error',\n            } ),\n            async findMyLocation( ) {\n                this.loadingCurrentLocation = true;\n                const location = await this.getCurrentLocation( { showMessage: true, refresh: true } );\n                if ( location && location.position ) {\n                    this.selectCity( {\n                        ...location.city,\n                        location: {\n                            current: true,\n                            ...location.position\n                        }\n                    } );\n                }\n                this.loadingCurrentLocation = false;\n            },\n            selectCity( city ) {\n                this.isSearching = false;\n                this.$emit( 'input', city );\n                this.isMenuOpen = false;\n            },\n            onInputInputSearch( value ) {\n                this.searchValue = value;\n                this.openMenu( );\n            },\n            onBlurInputSearch( ) {\n                setTimeout( ( ) => {\n                    this.searchValue = this.value.name || '';\n                    this.isFocused = false;\n                    this.closeMenu( );\n                }, 200 );\n            },\n            onFocusInputSearch( ) {\n                this.isFocused = true;\n            },\n            toggleMenu( ) {\n                this.isMenuOpen ? this.closeMenu( ) : this.openMenu( );\n            },\n            closeMenu( ) {\n                this.isMenuOpen = false;\n            },\n            openMenu( ) {\n                const menuTargetPosition = this.$refs.inputSearch.$el.getBoundingClientRect( );\n\n                this.menuTargetPositionX = menuTargetPosition.x;\n                this.menuTargetPositionY = menuTargetPosition.y + menuTargetPosition.height;\n                this.isMenuOpen = true;\n            },\n            loadDataDebouced: debounce( async function ( ) {\n                this.loading = this.loading + 1;\n                this.cities = await this.searchCities( { refresh: true, search: { keyword: this.searchValue, limit: CONFIG.MAX_RESULTS, offset: 0 } } ) || [ ];\n                this.loading = this.loading - 1;\n            }, 500 ),\n            onTabKeyDo() {\n                this.$emit( 'tab-keydown' );\n            },\n        },\n        created( ) {\n            this.searchValue = this.value.name;\n            this.$watch( 'searchValue', ( newVal ) => {\n                if( newVal && newVal !== this.value.name ) {\n                    this.isSearching = true;\n                    this.loadDataDebouced( );\n                }\n            } );\n        },\n        mounted( ) {\n            this.throttleMenuClose = throttle( ( ) => {\n                this.isMenuOpen = false;\n            }, 20 );\n\n            window.addEventListener( 'resize', this.throttleMenuClose );\n        },\n        destroyed( ) {\n            window.removeEventListener( 'resize', this.throttleMenuClose );\n        }\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"@scssVariables\";\n    @import \"@scssMixins\";\n\n    .gst-search-city-menu {\n        margin-top: 8px;\n        background-color: theme-color( 'white' );\n        border-radius: border-radius( 'm' ) !important;\n    }\n\n    .gst-search-city-menu__loading {\n        padding: 16px;\n    }\n\n    .gst-search-city-menu__list {\n        padding-top: 0;\n        padding-bottom: 0;\n        min-width: 280px;\n\n        .v-list-item__title {\n            font-size: $base-font-size !important;\n        }\n\n        .v-list-item__icon {\n            margin-right: 16px;\n        }\n    }\n\n    .gst-search-city-menu__item-icon {\n        .gst-svg-icon {\n            fill: theme-color( 'primary' );\n        }\n    }\n</style>\n"]}]}