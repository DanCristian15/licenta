{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/lifestyle-ui/src/tenants/ticketmaster/app/views/cart/TheCheckout.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/tenants/ticketmaster/app/views/cart/TheCheckout.vue","mtime":1645805365979},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAiQHNjc3NNaXhpbnMiOwpAaW1wb3J0ICJAc2Nzc1ZhcmlhYmxlcyI7CgpAaW5jbHVkZSBtb2JpbGUtb25seSB7CiAgICAuZ3N0LWNoZWNrb3V0IHsKICAgICAgICAuZ3N0LWNoZWNrb3V0X19jYXJ0LWluZm8gewogICAgICAgICAgICBwYWRkaW5nOiB0aGVtZS1zcGFjaW5nKCAwLCA4LCAxLCA4ICkgIWltcG9ydGFudDsKICAgICAgICAgICAgbWFyZ2luLXRvcDogdGhlbWUtc3BhY2luZyggbjQgKSAhaW1wb3J0YW50OwogICAgICAgIH0KICAgIH0KfQo="},{"version":3,"sources":["TheCheckout.vue"],"names":[],"mappingsmnBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TheCheckout.vue","sourceRoot":"src/tenants/ticketmaster/app/views/cart","sourcesContent":["<template>\n    <div class=\"gst-checkout\">\n        <HeaderWithCountDown :date-time-till=\"cart.expireAt\" @click-logo=\"leave( true )\" @finish=\"expire()\" />\n        <div v-if=\"cart && cart.id && !loading\" class=\"row\">\n            <div class=\"col col-12 col-md-8 no-gutters py-0 px-4 pl-md--6 px-8 py-8\">\n                <PaymentProviderDownContainer\n                    v-if=\"showPaymentProviderDownContainer\"\n                    @back=\"leave\"\n                    @reload=\"onReloadPaymentProviderDo\" />\n                <div v-else>\n                    <template v-if=\"!$vuetify.breakpoint.mdAndUp\">\n                        <EventTicketContainer\n                            v-bind=\"propsEventTicket\" />\n                        <HotelReservationContainer v-if=\"!hasTicketsOnly\" v-bind=\"propsHotelReservation\" class=\"mt-4\" />\n                    </template>\n                    <DetailFieldset\n                        v-if=\"!hasTicketsOnly\"\n                        :customer-model=\"customerModel\"\n                        :validation=\"$v\"\n                        :extract-validations-messages-fn=\"_extractValidationsMessages\" />\n                    <PaymentFieldsetTicketsOnly\n                        v-if=\"hasTicketsOnly\"\n                        :customer-model=\"customerModel\"\n                        :payment-client-model=\"paymentClientModel\"\n                        :validation=\"$v\"\n                        :extract-validations-messages-fn=\"_extractValidationsMessages\"\n                        :use-payment-client=\"usePaymentClient\"\n                        @instancePaymentClientComputed=\"value => instancePaymentClient = value\"\n                        @updatePaymentFieldsValidity=\"value => validProviderPaymentFields = value\" />\n                    <PaymentFieldsetHotelAndTickets\n                        v-else\n                        :customer-model=\"customerModel\"\n                        :payment-model=\"paymentModel\"\n                        :payment-client-model=\"paymentClientModel\"\n                        :use-payment-client=\"usePaymentClient\"\n                        :validation=\"$v\"\n                        :extract-validations-messages-fn=\"_extractValidationsMessages\"\n                        @instancePaymentClientComputed=\"value => instancePaymentClient = value\"\n                        @updatePaymentFieldsValidity=\"value => validProviderPaymentFields = value\" />\n                    <ShipmentFieldset\n                        :has-tickets-only=\"hasTicketsOnly\"\n                        :shipping-model=\"shippingModel\"\n                        :validation=\"$v\"\n                        :extract-validations-messages-fn=\"_extractValidationsMessages\" />\n                </div>\n            </div>\n            <div class=\"gst-checkout__cart-info col col-12 col-md-4 py-0 px-4 pr-md-8 py-8\">\n                <template v-if=\"!$vuetify.breakpoint.mdAndUp\">\n                    <EventHealthCheckContainer v-if=\"eventHealthCheck\" :health-check=\"eventHealthCheck\" />\n                </template>\n                <Action\n                    :agree-model=\"agreeModel\"\n                    :order=\"order\"\n                    :cart-collections=\"cartCollections\"\n                    :shipping-model=\"shippingModel\"\n                    :validation=\"$v\"\n                    :extract-validations-messages-fn=\"_extractValidationsMessages\"\n                    :instance-payment-client=\"instancePaymentClient\"\n                    :use-payment-client=\"usePaymentClient\"\n                    :total-price=\"totalPrice\"\n                    :event-health-check=\"eventHealthCheck\"\n                    :has-tickets-only=\"hasTicketsOnly\"\n                    :is-payment-provider-down=\"isPaymentProviderDown\"\n                    :is-package-offer=\"isPackageOffer\"\n                    class=\"mb-2\"\n                    @cancel=\"leave\"\n                    @submit=\"save\" />\n                <template v-if=\"$vuetify.breakpoint.mdAndUp\">\n                    <EventTicketContainer class=\"mt-4\" v-bind=\"propsEventTicket\" />\n                    <HotelReservationContainer v-if=\"!hasTicketsOnly\" v-bind=\"propsHotelReservation\" class=\"mt-4\" />\n                    <EventHealthCheckContainer v-if=\"hasTicketsOnly && eventHealthCheck\" :health-check=\"eventHealthCheck\" />\n                </template>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import Vue from 'vue';\n    import { mapGetters, mapState, mapActions } from 'vuex';\n    import { redirectToHome  } from '@tenant/app/utils/tenantUrlslUtils';\n    import ticketConstants from '@core/utils/constants/ticket';\n    import productsConstants from '@core/utils/constants/products';\n    import apiConstants from '@core/utils/constants/api';\n    import { getFromApiResponse as notificationUtilsGetFromApiResponse } from '@core/utils/notificationUtils';\n    import apiPaymentClient from '@core/api/apiPaymentClient';\n    import apiServicePayments from '@core/api/apiServicePayments';\n    import statesStoreModule from '@core/store/modules/states';\n    import countriesStoreModule from '@core/store/modules/countries';\n    import LogService from '@/core/services/LogService.js';\n    import WarnBeforeLeave from '@core/mixins/WarnBeforeLeave';\n    import zIndex from '@scss/mixins/_z-index-export-js.scss';\n    import DynamicStoreModule from '@/core/mixins/DynamicStoreModule';\n    import { getCardProvider } from '@/tenants/ticketmaster/app/utils/cardUtils';\n    import FormMixin from './TheCheckoutFormMixin.js';\n    import HeaderWithCountDown from './TheCheckout/HeaderWithCountDown.vue';\n    import Action from './TheCheckout/Action.vue';\n    import DetailFieldset from './TheCheckout/Fieldsets/DetailFieldset.vue';\n    import PaymentFieldsetHotelAndTickets from './TheCheckout/Fieldsets/PaymentFieldsetHotelAndTickets.vue';\n    import PaymentFieldsetTicketsOnly from './TheCheckout/Fieldsets/PaymentFieldsetTicketsOnly.vue';\n    import ShipmentFieldset from './TheCheckout/Fieldsets/ShipmentFieldset.vue';\n    import EventHealthCheckContainer from './TheCheckout/Containers/EventHealthCheckContainer.vue';\n    import EventTicketContainer from './TheCheckout/Containers/EventTicketContainer.vue';\n    import HotelReservationContainer from './TheCheckout/Containers/HotelReservationContainer.vue';\n    import PaymentProviderDownContainer from './TheCheckout/Containers/PaymentProviderDownContainer.vue';\n\n    const STORE_NAME = 'cart';\n    const STORE_COUNTRIES = 'countries';\n\n    export default {\n        name: 'TheCheckout',\n        components: {\n            HeaderWithCountDown,\n            Action,\n            DetailFieldset,\n            PaymentFieldsetHotelAndTickets,\n            PaymentFieldsetTicketsOnly,\n            ShipmentFieldset,\n            EventTicketContainer,\n            HotelReservationContainer,\n            EventHealthCheckContainer,\n            PaymentProviderDownContainer\n        },\n        i18nOptions: {\n            namespaces: 'main',\n            keyPrefix: 'views.cart.theCheckout'\n        },\n        testIdOptions: {\n            keyPrefix: 'checkout'\n        },\n        mixins:[\n            FormMixin,\n            WarnBeforeLeave,\n            DynamicStoreModule\n        ],\n        data( ) {\n            return {\n                loading: true,\n                currentStep: 0,\n                busEvents: new Vue( ),\n                busEventProgressStep: new Vue( ),\n                paymentClientModel: {\n                    token: null,\n                    providerId: null,\n                    errorContacting: false,\n                },\n                /**\n                 * checkoutResponse is the order object\n                 */\n                checkoutResponse: false,\n                testEventId: 106710000,\n                hasTicketsOnly: true,\n                instancePaymentClient: {},\n                cardInfo: {},\n                validProviderPaymentFields: false,\n            };\n        },\n        computed: {\n            ...mapGetters( {\n                isCartExpired: `${STORE_NAME}/isExpired`,\n                isCartSubmitted: `${STORE_NAME}/isSubmitted`,\n                userIsAuth: 'user/profile/isAuth',\n                userBalance: 'user/profile/balance'\n            } ),\n            ...mapState( {\n                cart:   state => state[STORE_NAME].current,\n                countries: state => state[STORE_COUNTRIES].list\n            } ),\n            routeCartId( ) {\n                return this.$route.params.cartId;\n            },\n            cartCollections( ) {\n                return this.cart.collections;\n            },\n            tickets( ) {\n                return this.cartCollections\n                    .filter( item => item.productTypeId === productsConstants.TYPES.TICKET );\n            },\n            ticket( ) {\n                return this.tickets[ 0 ];\n            },\n            ticketItem( ) {\n                return this.ticket.items[0];\n            },\n            order( ) {\n                return this.cart.order;\n            },\n            currency( ) {\n                return this.order.currency;\n            },\n            hasResaleItems( ) {\n                return !!this.tickets.find( item => item.selection === ticketConstants.TYPES.RESALE );\n            },\n            hotelReservation( ) {\n                return this.cartCollections\n                    .find( item => item.productTypeId === productsConstants.TYPES.HOTEL_RESERVATION );\n            },\n            eventHealthCheck( ) {\n                return this.ticket.info.healthCheck;\n            },\n            propsEventTicket( ) {\n                const { ticket, ticketItem, cart } = this;\n                const { info } = ticket;\n\n                return {\n                    eventName: info.name,\n                    eventAddress: {\n                        venueName: info.venueName,\n                        city: info.venueCity,\n                        stateCode: info.venueStateCode,\n                        street: info.venueStreet,\n                        countryCode: info.venueCountryCode\n                    },\n                    eventStartDate: info.startDateTime,\n                    eventEndDate: info.endDateTime,\n                    bannerImage: info.imageUrl,\n                    ticketItem: ticketItem,\n                    venueSeatMapUrl: cart.venueSeatMapUrl\n                };\n            },\n            propsHotelReservation( ) {\n                const { hotelReservation } = this;\n\n                return {\n                    accommodation: hotelReservation.accommodation,\n                    hotel: {\n                        name: hotelReservation.hotel.name,\n                        image: hotelReservation.hotel.image,\n                        address: hotelReservation.hotel.address,\n                        policy: hotelReservation.hotel.policy,\n                        roomRate: hotelReservation.totalPrice\n                    },\n                    room: {\n                        name: hotelReservation.hotel.room.name,\n                        mealPlan: hotelReservation.hotel.room.rate.mealPlan,\n                        cancellationPolicies: hotelReservation.hotel.room.rate.cancellationPolicies\n                    },\n                    currency: this.order.currency,\n                    isPackageOffer: this.isPackageOffer\n                };\n            },\n            totalPrice( ) {\n                const { shippingModel, order } = this;\n                const delivery = shippingModel.options.find( value => value.id === shippingModel.optionId );\n                const totalWithoutDelivery = order.totalPrice - order.totalDelivery;\n\n                if ( !delivery ) {\n                    return totalWithoutDelivery;\n                }\n                return totalWithoutDelivery + delivery.totals.fee;\n            },\n            isPackageOffer( ) {\n                return !!this.ticket.packageOfferId;\n            },\n            usePaymentClient( ) {\n                const { hasTicketsOnly, isPackageOffer } = this;\n                return hasTicketsOnly || isPackageOffer;\n            },\n            showPaymentProviderDownContainer( ) {\n                const { usePaymentClient, paymentClientModel, loading } = this;\n                if ( usePaymentClient ) {\n                    return paymentClientModel.errorContacting && !loading;\n                }\n\n                return false; //TODO: here need to be handle payment provider down for tickets & hotel\n            },\n            isPaymentProviderDown( ) {\n                const { paymentClientModel, usePaymentClient } = this;\n                if ( usePaymentClient ) {\n                    return paymentClientModel.errorContacting;\n                }\n\n                return false; //TODO: here need to be handle payment provider down for tickets & hotel\n            }\n        },\n        watch: {\n            customerModel: {\n                deep: true,\n                handler: function ( newValue ) {\n                    this.saveModelOnStore( {\n                        customerModel: JSON.parse( JSON.stringify( newValue ) )\n                    } );\n                }\n            },\n            'customerModel.country': {\n                handler: function ( value, oldValue ) {\n                    if ( value ) {\n                        if ( value !== oldValue ) {\n                            this.loadShippingOptionsForCountry( );\n                        }\n                    } else {\n                        this.clearShippingOptions( );\n                    }\n                },\n                deep: true\n            },\n        },\n        methods: {\n            ...mapActions( {\n                notificationWarning: 'notification/warning',\n                notificationError:          'notification/error',\n                showLoadingOverlay:         'appState/setLoading',\n                checkoutCart:               'cart/checkout',\n                instantDeleteCurrentCart:   'cart/instantDeleteCurrentCart',\n                saveModelOnStore:           'cart/setCheckoutWizard',\n                clearCart:                  'cart/clear',\n                addShippingOption:          'cart/addShippingOption',\n                getShippingOptions:         'cart/getShippingOptions',\n                getCart:                    'cart/get',\n                getCountries:               `${STORE_COUNTRIES}/get`\n            } ),\n            expire( ) {\n                this.unbindWarnBeforeYouLeaveMixin( );\n                this.showExpireErrorMessage( );\n                redirectToHome();\n            },\n            leave( goToHome = false ) {\n                this.$modal.show(\n                    ( ) => import( './TheCheckout/ConfirmLeaveModal' ),\n                    {\n                        onConfirmFn: ( ) => {\n                            this.unbindWarnBeforeYouLeaveMixin( );\n                            this.instantDeleteCurrentCart();\n                            if ( goToHome ) {\n                                redirectToHome( );\n                            } else {\n                                this.$router.back( );\n                            }\n                        }\n                    },\n                    {\n                        'max-width': 800,\n                        persistent: true,\n                        'no-click-animation': true\n                    }\n                );\n                return;\n            },\n            async requestPayment( ) {\n                return new Promise( ( resolve ) => {\n                    const getCardInfo = ( payload ) => {\n                        return payload ? {\n                            'token': payload.nonce,\n                            'expireMonth': parseInt( payload.details.expirationMonth ),\n                            'expireYear': parseInt( payload.details.expirationYear ),\n                            'type': payload.details.cardType,\n                            'lastFour': payload.details.lastFour,\n                        } : null;\n                    };\n\n                    if ( this.usePaymentClient ) {\n                        this.instancePaymentClient.requestPaymentMethod ( ( error, payload ) => {\n                            resolve ( {\n                                fnPayment: ( callback ) => {\n                                    callback( error, getCardInfo( payload ) );\n                                }\n                            } );\n                        } );\n                    } else {\n                        resolve ( {\n                            fnPayment: ( callback ) => {\n                                callback( false, null );\n                            }\n                        } );\n                    }\n                } );\n            },\n            async save( ) {\n                this.$v.$touch();\n                if ( this.usePaymentClient && !this.validProviderPaymentFields ) {\n                    this.requestPayment( );\n                }\n\n                if ( this.$v.$invalid\n                    || ( this. usePaymentClient && !this.validProviderPaymentFields ) ) {\n                    return;\n                }\n\n                const getPayload = ( card ) => {\n                    const { firstName, lastName, email, address, zip, city, state, country, phone } = this.customerModel;\n                    const { cardCVV, cardNumber, cardExpire } = this.paymentModel;\n                    const [ cardExpirationMonth, cardExpirationYear ] = cardExpire.split( '/' );\n                    const formattedCardNumber = cardNumber.replace( /\\s/g, '' );\n                    const cardProvider = getCardProvider( formattedCardNumber );\n\n                    const cardInfo = card ? {\n                        ...card,\n                        paymentType: this.paymentClientModel.providerId\n                    } : {\n                        expireMonth: Number( cardExpirationMonth ),\n                        expireYear: Number( `20${cardExpirationYear}` ),\n                        type: cardProvider,\n                        number: formattedCardNumber,\n                        cvv: cardCVV\n                    };\n\n                    return {\n                        user:{\n                            firstName,\n                            lastName,\n                            email,\n                            phone\n                        },\n                        address: Object.assign( {\n                            street: address,\n                            city,\n                            zip,\n                            countryCode: country,\n                            stateCode: state\n                        }, this.hasResaleItems ? { phone } : null ),\n                        card: cardInfo,\n                        redeem: {\n                            money: this.totalPrice,\n                            points: 0\n                        }\n                    };\n                };\n\n                const onCheckoutErrorDo = async ( response ) => {\n                    const hotelProviderRelatedErrorCodes = Object.values( apiConstants.ERROR_CODES.HOTEL_PROVIDER );\n                    const { code } = response;\n\n                    const i18Prefix = '_common:messageServerErrorCodesFromContext.purchase';\n\n                    if ( !hotelProviderRelatedErrorCodes.includes( code ) ) {\n                        await this.initPaymentClient( );\n                        this.busEventProgressStep.$emit( 'go-to-end' );\n                    } else {\n                        this.unbindWarnBeforeYouLeaveMixin( );\n                        this.instantDeleteCurrentCart();\n                        this.$router.back( );\n                    }\n\n                    switch ( code ) {\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.PRODUCT_ERROR:\n                            this.notificationWarning( {\n                                title: this.$t( `${i18Prefix}.${code}.title` ),\n                                content: this.$t( `${i18Prefix}.${code}.detail` ),\n                                autoDismiss: false\n                            } );\n                            break;\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.INVALID_REQUEST:\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.INVALID_DATA:\n                        case apiConstants.ERROR_CODES.HOTEL_PROVIDER.SYSTEM_ERROR:\n                            this.notificationError( {\n                                title: this.$t( `${i18Prefix}.hotelProviderDefault.title` ),\n                                content: this.$t( `${i18Prefix}.hotelProviderDefault.detail` )\n                            } );\n                            break;\n                        default:\n                            this.notificationError( notificationUtilsGetFromApiResponse( response ) );\n                            break;\n                    }\n                };\n\n                this.$modal.show(\n                    import ( '@tenants/ticketmaster/app/components/modals/ProgressStepAnimationModal.vue' ),\n                    {\n                        title: this.$t( 'progressStepAnimationModal.title' ),\n                        description: this.$t( 'progressStepAnimationModal.description' ),\n                        labels: [\n                            this.$t( `progressStepAnimationModal.labels.${this.hasTicketsOnly ? 'ticketsOnly' : 'hotelAndTickets'}.step1Verifying` ),\n                            this.$t( `progressStepAnimationModal.labels.${this.hasTicketsOnly ? 'ticketsOnly' : 'hotelAndTickets'}.step2Processing` ),\n                            this.$t( `progressStepAnimationModal.labels.${this.hasTicketsOnly ? 'ticketsOnly' : 'hotelAndTickets'}.step3Finalizing` )\n                        ],\n                        busEvent: this.busEventProgressStep,\n                        endOnRouteChange: false\n                    },\n                    {\n                        style: `z-index: ${zIndex.highest}`,\n                        'no-click-animation': true,\n                        persistent: true,\n                        scrollable: false,\n                        fullscreen: true,\n                        'hide-overlay': true\n                    },\n                    {\n                        open: async ( ) => {\n                            await this.saveShippingOption( );\n                            const { fnPayment } = await this.requestPayment( );\n\n                            fnPayment( ( error, cardInfo ) => {\n                                if ( error ) {\n                                    this.busEventProgressStep.$emit( 'close' );\n                                    this.notificationError( this.$t( 'messages.formHasError' ) );\n\n                                    return;\n                                } else {\n                                    this.busEventProgressStep.$emit( 'go-to-step', 3 );\n                                    const data = getPayload ( cardInfo );\n                                    this.cardInfo = { ...data };\n\n                                    this.checkoutCart( { id: this.cart.id, data } )\n                                        .then( response => {\n                                            if ( response.success ) {\n                                                this.checkoutResponse = response;\n                                                this.busEventProgressStep.$emit( 'go-to-end' );\n                                                this.unbindWarnBeforeYouLeaveMixin( );\n                                            } else {\n                                                onCheckoutErrorDo( response );\n                                            }\n                                        } ).catch( ( e ) => {\n                                            LogService.error( e.message );\n                                            this.busEventProgressStep.$emit( 'close' );\n                                            this.notificationError( this.$t( 'messages.formHasError' ) );\n                                        } );\n                                }\n                            } );\n                        },\n                        beforeClose: ( ) => {\n                            if ( this.checkoutResponse ) {\n                                this.openConfirmationModal ( this.checkoutResponse );\n                            }\n                        }\n                    }\n                );\n            },\n            openConfirmationModal( order ) {\n                this.$modal.show(\n                    ( ) => import( './TheCheckout/OrderConfirmationModal.vue' ),\n                    {\n                        order\n                    },\n                    {\n                        scrollable: false,\n                        fullscreen: true,\n                        persistent: true\n                    },\n                    {\n                        beforeClose: ( ) => {\n                            redirectToHome();\n                        }\n                    }\n                );\n            },\n            showExpireErrorMessage( ) {\n                this._cartExpiredErrorShowed || this.notificationError( this.$t( '_common:messages.cartExpired' ) );\n                this._cartExpiredErrorShowed = true;\n            },\n            onLoadingPaymentProviderError( ) {\n                this.showLoadingOverlay( false );\n                this.unbindWarnBeforeYouLeaveMixin( );\n                this.notificationError( this.$t( '_common:messages.apiPaymentClientContactingError' ) );\n                redirectToHome();\n            },\n            async onReloadPaymentProviderDo( ) {\n                this.showLoadingOverlay( true );\n                await this.initPaymentClient( );\n                this.showLoadingOverlay( false );\n            },\n            async saveShippingOption() {\n                const { optionId, lastSubmittedOptionId } = this.shippingModel;\n                const selectedShipping = this.shippingModel.options.find( option => option.id === optionId );\n\n                if ( optionId !== lastSubmittedOptionId ) {\n                    this.showLoadingOverlay( true );\n                    const responseAddShippingOption = await this.addShippingOption( { id: this.cart.id, data: selectedShipping } );\n                    if ( responseAddShippingOption ) {\n                        this.shippingModel.lastSubmittedOptionId = this.shippingModel.optionId;\n                    }\n                }\n\n                if ( this.paymentClientModel.errorContacting ) {\n                    this.showLoadingOverlay( true );\n                    !this.usePaymentClient || await this.initPaymentClient( );\n                }\n\n                this.showLoadingOverlay( false );\n            },\n            async initPaymentClient( ) {\n                if ( !await apiPaymentClient.loadClient( ) ) {\n                    this.paymentClientModel.errorContacting = true;\n                    return this.paymentClientModel;\n                }\n                const api = await apiServicePayments( '' );\n                const paymentClientResponse = await api.payments.getClientToken( );\n                if ( !paymentClientResponse.success ) {\n                    this.paymentClientModel.errorContacting = true;\n                    return this.paymentClientModel;\n                }\n                this.paymentClientModel.token       = paymentClientResponse.data.clientToken;\n                this.paymentClientModel.providerId  = paymentClientResponse.data.providerId;\n                this.paymentClientModel.errorContacting = false;\n\n                return this.paymentClientModel;\n            },\n            async loadCart() {\n                await this.getCart( { id: this.cart.id } );\n            }\n        },\n        async created( ) {\n            this.registerStoreModule( 'states', statesStoreModule );\n            this.registerStoreModule( 'countries', countriesStoreModule );\n\n            const checkCart = ( ) => {\n                if ( !this.cart.id || this.routeCartId != this.cart.id || this.isCartSubmitted ) {\n                    return;\n                }\n\n                if ( this.isCartExpired( ) ) {\n                    this.showExpireErrorMessage( );\n                    return;\n                }\n                return true;\n            };\n\n            this.showLoadingOverlay( true );\n            this.forceWarnBeforeLeaveMixin( );\n            if ( !checkCart( ) ) {\n                this.unbindWarnBeforeYouLeaveMixin( );\n                this.showLoadingOverlay( false );\n                redirectToHome();\n                return;\n            }\n            this.getCountries( );\n            await this.loadCart( );\n            this.hasTicketsOnly = !this.hotelReservation;\n            !this.usePaymentClient || await this.initPaymentClient( );\n            this.updateFormModelAfterLoadingCart( );\n            await this.loadShippingOptionsForCountry( );\n            this.showLoadingOverlay( false );\n            this.loading = false;\n        }\n    };\n</script>\n\n<style lang=\"scss\">\n    @import \"@scssMixins\";\n    @import \"@scssVariables\";\n\n    @include mobile-only {\n        .gst-checkout {\n            .gst-checkout__cart-info {\n                padding: theme-spacing( 0, 8, 1, 8 ) !important;\n                margin-top: theme-spacing( n4 ) !important;\n            }\n        }\n    }\n</style>\n"]}]}