{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/lifestyle-ui/src/tenants/ticketmaster/app/views/user/TheLogin/LoginModal.vue?vue&type=style&index=0&id=72454cd0&lang=scss&scoped=true&","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/tenants/ticketmaster/app/views/user/TheLogin/LoginModal.vue","mtime":1645805366002},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIkBzY3NzVmFyaWFibGVzIjsKCi5nc3QtbG9naW4tbW9kYWxfX3Rvb2xiYXIgewogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHRoZW1lLWNvbG9yKCAncXVpbmFyeScgKTsKfQoKLmdzdC1sb2dpbi1tb2RhbF9fdGl0bGUgewogICAgZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0KCAnbWVkaXVtJyApOwp9CgouZ3N0LWxvZ2luLWJ0bi52LWJ0bi52LWJ0bi0tb3V0bGluZWQgewogICAgZm9udC13ZWlnaHQ6IGZvbnQtd2VpZ2h0KCAnbWVkaXVtJyApOwogICAgYm9yZGVyLXJhZGl1czogYm9yZGVyLXJhZGl1cyggJ20nICkgIWltcG9ydGFudDsKICAgIG1pbi1oZWlnaHQ6IDQ0cHg7CgogICAgJi52LWJ0bi0tZGlzYWJsZWQgewogICAgICAgIGNvbG9yOiB0aGVtZS1jb2xvciggJ3ByaW1hcnknICkgIWltcG9ydGFudDsKICAgICAgICBib3JkZXItY29sb3I6IHRoZW1lLWNvbG9yKCAncHJpbWFyeScgKTsKICAgICAgICBvcGFjaXR5OiAwLjQ7CiAgICB9Cn0KCi5nc3QtbG9naW4tYnRuLnYtYnRuLnYtYnRuLS1vdXRsaW5lZDpub3QoW2Rpc2FibGVkXSkgewogICAgYm9yZGVyLWNvbG9yOiB0aGVtZS1jb2xvciggJ3ByaW1hcnknICk7Cn0K"},{"version":3,"sources":["LoginModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"LoginModal.vue","sourceRoot":"src/tenants/ticketmaster/app/views/user/TheLogin","sourcesContent":["<template>\n    <v-card class=\"gst-login-modal d-flex flex-column\" color=\"text\">\n        <HeaderVariant1 class=\"mb-3\" title=\"Login\" :show-close-icon=\"false\" @close=\"$emit('close')\" />\n        <v-card-text class=\"flex-grow-0 content-max-width px-4 pb-2\" :style=\"{ color:'inherit'}\">\n            <form>\n                <v-text-field\n                    v-model=\"email\"\n                    :data-test-id=\"$testId('input.email')\"\n                    color=\"primary\"\n                    class=\"gst-input--secondary gst-input\"\n                    :label=\"( focused || email ) ? $t('_common:form.labels.email') : 'Please enter your email address to proceed to application'\"\n\n                    :error-messages=\"[\n                        ...requiredError({ field: 'email'}),\n                        ...emailError({ field: 'email'}),\n                    ]\"\n                    required\n                    outlined\n                    @focus=\"focused = true\"\n                    @blur=\"focused = false\" />\n                <v-btn\n                    center\n                    text\n                    outlined\n                    :data-test-id=\"$testId('button.submit')\"\n                    class=\"text-capitalize gst-login-btn float-right\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    v-bind=\"$attrs\"\n                    @click.native=\"onLoginSubmit\">\n                    {{ $t('_common:buttons.login') }}\n                </v-btn>\n            </form>\n        </v-card-text>\n    </v-card>\n</template>\n<script>\n    import { required, email } from 'vuelidate/lib/validators';\n    import { mapActions, mapGetters } from 'vuex';\n    import HeaderVariant1 from '@core/shared/components/modals/layout/HeaderVariant1.vue';\n    import CloseModalOnRouteChangeMixin from '@core/mixins/modals/CloseModalOnRouteChange';\n\n    export default {\n        name: 'LoginModal',\n        testIdOptions: {\n            keyPrefix: 'shared.components.modals.loginModal'\n        },\n        i18nOptions: {\n            namespaces: 'shared',\n            keyPrefix: 'components.modals.login',\n        },\n        components: {\n            HeaderVariant1\n        },\n        mixins: [ CloseModalOnRouteChangeMixin ],\n        props: {\n            redirectRouteToAfterLogin: {\n                type: Object,\n                default: null\n            }\n        },\n        data: function() {\n            return {\n                email: '',\n                focused: false\n            };\n        },\n        validations() {\n            const ret = {\n                email: {\n                    required,\n                    email,\n                },\n            };\n\n            return ret;\n        },\n        computed: {\n            ...mapGetters( {\n                loadingProfile: 'user/profile/loading',\n                getProfileHasError: 'user/profile/hasError'\n            } )\n        },\n        watch: {\n            'email': function ( ) {\n                this.serverError = '';\n            }\n        },\n        methods: {\n            ...mapActions( {\n                setUserProfileEmail         : 'user/profile/setEmail'\n            } ),\n            requiredError( { field } ) {\n                let errors = [];\n                if ( !this.$v[`${field}`].$dirty ) return errors;\n                !this.$v[`${field}`].required   && errors.push ( this.$t( '_common:formErrors.requiredField', { field: this.$t( `_common:form.labels.${field}` ), interpolation : { escapeValue: false } } ) );\n                return errors;\n            },\n            emailError( { field } ) {\n                let errors = [];\n                if ( !this.$v[`${field}`].$dirty ) return errors;\n                !this.$v[`${field}`].email  && errors.push( this.$t( '_common:formErrors.email', { field: this.$t( `_common:form.labels.${field}` ), interpolation: { escapeValue: false } } ) );\n                return errors;\n            },\n            validate( ) {\n                this.$v.$touch();\n                return !this.$v.$invalid;\n            },\n            async onLoginSubmit( event ) {\n                event.preventDefault();\n                event.stopPropagation( );\n                if ( this.validate() ) {\n                    this.setUserProfileEmail( this.email );\n                    this.$emit( 'close' );\n                    !this.redirectRouteToAfterLogin || this.$router.push( this.redirectRouteToAfterLogin );\n                }\n            },\n        }\n    };\n</script>\n<style lang=\"scss\" scoped>\n    @import \"@scssVariables\";\n\n    .gst-login-modal__toolbar {\n        border-bottom: 1px solid theme-color( 'quinary' );\n    }\n\n    .gst-login-modal__title {\n        font-weight: font-weight( 'medium' );\n    }\n\n    .gst-login-btn.v-btn.v-btn--outlined {\n        font-weight: font-weight( 'medium' );\n        border-radius: border-radius( 'm' ) !important;\n        min-height: 44px;\n\n        &.v-btn--disabled {\n            color: theme-color( 'primary' ) !important;\n            border-color: theme-color( 'primary' );\n            opacity: 0.4;\n        }\n    }\n\n    .gst-login-btn.v-btn.v-btn--outlined:not([disabled]) {\n        border-color: theme-color( 'primary' );\n    }\n</style>\n\n<style lang=\"scss\">\n    @import \"@scssVariables\";\n\n    .gst-login-modal__icon-close {\n        fill: theme-color( 'tertiary' );\n    }\n\n    .gst-login-modal__header .v-toolbar__content {\n        justify-content: end;\n    }\n\n    .gst-login-modal {\n        .gst-login-modal__close.v-btn {\n            min-width: auto;\n        }\n    }\n</style>\n"]}]}