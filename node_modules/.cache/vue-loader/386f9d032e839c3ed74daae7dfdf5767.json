{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/lifestyle-ui/src/core/views/attraction/TheAttraction.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/views/attraction/TheAttraction.vue","mtime":1645805364013},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAiQHNjc3NWYXJpYWJsZXMiOwpAaW1wb3J0ICJAc2Nzc01peGlucyI7CgouZ3N0LWF0dHJhY3Rpb25fX3RpdGxlIHsKICAgIGZvbnQtd2VpZ2h0OiBmb250LXdlaWdodCggJ21lZGl1bScgKTsKfQoKLmdzdC1hdHRyYWN0aW9uIC5nc3Qtbm8tZGF0YSB7CiAgICBtYXgtd2lkdGg6IDM4MHB4ICFpbXBvcnRhbnQ7CgogICAgcCB7CiAgICAgICAgbGluZS1oZWlnaHQ6IGxpbmUtaGVpZ2h0KCAnbCcgKTsKICAgIH0KfQoKLmdzdC1hdHRyYWN0aW9uX19maWx0ZXItZGlzYWJsZWQgewogICAgc3Bhbi5nc3QtY2l0eS1kcm9wZG93bl9fdGFyZ2V0LAogICAgc3Bhbi5nc3QtZGF0ZS1kcm9wZG93bl9fdGFyZ2V0IHsKICAgICAgICBjb2xvcjogdGhlbWUtY29sb3IoICdzZW5hcnknICkgIWltcG9ydGFudDsKICAgIH0KCiAgICAuZ3N0LXN2Zy1pY29uLAogICAgLmdzdC1kcm9wZG93bi1pY29uLXN2ZyAuZ3N0LXN2Zy1pY29uIHsKICAgICAgICBmaWxsOiB0aGVtZS1jb2xvciggJ3NlbmFyeScgKSAhaW1wb3J0YW50OwogICAgfQp9CgpAaW5jbHVkZSBtb2JpbGUtb25seSB7CiAgICAuZ3N0LWF0dHJhY3Rpb24gLmdzdC1uby1kYXRhIHsKICAgICAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICB9Cn0K"},{"version":3,"sources":["TheAttraction.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6RA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"TheAttraction.vue","sourceRoot":"src/core/views/attraction","sourcesContent":["<template>\n    <div class=\"gst-attraction\">\n        <DataLoading v-if=\"loading\" class=\"mt-5 mb-5 pt-5 pb-5\" />\n        <div v-else>\n            <v-flex class=\"content-max-width pt-md-1\">\n                <AttractionBanner :item=\"item\" />\n            </v-flex>\n            <v-flex class=\"mt-6 content-max-width\">\n                <v-flex xs12 d-flex flex-row class=\"gst-attraction__filter\">\n                    <!-- eslint-disable-next-line vue/max-attributes-per-line -->\n                    <v-flex \n                        d-flex \n                        flex-row \n                        align-center \n                        justify-start \n                        flex-md-grow-0 \n                        class=\"mr-md-5\" \n                        :class=\"{ 'gst-attraction__filter-disabled': isFilterDisabled }\">\n                        <IconLocation class=\"gst-search-icon-svg mr-1\" />\n                        <span class=\"inline\">\n                            <CityDropDown \n                                v-model=\"city\"\n                                :items=\"cities\"\n                                :data-test-id=\"$testId('filter.city')\"\n                                :loading=\"eventDatesLoading\"\n                                :disabled=\"isFilterDisabled\"\n                                @click=\"onClickCityDropdownDo\" />\n                        </span>\n                    </v-flex>\n                    <v-divider v-if=\"!$vuetify.breakpoint.mdAndUp\" class=\"gst-divider my-1\" vertical inset />\n                    <v-flex \n                        d-flex\n                        flex-row\n                        align-center\n                        justify-end\n                        flex-md-grow-0\n                        class=\"ml-4 ml-md-0\"\n                        :class=\"{ 'gst-attraction__filter-disabled': isFilterDisabled }\">\n                        <IconDate class=\"gst-search-icon-svg mr-1\" />\n                        <span class=\"inline\">\n                            <DateDropDownField\n                                v-model=\"date\"\n                                :data-test-id=\"$testId('filter.date')\"\n                                :disabled=\"isFilterDisabled\"\n                                :loading=\"eventDatesLoading\"\n                                :event-dates=\"eventDatesFiltered\"\n                                @click=\"onClickDateDropdownDo\" />\n                        </span>\n                    </v-flex>\n                </v-flex>\n                <v-row v-if=\"!$vuetify.breakpoint.mdAndUp\" class=\"mt-5\">\n                    <v-divider class=\"gst-divider\" />\n                </v-row>\n                <v-flex xs12 md9 class=\"mt-4\">\n                    <EventsSearchBy :search=\"searchEvents\" :with-user-analytics=\"true\" :expandable-card=\"true\" class=\"mt-5 mb-4\">\n                        <template slot=\"empty-list\">\n                            <TicketNoData align=\"center\" justify=\"center\">\n                                <img :src=\"noTickets\" width=\"70px\" />\n                                <h5 class=\"font-weight-medium my-1\">\n                                    {{ $t('messages.noData.title' ) }}\n                                </h5>\n                                <p class=\"tertiary--text\">\n                                    {{ $t('messages.noData.content' ) }}\n                                </p>\n                            </TicketNoData>\n                        </template>\n                    </EventsSearchBy>\n                </v-flex>\n                <div class=\"content-max-width\">\n                    <SimilarAttractions v-if=\"hasSimilarAttractions\" class=\"mt-6 mt-lg-14 mb-8\" />\n                </div>\n            </v-flex>\n        </div>\n    </div>\n</template>\n\n<script>\n    import { mapActions, mapState } from 'vuex';\n    import TicketNoData from '@core/shared/components/ticket/TicketNoData';\n    import isEmpty from 'lodash/isEmpty';\n    import SimilarAttractions from '@core/shared/components/attraction/SimilarAttractions';\n    import isEqual from 'lodash/isEqual'; \n    import entityConstants from '@core/utils/constants/entity';\n    import imageConstants from '@core/utils/constants/imagePaths';\n    import {\n        buildSearchQueryObject as searchUtilsBuildSearchQueryObject,\n        normalizeSearchQuery as searchUtilsNormalizeSearchQuery\n    } from '@core/utils/searchUtils';\n    import {\n        generateIdForCity as generateIdForCityObjectUtils\n    } from '@core/utils/cityObjectUtils';\n    import {\n        isEmpty as searchObjectUtilsIsEmpty,\n    } from '@core/utils/searchObjectUtils';\n    import { normalizeForFilter as cityObjectUtilsNormalizeForFilter } from '@utils/cityObjectUtils';\n    import { normalizeAttractionEventDates } from '@core/data/response/normalizeAttractionEventDates';\n    import IconLocation from '@core/shared/assets/icons/location.svg';\n    import IconDate from '@core/shared/assets/icons/date.svg';\n    import DataLoading from '@core/shared/components/loading/DataLoading.vue';\n    import EventsSearchBy from '@core/shared/components/event/EventsSearchBy.vue';\n    import CityDropDown from '@core/shared/components/input/CityDropDown.vue';\n    import DateDropDownField from '@core/shared/components/input/DateDropDownField.vue';\n    import EntityNotFoundRedirect404 from '@core/mixins/EntityNotFoundRedirect404';\n    import AttractionBanner from './TheAttraction/AttractionBanner.vue';\n\n    const STORE_ATTRACTIONS = 'attractions';\n    const STORE_EVENTS = 'events';\n    const STORE_USER_HISTORY_BROWSING = 'user/browsingHistory';\n    const EVENT_DATES_LIMIT = 1000;\n\n    export default {\n        name: 'TheAttraction',\n        components: {\n            SimilarAttractions,\n            CityDropDown,\n            DateDropDownField,\n            DataLoading,\n            EventsSearchBy,\n            IconDate,\n            IconLocation,\n            TicketNoData,\n            AttractionBanner\n        },\n        i18nOptions: {\n            namespaces: 'main',\n            keyPrefix: 'views.attraction.theAttraction'\n        },\n        testIdOptions: {\n            keyPrefix: 'attraction'\n        },\n        mixins: [\n            EntityNotFoundRedirect404\n        ],\n        data( ) {\n            return {\n                loading: true,\n                city: { },\n                date: {\n                    startDate: null,\n                    endDate: null\n                },\n                cities: [],\n                eventDates: [],\n                eventDatesLoading: false\n            };\n        },\n        computed: {\n            ...mapState( {\n                item:                   state => state[STORE_ATTRACTIONS].detail,\n                hasSimilarAttractions:  state => state.user.analytics.hasSimilarAttractions,\n                events:                 state => state[STORE_EVENTS].list,\n                eventsLoading:          state => state[STORE_EVENTS].loading,\n                userFirstAccessApp:     state => state.user.firstAccess\n            } ),\n            itemId( ) {\n                return this.$route.params.id;\n            },\n            searchEvents() {\n                return {\n                    attractionId: this.itemId,\n                    city: this.city,\n                    startDate: this.date.startDate,\n                    endDate: this.date.endDate\n                };\n            },\n            entityType() {\n                return entityConstants.TYPES.ATTRACTION;\n            },\n            isFilterDisabled() {\n                const hasFilter = !isEmpty( this.city ) || !!this.date.startDate || !!this.date.endDate;\n                return !this.events.length && !hasFilter && !this.eventsLoading;\n            },\n            noTickets() {\n                return imageConstants.FALLBACKS.NO_TICKETS;\n            },\n            searchParams() {\n                const search = searchUtilsNormalizeSearchQuery( this.$route.query );\n\n                if ( searchObjectUtilsIsEmpty( search ) ) {\n                    return null;\n                } else {\n                    return {\n                        startDate: search.startDate ? search.startDate : null,\n                        endDate: search.endDate ? search.endDate : null,\n                        city: search.city ? cityObjectUtilsNormalizeForFilter( search.city ) : null\n                    };\n                }\n            },\n            eventDatesFiltered( ) {\n                if ( this.eventDates.length ) {\n                    const res = this.eventDates.reduce( ( acc, item ) => {\n                        if ( !this.city || isEmpty( this.city ) || isEqual( item.city, this.city ) ) {\n                            acc.dates.push( item.date );\n                        }\n                        return acc;   \n                    }, { dates: [ ] }  );\n                    return res.dates;\n                }\n                return [];\n            }\n        },\n        watch: {\n            '$route.params.id': function ( ) {\n                this.city = { };\n                this.date.startDate = null;\n                this.date.endDate = null;\n                this.cities = [];\n                this.eventDates = [];\n                this.load( );\n            }\n        },\n        methods: {\n            ...mapActions( {\n                loadOne                             : `${STORE_ATTRACTIONS}/one`,\n                addEntityToUserBrowsingHistory      : `${STORE_USER_HISTORY_BROWSING}/addEntity`,\n                cityEventDatesByAttraction          : `${STORE_EVENTS}/cityEventDatesByAttraction`,\n            } ),\n            changeRouteQuery( ) {\n                const currentRoute = this.$router.currentRoute;\n\n                this.$router.replace( {\n                    name: currentRoute.name,\n                    params: currentRoute.params,\n                    query: searchUtilsBuildSearchQueryObject( {\n                        city: this.city,\n                        startDate: this.date.startDate,\n                        endDate: this.date.endDate\n                    } )\n                }, ( ) => { } );\n            },\n            async load( ) {\n                this.loading = true;\n                const res = await this.loadOne( this.itemId );\n                if ( !res ) {\n                    this._goToNotFoundPage( );\n                    return;\n                }\n                this.addEntityToUserBrowsingHistory( { entityType: entityConstants.TYPES.ATTRACTION, data: this.item } );\n                this.loading = false;\n            },\n            async loadEventDatesByAttraction() {\n                this.eventDatesLoading = true;\n                const response = await this.cityEventDatesByAttraction( { id: this.itemId, limit: EVENT_DATES_LIMIT } );\n                if ( response ) {\n                    const res = response.reduce( ( acc, item ) => {\n                        const attractionEventDatesItem = normalizeAttractionEventDates( item );\n                        \n                        if ( attractionEventDatesItem.date ) {\n                            const eventDateItem = {\n                                date: attractionEventDatesItem.date.toISOString().substr( 0, 10 ),\n                                city: attractionEventDatesItem.city\n                            };\n                            acc.dates.push( eventDateItem );\n                        }\n                        if ( attractionEventDatesItem.city ) {\n                            acc.citiesMap[generateIdForCityObjectUtils( attractionEventDatesItem.city )] = attractionEventDatesItem.city;\n                        }\n\n                        return acc;\n                    }, { dates: [ ], citiesMap: { } } );\n\n                    this.eventDates = res.dates;\n                    this.cities = Object.values( res.citiesMap );\n                }\n                this.eventDatesLoading = false;\n            },\n            onClickCityDropdownDo( ) {\n                ( this.cities.length || this.eventDatesLoading ) || this.loadEventDatesByAttraction();\n            },\n            onClickDateDropdownDo( ) {\n                ( this.eventDates.length || this.eventDatesLoading ) || this.loadEventDatesByAttraction();\n            }\n        },\n        mounted( ) {\n            !this.searchParams || !this.searchParams.startDate  ||   ( this.date.startDate = this.searchParams.startDate );\n            !this.searchParams || !this.searchParams.endDate    ||   ( this.date.endDate = this.searchParams.endDate );\n            ( !this.searchParams || !this.searchParams.city || !this.searchParams.city.name ) || ( this.city = this.searchParams.city );\n            this.$watch( 'city', this.changeRouteQuery );\n            this.$watch( 'date', this.changeRouteQuery );\n            this.load( );\n        }\n    };\n</script>\n\n<style lang=\"scss\">\n    @import \"@scssVariables\";\n    @import \"@scssMixins\";\n\n    .gst-attraction__title {\n        font-weight: font-weight( 'medium' );\n    }\n\n    .gst-attraction .gst-no-data {\n        max-width: 380px !important;\n\n        p {\n            line-height: line-height( 'l' );\n        }\n    }\n\n    .gst-attraction__filter-disabled {\n        span.gst-city-dropdown__target,\n        span.gst-date-dropdown__target {\n            color: theme-color( 'senary' ) !important;\n        }\n\n        .gst-svg-icon,\n        .gst-dropdown-icon-svg .gst-svg-icon {\n            fill: theme-color( 'senary' ) !important;\n        }\n    }\n\n    @include mobile-only {\n        .gst-attraction .gst-no-data {\n            max-width: 100%;\n        }\n    }\n</style>\n"]}]}