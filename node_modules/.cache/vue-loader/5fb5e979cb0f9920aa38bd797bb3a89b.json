{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/views/event/TheEvent/EventTicketList.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/views/event/TheEvent/EventTicketList.vue","mtime":1645805364025},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/css-loader/dist/cjs.js","mtime":1637061260154},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637061260528},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/postcss-loader/src/index.js","mtime":1637061260465},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/sass-loader/dist/cjs.js","mtime":1637061279772},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/vue-loader/lib/index.js","mtime":1637061260528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAiQHNjc3NWYXJpYWJsZXMiOwpAaW1wb3J0ICJAc2Nzc01peGlucyI7CgouZ3N0LWV2ZW50IHsKICAgIC5nc3QtZXZlbnRfX2xpc3QtaXRlbSB7CiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHRoZW1lLWNvbG9yKCAncXVpbmFyeScgKTsKICAgIH0KfQo="},{"version":3,"sources":["EventTicketList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkNA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"EventTicketList.vue","sourceRoot":"src/core/views/event/TheEvent","sourcesContent":["<template>\n    <div class=\"u-width-100\">\n        <v-slide-x-transition>\n            <v-flex\n                v-if=\"$vuetify.breakpoint.mdAndUp && selectedTicket\"\n                class=\"u-width-100 u-height-100 u-pull-front u-position-absolute\">\n                <EventTicketDetailSidebar\n                    :ticket=\"selectedTicketDetailInfo.ticket\"\n                    :offers=\"selectedTicketDetailInfo.offers\"\n                    :event=\"selectedTicketDetailInfo.event\"\n                    :quantity=\"selectedTicketDetailInfo.quantity\"\n                    :bus-event-parent=\"busEventParent\"\n                    @cancel=\"$emit('close-ticket' )\" />\n            </v-flex>\n        </v-slide-x-transition>\n        <InfiniteCardList\n            :data=\"ticketsWithOffers\"\n            :config=\"eventTicketCardConfig\"\n            :loading=\"loadingTickets\"\n            :all-data-loaded=\"tickets.length >= totalTickets\"\n            :has-load-button=\"false\"\n            :prefill=\"true\"\n            item-classes=\"pl-0 pr-0 mr-4 gst-event__list-item\"\n            class=\"u-height-100 u-width-100 pl-4\"\n            @mouse-enter-item=\"$emit('hightlight-ticket', $event )\"\n            @mouse-leave-item=\"$emit('hightlight-ticket', null )\"\n            @click-item=\"$emit('click-item', $event)\"\n            @load-more=\"$emit('load-more')\">\n            <template slot=\"loading\">\n                <DataLoading v-if=\"loadingTickets\" class=\"mt-5 mb-5 pt-5 pb-5\" />\n            </template>\n            <template slot=\"empty-list\">\n                <TicketNoData v-if=\"!loadingTickets && !ticketsWithOffers.length\"\n                    align=\"start\"\n                    justify=\"center\">\n                    <img :src=\"noTickets\" width=\"50px\" />\n                    <p>\n                        {{ $t('_common:messages.noTickets') }}\n                    </p>\n                </TicketNoData>\n            </template>\n            <template v-if=\"ticketsWithOffers.length\" slot=\"inner-scroll-header\">\n                <div class=\"py-2\">\n                    <DropDown\n                        v-model=\"sort.value\"\n                        :clearable=\"false\"\n                        :items=\"sort.options\"\n                        value-prop=\"value\"\n                        :render-item-fn=\"( item ) => item.display\"\n                        :data-test-id=\"$testId('sort')\" />\n                </div>\n                <EventHealthCheckWarningCardVariant1\n                    v-if=\"hasHealthCheck && $vuetify.breakpoint.mdAndUp\"\n                    :health-check=\"event.healthCheck\"\n                    class=\"my-2 mr-4\" />\n                <EventHealthCheckWarningCardVariant2\n                    v-if=\"hasHealthCheck && !$vuetify.breakpoint.mdAndUp\"\n                    :health-check=\"event.healthCheck\"\n                    class=\"my-2 mr-4\"\n                    :class=\"{\n                        'mb-4': showTicketsFewAvailableWarning\n                    }\" />\n                <v-fade-transition v-if=\"!$vuetify.breakpoint.mdAndUp\">\n                    <EventTicketStatusFewAvailableWarningCard\n                        v-if=\"showTicketsFewAvailableWarning\"\n                        class=\"my-2 mr-4\"\n                        @close=\"$emit('close-tickets-few-available-warning')\" />\n                </v-fade-transition>\n            </template>\n        </InfiniteCardList>\n        <div v-if=\"!$vuetify.breakpoint.mdAndUp\"\n            class=\"gst-event__filter-btn\">\n            <v-btn\n                bottom\n                width=\"120\"\n                class=\"text-capitalize\"\n                @click=\"$emit('open-filter-modal') \">\n                <IconFilters class=\"mr-2\" />{{ $t('_common:buttons.filters') }}\n            </v-btn>\n        </div>\n    </div>\n</template>\n\n<script>\n    import { mapGetters } from 'vuex';\n    import DataLoading from '@core/shared/components/loading/DataLoading';\n    import DropDown from '@core/shared/components/input/DropDown';\n    import InfiniteCardList from '@core/shared/components/lists/InfiniteCardList';\n    import TicketNoData from '@core/shared/components/ticket/TicketNoData';\n    import TicketCardVariantOne from '@core/shared/components/ticket/TicketCardVariantOne';\n    import imageConstants from '@core/utils/constants/imagePaths';\n    import IconFilters from '@core/shared/assets/icons/filters.svg';\n    import EventHealthCheckWarningCardVariant1 from '@core/shared/components/notifications/EventHealthCheckWarningCardVariant1.vue';\n    import EventHealthCheckWarningCardVariant2 from '@core/shared/components/notifications/EventHealthCheckWarningCardVariant2.vue';\n    import EventTicketDetailSidebar from './EventTicketDetailSidebar';\n    import EventTicketStatusFewAvailableWarningCard from './components/notifications/EventTicketStatusFewAvailableWarningCard';\n\n    export default {\n        name: 'EventTicketList',\n        components: {\n            DataLoading,\n            EventTicketDetailSidebar,\n            InfiniteCardList,\n            IconFilters,\n            TicketNoData,\n            DropDown,\n            // eslint-disable-next-line vue/no-unused-components\n            TicketCardVariantOne,\n            EventTicketStatusFewAvailableWarningCard,\n            EventHealthCheckWarningCardVariant1,\n            EventHealthCheckWarningCardVariant2,\n        },\n        testIdOptions: {\n            keyPrefix: 'event'\n        },\n        props: {\n            event: {\n                type: Object,\n                required: true\n            },\n            tickets: {\n                type: Array,\n                default: null,\n            },\n            totalTickets: {\n                type:Number,\n                default: 0\n            },\n            ticketsWithOffers: {\n                type: Array,\n                default: null\n            },\n            loadingTickets: {\n                type: Boolean,\n                default: false\n            },\n            selectedTicket: {\n                type: Object,\n                default: null,\n            },\n            selectedTicketDetailInfo: {\n                type: Object,\n                default: null\n            },\n            sort: {\n                type: Object,\n                default: null\n            },\n            showTicketsFewAvailableWarning: {\n                type: Boolean,\n                default: false\n            },\n            busEventParent: {\n                type: Object,\n                required: true\n            }\n        },\n        computed: {\n            ...mapGetters( {\n                isLoyaltyCurrencyTypeMoney: 'appTenant/isLoyaltyCurrencyTypeMoney'\n            } ),\n            eventTicketCardConfig( ) {\n                return {\n                    card: TicketCardVariantOne,\n                    cardClasses: 'u-width-100 u-background-transparent pt-2 pb-1',\n                    propsToBind: ( item ) => {\n                        return {\n                            ticket: item,\n                            offers: item.offers,\n                            isLoyaltyCurrencyTypeMoney: this.isLoyaltyCurrencyTypeMoney\n                        };\n                    }\n                };\n            },\n            noTickets() {\n                return imageConstants.FALLBACKS.NO_TICKETS;\n            },\n            hasHealthCheck( ) {\n                return !!this.event.healthCheck;\n            }\n        }\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    @import \"@scssVariables\";\n    @import \"@scssMixins\";\n\n    .gst-event-mobile.gst-event .gst-event__filter-btn {\n        position: fixed;\n        left: 50%;\n        right: 50%;\n        bottom: 20px;\n        width: 120px;\n        text-align: center;\n        margin-left: -60px;\n\n        .v-btn {\n            background-color: theme-color( 'white' );\n            color: theme-color( 'primary' );\n            border-radius: border-radius( 'l' ) !important;\n\n            svg .gst-svg-icon {\n                fill: theme-color( 'primary' );\n            }\n        }\n    }\n</style>\n\n<style lang=\"scss\">\n    @import \"@scssVariables\";\n    @import \"@scssMixins\";\n\n    .gst-event {\n        .gst-event__list-item {\n            border-bottom: 1px solid theme-color( 'quinary' );\n        }\n    }\n</style>"]}]}