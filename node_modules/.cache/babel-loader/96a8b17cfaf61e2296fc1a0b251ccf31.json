{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceFavourites.js","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceFavourites.js","mtime":1645805363870},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvY3Jpc3RpYW5kYW4vRGVza3RvcC9wcm9pZWN0LWxpY2VudGEtZnJvbnQvbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9jcmlzdGlhbmRhbi9EZXNrdG9wL3Byb2llY3QtbGljZW50YS1mcm9udC9ub2RlX21vZHVsZXMvQHZ1ZS9iYWJlbC1wcmVzZXQtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IGFwaUNvbnN0YW50cyBmcm9tICdAY29yZS91dGlscy9jb25zdGFudHMvYXBpJzsKaW1wb3J0IGZldGNoIGZyb20gJ0Bjb3JlL3V0aWxzL2ZldGNoJzsKaW1wb3J0IHsgZ2V0RGVmYXVsdEdldFBhcmFtcyBhcyBhcGlVdGlsc0dldERlZmF1bHRHZXRQYXJhbXMsIG5vcm1hbGl6ZVF1ZXJ5UGFyYW1zV2l0aENpdHkgYXMgYXBpVXRpbHNOb3JtYWxpemVRdWVyeVBhcmFtc1dpdGhDaXR5LCBub3JtYWxpemVRdWVyeVBhcmFtcyBhcyBhcGlVdGlsc05vcm1hbGl6ZVF1ZXJ5UGFyYW1zIH0gZnJvbSAnQGNvcmUvdXRpbHMvYXBpVXRpbHMnOwppbXBvcnQgeyB0cmFuc2Zvcm1Ub1R5cGVBcGkgYXMgZW50aXR5VXRpbHNUcmFuc2Zvcm1Ub1R5cGVBcGkgfSBmcm9tICdAY29yZS91dGlscy9lbnRpdHlVdGlscyc7CmltcG9ydCB7IGNyZWF0ZUFwaVNlcnZpY2UsIGZldGNoQVBJIH0gZnJvbSAnQGNvcmUvYXBpL191dGlscyc7CnZhciBkZWZhdWx0R2V0UGFyYW0gPSBhcGlVdGlsc0dldERlZmF1bHRHZXRQYXJhbXMoKTsKdmFyIGFwaSA9IHsKICBnZXRDYW5jZWxSZXF1ZXN0OiBmZXRjaC5nZXRDYW5jZWxSZXF1ZXN0LAogIGZhdm9yaXRlczogewogICAgZ2V0SWRzOiBmdW5jdGlvbiBnZXRJZHMoX3JlZikgewogICAgICB2YXIgdHlwZSA9IF9yZWYudHlwZSwKICAgICAgICAgIGxpbWl0ID0gX3JlZi5saW1pdCwKICAgICAgICAgIG9mZnNldCA9IF9yZWYub2Zmc2V0OwogICAgICByZXR1cm4gZmV0Y2hBUEkuZ2V0KCIiLmNvbmNhdChhcGlDb25zdGFudHMuQkFTRV9VUkwsICIvYXBpL2Zhdm91cml0ZS8iKS5jb25jYXQoZW50aXR5VXRpbHNUcmFuc2Zvcm1Ub1R5cGVBcGkodHlwZSksICIvaWRzIiksIGFwaVV0aWxzTm9ybWFsaXplUXVlcnlQYXJhbXMoewogICAgICAgIGxpbWl0OiBsaW1pdCwKICAgICAgICBvZmZzZXQ6IG9mZnNldAogICAgICB9KSk7CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoX3JlZjIpIHsKICAgICAgdmFyIF9yZWYyJHR5cGUgPSBfcmVmMi50eXBlLAogICAgICAgICAgdHlwZSA9IF9yZWYyJHR5cGUgPT09IHZvaWQgMCA/ICcnIDogX3JlZjIkdHlwZSwKICAgICAgICAgIF9yZWYyJG9mZnNldCA9IF9yZWYyLm9mZnNldCwKICAgICAgICAgIG9mZnNldCA9IF9yZWYyJG9mZnNldCA9PT0gdm9pZCAwID8gZGVmYXVsdEdldFBhcmFtLm9mZnNldCA6IF9yZWYyJG9mZnNldCwKICAgICAgICAgIF9yZWYyJGxpbWl0ID0gX3JlZjIubGltaXQsCiAgICAgICAgICBsaW1pdCA9IF9yZWYyJGxpbWl0ID09PSB2b2lkIDAgPyBkZWZhdWx0R2V0UGFyYW0ubGltaXQgOiBfcmVmMiRsaW1pdCwKICAgICAgICAgIF9yZWYyJHNvcnQgPSBfcmVmMi5zb3J0LAogICAgICAgICAgc29ydCA9IF9yZWYyJHNvcnQgPT09IHZvaWQgMCA/ICcnIDogX3JlZjIkc29ydCwKICAgICAgICAgIF9yZWYyJGNhdGVnb3J5SWQgPSBfcmVmMi5jYXRlZ29yeUlkLAogICAgICAgICAgY2F0ZWdvcnlJZCA9IF9yZWYyJGNhdGVnb3J5SWQgPT09IHZvaWQgMCA/ICcnIDogX3JlZjIkY2F0ZWdvcnlJZCwKICAgICAgICAgIF9yZWYyJGNpdHkgPSBfcmVmMi5jaXR5LAogICAgICAgICAgY2l0eSA9IF9yZWYyJGNpdHkgPT09IHZvaWQgMCA/IHt9IDogX3JlZjIkY2l0eTsKCiAgICAgIC8vSGFja3kgc29sdXRpb24gaW9udXR0ICggMjAyMS0wMi0wMiApCiAgICAgIC8vaW4gdGhlIGNhdGVnb3J5SWQgd2Ugd2lsbCByZWNlaXZlIGFuIHN0cmluZyAiY2F0ZWdvcnlJZD0nMTIzMWFzZGEnIiBvciAiZ2VucmU9JzEyMzEyMyciCiAgICAgIHZhciB0cmFuc2Zvcm1DYXRlZ29yeUlkID0gZnVuY3Rpb24gdHJhbnNmb3JtQ2F0ZWdvcnlJZCgpIHsKICAgICAgICBpZiAoIWNhdGVnb3J5SWQgfHwgIWNhdGVnb3J5SWQuc3BsaXQpIHsKICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHNlYXJjaEFyciA9IGNhdGVnb3J5SWQuc3BsaXQoJz0nKTsKICAgICAgICAgIHZhciByZXQgPSB7fTsKICAgICAgICAgIHJldFtzZWFyY2hBcnJbMF1dID0gc2VhcmNoQXJyWzFdOwogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9CiAgICAgIH07CgogICAgICByZXR1cm4gZmV0Y2hBUEkuZ2V0TGlzdCgiIi5jb25jYXQoYXBpQ29uc3RhbnRzLkJBU0VfVVJMLCAiL2FwaS9mYXZvdXJpdGUvIikuY29uY2F0KGVudGl0eVV0aWxzVHJhbnNmb3JtVG9UeXBlQXBpKHR5cGUpKSwgYXBpVXRpbHNOb3JtYWxpemVRdWVyeVBhcmFtc1dpdGhDaXR5KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdHJhbnNmb3JtQ2F0ZWdvcnlJZCgpKSwge30sIHsKICAgICAgICBsaW1pdDogbGltaXQsCiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsCiAgICAgICAgb3JkZXI6IHNvcnQudG9VcHBlckNhc2UoKSwKICAgICAgICBjaXR5OiBjaXR5CiAgICAgIH0pKSk7CiAgICB9LAogICAgYWRkRW50aXR5OiBmdW5jdGlvbiBhZGRFbnRpdHkodHlwZSwgaWQpIHsKICAgICAgcmV0dXJuIGZldGNoQVBJLnBvc3QoIiIuY29uY2F0KGFwaUNvbnN0YW50cy5CQVNFX1VSTCwgIi9hcGkvZmF2b3VyaXRlIiksIHsKICAgICAgICBpdGVtczogW3sKICAgICAgICAgIHR5cGU6IGVudGl0eVV0aWxzVHJhbnNmb3JtVG9UeXBlQXBpKHR5cGUpLAogICAgICAgICAgaWQ6IGlkCiAgICAgICAgfV0KICAgICAgfSk7CiAgICB9LAogICAgZGVsZXRlRW50aXR5OiBmdW5jdGlvbiBkZWxldGVFbnRpdHkodHlwZSwgaWQpIHsKICAgICAgcmV0dXJuIGZldGNoQVBJLmRlbGV0ZSgiIi5jb25jYXQoYXBpQ29uc3RhbnRzLkJBU0VfVVJMLCAiL2FwaS9mYXZvdXJpdGUvZGVsZXRlIiksIHsKICAgICAgICBpdGVtczogW3sKICAgICAgICAgIHR5cGU6IGVudGl0eVV0aWxzVHJhbnNmb3JtVG9UeXBlQXBpKHR5cGUpLAogICAgICAgICAgaWQ6IGlkCiAgICAgICAgfV0KICAgICAgfSk7CiAgICB9CiAgfQp9OwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoX3gpIHsKICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX3JlZjMoKSB7CiAgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY29uZmlnKSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGNyZWF0ZUFwaVNlcnZpY2UoY29uZmlnLCBhcGkpKTsKCiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},{"version":3,"sources":["/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceFavourites.js"],"names":["apiConstants","fetch","getDefaultGetParams","apiUtilsGetDefaultGetParams","normalizeQueryParamsWithCity","apiUtilsNormalizeQueryParamsWithCity","normalizeQueryParams","apiUtilsNormalizeQueryParams","transformToTypeApi","entityUtilsTransformToTypeApi","createApiService","fetchAPI","defaultGetParam","api","getCancelRequest","favorites","getIds","type","limit","offset","get","BASE_URL","sort","categoryId","city","transformCategoryId","split","searchArr","ret","getList","order","toUpperCase","addEntity","id","post","items","deleteEntity","delete","config"],"mappings":";;;;;;AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SACIC,mBAAmB,IAAIC,2BAD3B,EAEIC,4BAA4B,IAAIC,oCAFpC,EAGIC,oBAAoB,IAAIC,4BAH5B,QAIO,sBAJP;AAKA,SAASC,kBAAkB,IAAIC,6BAA/B,QAAoE,yBAApE;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,kBAA3C;AAEA,IAAMC,eAAe,GAAGT,2BAA2B,EAAnD;AAEA,IAAIU,GAAG,GAAG;AACNC,EAAAA,gBAAgB,EAAEb,KAAK,CAACa,gBADlB;AAENC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE,sBAA+B;AAAA,UAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,MAAc,QAAdA,MAAc;AACnC,aAAOR,QAAQ,CAACS,GAAT,WACApB,YAAY,CAACqB,QADb,4BACuCZ,6BAA6B,CAAEQ,IAAF,CADpE,WAEHV,4BAA4B,CAAE;AAC1BW,QAAAA,KAAK,EAALA,KAD0B;AAE1BC,QAAAA,MAAM,EAANA;AAF0B,OAAF,CAFzB,CAAP;AAOH,KATM;AAUPC,IAAAA,GAAG,EAAE,oBAQM;AAAA,6BANHH,IAMG;AAAA,UANHA,IAMG,2BANI,EAMJ;AAAA,+BALHE,MAKG;AAAA,UALHA,MAKG,6BALMP,eAAe,CAACO,MAKtB;AAAA,8BAJHD,KAIG;AAAA,UAJHA,KAIG,4BAJKN,eAAe,CAACM,KAIrB;AAAA,6BAHHI,IAGG;AAAA,UAHHA,IAGG,2BAHI,EAGJ;AAAA,mCAFHC,UAEG;AAAA,UAFHA,UAEG,iCAFU,EAEV;AAAA,6BADHC,IACG;AAAA,UADHA,IACG,2BADI,EACJ;;AACP;AACA;AACA,UAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAO;AAC/B,YAAK,CAACF,UAAD,IAAe,CAACA,UAAU,CAACG,KAAhC,EAAwC;AACpC,iBAAO,EAAP;AACH,SAFD,MAEO;AACH,cAAIC,SAAS,GAAGJ,UAAU,CAACG,KAAX,CAAkB,GAAlB,CAAhB;AACA,cAAIE,GAAG,GAAG,EAAV;AACAA,UAAAA,GAAG,CAAED,SAAS,CAAC,CAAD,CAAX,CAAH,GAAsBA,SAAS,CAAE,CAAF,CAA/B;AAEA,iBAAOC,GAAP;AACH;AACJ,OAVD;;AAYA,aAAOjB,QAAQ,CAACkB,OAAT,WACA7B,YAAY,CAACqB,QADb,4BACuCZ,6BAA6B,CAAEQ,IAAF,CADpE,GAEHZ,oCAAoC,iCAC7BoB,mBAAmB,EADU;AAEhCP,QAAAA,KAAK,EAALA,KAFgC;AAGhCC,QAAAA,MAAM,EAANA,MAHgC;AAIhCW,QAAAA,KAAK,EAAER,IAAI,CAACS,WAAL,EAJyB;AAKhCP,QAAAA,IAAI,EAAJA;AALgC,SAFjC,CAAP;AAUH,KA3CM;AA4CPQ,IAAAA,SAAS,EAAE,mBAAEf,IAAF,EAAQgB,EAAR,EAAgB;AACvB,aAAOtB,QAAQ,CAACuB,IAAT,WACAlC,YAAY,CAACqB,QADb,qBAEH;AACIc,QAAAA,KAAK,EAAE,CAAE;AAAElB,UAAAA,IAAI,EAAER,6BAA6B,CAAEQ,IAAF,CAArC;AAA+CgB,UAAAA,EAAE,EAAFA;AAA/C,SAAF;AADX,OAFG,CAAP;AAMH,KAnDM;AAoDPG,IAAAA,YAAY,EAAE,sBAAEnB,IAAF,EAAQgB,EAAR,EAAgB;AAC1B,aAAOtB,QAAQ,CAAC0B,MAAT,WACArC,YAAY,CAACqB,QADb,4BAEH;AACIc,QAAAA,KAAK,EAAE,CAAE;AAAElB,UAAAA,IAAI,EAAER,6BAA6B,CAAEQ,IAAF,CAArC;AAA+CgB,UAAAA,EAAE,EAAFA;AAA/C,SAAF;AADX,OAFG,CAAP;AAMH;AA3DM;AAFL,CAAV;AAiEA;AAAA;AAAA;;;kEAAe,iBAAiBK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,6CACJ5B,gBAAgB,CAAE4B,MAAF,EAAUzB,GAAV,CADZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import apiConstants from '@core/utils/constants/api';\nimport fetch from '@core/utils/fetch';\nimport {\n    getDefaultGetParams as apiUtilsGetDefaultGetParams,\n    normalizeQueryParamsWithCity as apiUtilsNormalizeQueryParamsWithCity,\n    normalizeQueryParams as apiUtilsNormalizeQueryParams,\n} from '@core/utils/apiUtils';\nimport { transformToTypeApi as entityUtilsTransformToTypeApi } from '@core/utils/entityUtils';\nimport { createApiService, fetchAPI } from '@core/api/_utils';\n\nconst defaultGetParam = apiUtilsGetDefaultGetParams( );\n\nlet api = {\n    getCancelRequest: fetch.getCancelRequest,\n    favorites: {\n        getIds: ( { type, limit, offset } ) => {\n            return fetchAPI.get(\n                `${apiConstants.BASE_URL}/api/favourite/${entityUtilsTransformToTypeApi( type )}/ids`,\n                apiUtilsNormalizeQueryParams( {\n                    limit,\n                    offset\n                } )\n            );\n        },\n        get: (\n            {\n                type = '',\n                offset = defaultGetParam.offset,\n                limit = defaultGetParam.limit,\n                sort = '',\n                categoryId = '',\n                city = { }\n            } ) => {\n            //Hacky solution ionutt ( 2021-02-02 )\n            //in the categoryId we will receive an string \"categoryId='1231asda'\" or \"genre='123123'\"\n            const transformCategoryId = ( ) => {\n                if ( !categoryId || !categoryId.split ) {\n                    return { };\n                } else {\n                    let searchArr = categoryId.split( '=' );\n                    let ret = { };\n                    ret [searchArr[0] ] = searchArr[ 1 ];\n\n                    return ret;\n                }\n            };\n\n            return fetchAPI.getList(\n                `${apiConstants.BASE_URL}/api/favourite/${entityUtilsTransformToTypeApi( type )}`,\n                apiUtilsNormalizeQueryParamsWithCity( {\n                    ...transformCategoryId( ),\n                    limit,\n                    offset,\n                    order: sort.toUpperCase( ),\n                    city\n                } )\n            );\n        },\n        addEntity: ( type, id ) => {\n            return fetchAPI.post(\n                `${apiConstants.BASE_URL}/api/favourite`,\n                {\n                    items: [ { type: entityUtilsTransformToTypeApi( type ), id } ]\n                }\n            );\n        },\n        deleteEntity: ( type, id ) => {\n            return fetchAPI.delete(\n                `${apiConstants.BASE_URL}/api/favourite/delete`,\n                {\n                    items: [ { type: entityUtilsTransformToTypeApi( type ), id } ]\n                }\n            );\n        }\n    }\n};\n\nexport default async function ( config ) {\n    return createApiService( config, api );\n}"]}]}