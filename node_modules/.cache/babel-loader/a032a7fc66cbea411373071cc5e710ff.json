{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/lifestyle-ui/src/core/store/modules/topEvents.js","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/store/modules/topEvents.js","mtime":1645805363992},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/cristiandan/Desktop/lifestyle-ui/src/core/store/modules/topEvents.js"],"names":["sortBy","storeConstants","searchConstants","hasCustomCityLocation","searchObjectUtilsHasCustomCityLocation","updateSearchWithCityLocationRange","searchObjectUtilsUpdateSearchWithCityLocationRange","isStoreOutDated","storeUtilsIsStoreOutDated","apiServiceTopEvents","normalizeEvent","LogService","REFRESH_TIME","STORE_NAME","ITEMS_PER_PAGE","name","namespaced","state","listView","list","timestamp","loading","listFirstLoad","refresh","allItemsLoaded","filter","mutations","setLoading","clearLists","appendPageToList","pageData","Date","getTime","map","item","startDateTime","appendPageToListView","setRefresh","setFilter","setAllItemsLoaded","actions","get","commit","loadNextPage","userAnalytics","needsRefresh","getItemsFallback","options","api","topEvents","DEFAULT","LOCATION","RANGE","response","success","data","length","FALLBACK","offset","limit","slice","debug","updateFilter"],"mappings":"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","sourcesContent":["import sortBy from 'lodash/sortBy';\nimport storeConstants from '@core/utils/constants/store';\nimport searchConstants from '@core/utils/constants/search';\nimport {\n    hasCustomCityLocation as searchObjectUtilsHasCustomCityLocation,\n    updateSearchWithCityLocationRange as searchObjectUtilsUpdateSearchWithCityLocationRange\n} from '@core/utils/searchObjectUtils';\nimport { isStoreOutDated as storeUtilsIsStoreOutDated } from '@core/utils/storeUtils';\nimport apiServiceTopEvents from '@core/api/apiServiceTopEvents';\nimport { normalizeEvent } from '@core/data/response/normalizeEvent';\nimport LogService from '@services/LogService';\n\nconst REFRESH_TIME = storeConstants.REFRESH_TIME;\n\n\nconst STORE_NAME = 'topEvents';\nconst ITEMS_PER_PAGE = 6;\n\nexport default {\n    name: STORE_NAME,\n    namespaced: true,\n    state: {\n        listView:          [], // will contain only the items show in the list\n        list:              [], // that will contain all 12 items\n        timestamp:          0,\n        loading:            0,\n        listFirstLoad:      false,\n        refresh:            false,\n        allItemsLoaded:     false,\n        filter:             { }\n    },\n    mutations: {\n        setLoading( state, loading ) {\n            state.loading = loading;\n        },\n        clearLists( state ) {\n            state.list = [ ];\n            state.listView = [ ];\n        },\n        appendPageToList( state, pageData ) {\n            state.timestamp = new Date( ).getTime( );\n            state.list = sortBy( [\n                ...state.list,\n                ...( pageData.map( normalizeEvent ) )\n            ], ( item ) => item.startDateTime );\n            state.listFirstLoad = true;\n        },\n        appendPageToListView( state, pageData ) {\n            state.listView = [\n                ...state.listView,\n                ...( pageData.map( normalizeEvent ) )\n            ];\n        },\n        setRefresh( state, refresh ) {\n            state.refresh = refresh;\n        },\n        setFilter( state, filter ) {\n            state.filter = {\n                ...state.filter,\n                ...filter\n            };\n        },\n        setAllItemsLoaded( state, allItemsLoaded ) {\n            state.allItemsLoaded = allItemsLoaded;\n        }\n    },\n\n    actions: {\n        get: async ( { commit, state }, { refresh = false, loadNextPage = false, filter = { }, userAnalytics = false } = { } ) => {\n            const needsRefresh = !loadNextPage && ( refresh || state.refresh || storeUtilsIsStoreOutDated( state.timestamp, REFRESH_TIME ) );\n            const getItemsFallback = async ( filter, options ) => {\n                const api = await apiServiceTopEvents( '' );\n\n                if ( searchObjectUtilsHasCustomCityLocation( filter ) ) {\n                    const response = await api.topEvents.get( searchObjectUtilsUpdateSearchWithCityLocationRange( filter, searchConstants.DEFAULT.LOCATION.RANGE.DEFAULT ), options );\n                    if ( response.success && response.data.list.length ) {\n                        return response;\n                    }\n                    return api.topEvents.get( searchObjectUtilsUpdateSearchWithCityLocationRange( filter, searchConstants.DEFAULT.LOCATION.RANGE.FALLBACK ), options );\n                }\n\n                return api.topEvents.get( filter, options );\n            };\n\n            loadNextPage || commit( 'setFilter', filter );\n            if ( !loadNextPage && needsRefresh ) {\n                commit( 'clearLists' );\n                commit( 'setAllItemsLoaded', false );\n            }\n            if ( needsRefresh ) {\n                commit( 'setLoading', state.loading + 1 );\n                const response = await getItemsFallback (\n                    {\n                        ...filter,\n                        offset: state.list.length,\n                        limit:  ITEMS_PER_PAGE * 2\n                    },\n                    {\n                        userAnalytics\n                    }\n                );\n                commit( 'setLoading', state.loading - 1 );\n                if ( response.success ) {\n                    if ( !state.loading ) {\n                        const { list } = response.data;\n                        commit( 'appendPageToList', list );\n                        commit( 'appendPageToListView', state.list.slice( 0, ITEMS_PER_PAGE ) );\n                        if ( state.listView.length < ITEMS_PER_PAGE ) {\n                            commit( 'setAllItemsLoaded', true );\n                        }\n                    }\n\n                    return state.list;\n                } else {\n                    LogService.debug( 'problem loading top events ' );\n                    return false;\n                }\n            } else {\n                if ( loadNextPage ) {\n                    commit( 'appendPageToListView', state.list.slice( ITEMS_PER_PAGE, state.list.length ) );\n                    commit( 'setAllItemsLoaded', true );\n                }\n            }\n        },\n        updateFilter( { commit }, filter ) {\n            commit( 'setFilter', filter );\n        },\n        needsRefresh( { commit } ) {\n            commit( 'setRefresh', true );\n        }\n    }\n};\n"]}]}