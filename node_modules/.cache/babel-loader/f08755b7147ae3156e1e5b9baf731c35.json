{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/lifestyle-ui/src/core/store/modules/user/userLocation.js","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/store/modules/user/userLocation.js","mtime":1645805363994},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/cristiandan/Desktop/lifestyle-ui/src/core/store/modules/user/userLocation.js"],"names":["i18next","apiMapLocationService","mutationTypes","LogService","STORE_NAME","name","namespaced","state","currentPosition","latitude","longitude","currentCity","stateCode","countryCode","existsInApi","getters","hasCurrentPosition","hasCurrentCity","currentCityLocation","location","current","mutations","setCurrentPosition","pos","setCurrentCity","city","clearCurrentCity","CLEAR","actions","getCurrentPosition","commit","dispatch","showMessages","refresh","Promise","resolve","navigator","geolocation","coords","error","code","PERMISSION_DENIED","t","root","debug","JSON","stringify","maximumAge","getCurrentCity","checkExistsInApi","getByPosition","result","success","data","message","getCurrentLocation","position","_persistent","getDataToSave","getDataToLoad"],"mappings":"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","sourcesContent":["import i18next from  'i18next';\nimport apiMapLocationService from '@core/api/apiMapLocation';\nimport mutationTypes from '@core/helpers/storeFactories/helpers/mutationTypes';\nimport LogService from '@services/LogService';\n\nconst STORE_NAME = 'location';\nexport default {\n    name: STORE_NAME,\n    namespaced: true,\n    state: {\n        currentPosition: {\n            latitude: null,\n            longitude: null\n        },\n        currentCity: {\n            name: null,\n            stateCode: null,\n            countryCode: null,\n            existsInApi: false\n        }\n    },\n    getters: {\n        currentPosition: state => {\n            if ( state.currentPosition && state.currentPosition.latitude && state.currentPosition.longitude ) {\n                return state.currentPosition;\n            }\n\n            return { };\n        },\n        hasCurrentPosition: state => state.currentPosition && state.currentPosition.latitude && state.currentPosition.longitude,\n        currentCity: state => {\n            if ( state.currentCity && state.currentCity.name  ) {\n                return state.currentCity;\n            }\n\n            return { };\n        },\n        hasCurrentCity: state => state.currentCity && state.currentCity.name && state.currentCity.countryCode,\n        currentCityLocation: ( state, getters ) => {\n            return {\n                ...getters.currentCity,\n                location: getters.hasCurrentPosition ? {\n                    current: true,\n                    ...getters.currentPosition\n                } : { }\n            };\n        }\n    },\n    mutations: {\n        setCurrentPosition: ( state, pos ) => {\n            state.currentPosition.latitude = pos.latitude;\n            state.currentPosition.longitude = pos.longitude;\n        },\n        setCurrentCity: ( state, city ) => {\n            state.currentCity.name = city.name;\n            state.currentCity.stateCode = city.stateCode;\n            state.currentCity.countryCode = city.countryCode;\n            state.currentCity.existsInApi = !!city.existsInApi;\n        },\n        clearCurrentCity: ( state ) => {\n            state.currentCity.name = null;\n            state.currentCity.stateCode = null;\n            state.currentCity.countryCode = null;\n            state.currentCity.existsInApi = false;\n        },\n        [mutationTypes.CLEAR]( state ) {\n            state.currentPosition = {\n                latitude: null,\n                longitude: null\n            };\n            state.currentCity = {\n                name: null,\n                stateCode: null,\n                countryCode: null,\n                existsInApi: false\n            };\n        }\n    },\n    actions: {\n        getCurrentPosition: async ( { commit, dispatch, state }, { showMessages = false, refresh = false } ) => {\n            return new Promise( ( resolve ) => {\n                navigator.geolocation.getCurrentPosition(\n                    ( pos ) => {\n                        const currentPosition  = state.currentPosition;\n                        const { latitude, longitude } = pos.coords;\n\n                        if ( latitude !== currentPosition.latitude || longitude !== currentPosition.longitude ) {\n                            commit( 'clearCurrentCity' );\n                        }\n                        commit( 'setCurrentPosition', { latitude, longitude } );\n                        resolve( pos.coords );\n                    },\n                    ( error ) => {\n                        if( error.code == error.PERMISSION_DENIED ) {\n                            commit( mutationTypes.CLEAR );\n                            !showMessages || dispatch( 'notification/error', i18next.t( '_common:messages.browserLocationPermissionError' ), { root: true } );\n                            LogService.debug( 'Geolocation: Need permission' );\n                        } else {\n                            !showMessages || dispatch( 'notification/error', i18next.t( '_common:messages.browserLocationError' ), { root: true } );\n                            LogService.debug( 'Geolocation: ', JSON.stringify( error ) );\n                        }\n\n                        resolve( false );\n                    },\n                    {\n                        maximumAge: refresh ? 0 : 1000 * 60 * 60 * 24,\n                    }\n                );\n            } );\n        },\n        getCurrentCity: async ( { commit, dispatch, getters, }, { showMessages = false, checkExistsInApi = true } ) => {\n            if ( !getters.hasCurrentPosition ) {\n                return false;\n            }\n            const result = await apiMapLocationService.city.getByPosition( getters.currentPosition.latitude, getters.currentPosition.longitude );\n\n            if ( result.success ) {\n                const { data } = result;\n                !checkExistsInApi || ( data.existsInApi = await dispatch( 'cities/exists', { city: data }, { root: true } ) );\n                commit( 'setCurrentCity', data );\n                return result.data;\n            } else {\n                !showMessages || dispatch( 'notification/error', result.message, { root: true } );\n                LogService.debug( 'Api Location Error', result.message );\n                return false;\n            }\n        },\n        getCurrentLocation: async ( { dispatch, getters }, { showMessages, refresh } ) => {\n            let city;\n            \n            if ( !await dispatch( 'getCurrentPosition', { showMessages, refresh } ) ) {\n                return false;\n            }\n            if ( !getters.hasCurrentCity ) {\n                city = await dispatch( 'getCurrentCity', { showMessages } );\n            } else {\n                city = getters.currentCity;\n            }\n\n            return {\n                position: getters.currentPosition,\n                city\n            };\n        }\n    },\n    _persistent: {\n        getDataToSave: ( state ) => {\n            return {\n                currentPosition: state[STORE_NAME].currentPosition,\n                currentCity: state[ STORE_NAME ].currentCity,\n            };\n        },\n        getDataToLoad: ( data ) => {\n            return {\n                currentPosition: data.currentPosition,\n                currentCity: data.currentCity,\n            };\n        }\n    }\n};"]}]}