{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceEvents.js","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceEvents.js","mtime":1645805363869},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2NyaXN0aWFuZGFuL0Rlc2t0b3AvcHJvaWVjdC1saWNlbnRhLWZyb250L25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgYXBpQ29uc3RhbnRzIGZyb20gJ0Bjb3JlL3V0aWxzL2NvbnN0YW50cy9hcGknOwppbXBvcnQgZmV0Y2ggZnJvbSAnQGNvcmUvdXRpbHMvZmV0Y2gnOwppbXBvcnQgeyBnZXREZWZhdWx0R2V0UGFyYW1zIGFzIGFwaVV0aWxzR2V0RGVmYXVsdEdldFBhcmFtcywgZ2V0RGVmYXVsdEdldFBhcmFtc1dpdGhDb3VudCBhcyBhcGlVdGlsc0dldERlZmF1bHRHZXRQYXJhbXNXaXRoQ291bnQsIG5vcm1hbGl6ZVF1ZXJ5UGFyYW1zV2l0aENpdHlMb2NhdGlvbiBhcyBhcGlVdGlsc05vcm1hbGl6ZVF1ZXJ5UGFyYW1zV2l0aENpdHlMb2NhdGlvbiwgbm9ybWFsaXplUXVlcnlQYXJhbXMgYXMgYXBpVXRpbHNOb3JtYWxpemVRdWVyeVBhcmFtcyB9IGZyb20gJ0Bjb3JlL3V0aWxzL2FwaVV0aWxzJzsKaW1wb3J0IHsgY3JlYXRlQXBpU2VydmljZSwgZmV0Y2hBUEkgfSBmcm9tICdAY29yZS9hcGkvX3V0aWxzJzsKdmFyIGRlZmF1bHRHZXRQYXJhbSA9IGFwaVV0aWxzR2V0RGVmYXVsdEdldFBhcmFtcygpOwp2YXIgZGVmYXVsdEdldFBhcmFtV2l0aENvdW50ID0gYXBpVXRpbHNHZXREZWZhdWx0R2V0UGFyYW1zV2l0aENvdW50KCk7CnZhciBhcGkgPSB7CiAgZ2V0Q2FuY2VsUmVxdWVzdDogZmV0Y2guZ2V0Q2FuY2VsUmVxdWVzdCwKICBldmVudHM6IHsKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdEdldFBhcmFtV2l0aENvdW50LAogICAgICAgICAgX3JlZiRjYXRlZ29yeUlkID0gX3JlZi5jYXRlZ29yeUlkLAogICAgICAgICAgY2F0ZWdvcnlJZCA9IF9yZWYkY2F0ZWdvcnlJZCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJGNhdGVnb3J5SWQsCiAgICAgICAgICBfcmVmJGNpdHkgPSBfcmVmLmNpdHksCiAgICAgICAgICBjaXR5ID0gX3JlZiRjaXR5ID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkY2l0eSwKICAgICAgICAgIF9yZWYka2V5d29yZCA9IF9yZWYua2V5d29yZCwKICAgICAgICAgIGtleXdvcmQgPSBfcmVmJGtleXdvcmQgPT09IHZvaWQgMCA/IGRlZmF1bHRHZXRQYXJhbS5rZXl3b3JkIDogX3JlZiRrZXl3b3JkLAogICAgICAgICAgX3JlZiRhdHRyYWN0aW9uSWQgPSBfcmVmLmF0dHJhY3Rpb25JZCwKICAgICAgICAgIGF0dHJhY3Rpb25JZCA9IF9yZWYkYXR0cmFjdGlvbklkID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkYXR0cmFjdGlvbklkLAogICAgICAgICAgX3JlZiRzdGFydERhdGUgPSBfcmVmLnN0YXJ0RGF0ZSwKICAgICAgICAgIHN0YXJ0RGF0ZSA9IF9yZWYkc3RhcnREYXRlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkc3RhcnREYXRlLAogICAgICAgICAgX3JlZiRlbmREYXRlID0gX3JlZi5lbmREYXRlLAogICAgICAgICAgZW5kRGF0ZSA9IF9yZWYkZW5kRGF0ZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmJGVuZERhdGUsCiAgICAgICAgICBfcmVmJHZlbnVlSWQgPSBfcmVmLnZlbnVlSWQsCiAgICAgICAgICB2ZW51ZUlkID0gX3JlZiR2ZW51ZUlkID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkdmVudWVJZCwKICAgICAgICAgIF9yZWYkbGltaXQgPSBfcmVmLmxpbWl0LAogICAgICAgICAgbGltaXQgPSBfcmVmJGxpbWl0ID09PSB2b2lkIDAgPyBkZWZhdWx0R2V0UGFyYW0ubGltaXQgOiBfcmVmJGxpbWl0LAogICAgICAgICAgX3JlZiRvZmZzZXQgPSBfcmVmLm9mZnNldCwKICAgICAgICAgIG9mZnNldCA9IF9yZWYkb2Zmc2V0ID09PSB2b2lkIDAgPyBkZWZhdWx0R2V0UGFyYW0ub2Zmc2V0IDogX3JlZiRvZmZzZXQsCiAgICAgICAgICBfcmVmJGNvdW50ID0gX3JlZi5jb3VudCwKICAgICAgICAgIGNvdW50ID0gX3JlZiRjb3VudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGNvdW50LAogICAgICAgICAgX3JlZiRzb3J0ID0gX3JlZi5zb3J0LAogICAgICAgICAgc29ydCA9IF9yZWYkc29ydCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNvcnQ7CgogICAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgdXNlckFuYWx5dGljcyA9IF9yZWYyLnVzZXJBbmFseXRpY3M7CgogICAgICB2YXIgX3JlZjMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LAogICAgICAgICAgY2FuY2VsVG9rZW4gPSBfcmVmMy5jYW5jZWxUb2tlbjsKCiAgICAgIHZhciBoZWFkZXJzID0ge307CiAgICAgIGlmICh1c2VyQW5hbHl0aWNzKSBoZWFkZXJzW2FwaUNvbnN0YW50cy5IRUFERVJTLkdTVF9BTkFMWVRJQ1NdID0gMTsKICAgICAgcmV0dXJuIGZldGNoQVBJLmdldExpc3QoIiIuY29uY2F0KGFwaUNvbnN0YW50cy5CQVNFX1VSTCwgIi9hcGkvcHJvZHVjdCIpLCBhcGlVdGlsc05vcm1hbGl6ZVF1ZXJ5UGFyYW1zV2l0aENpdHlMb2NhdGlvbih7CiAgICAgICAgY2F0ZWdvcnlJZDogY2F0ZWdvcnlJZCwKICAgICAgICBjaXR5OiBjaXR5LAogICAgICAgIGtleXdvcmQ6IGtleXdvcmQsCiAgICAgICAgYXR0cmFjdGlvbklkOiBhdHRyYWN0aW9uSWQsCiAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsCiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZSwKICAgICAgICB2ZW51ZUlkOiB2ZW51ZUlkLAogICAgICAgIGxpbWl0OiBsaW1pdCwKICAgICAgICBvZmZzZXQ6IG9mZnNldCwKICAgICAgICBjb3VudDogY291bnQsCiAgICAgICAgb3JkZXI6IHNvcnQudG9VcHBlckNhc2UoKQogICAgICB9KSwgaGVhZGVycywgewogICAgICAgIGNhbmNlbFRva2VuOiBjYW5jZWxUb2tlbgogICAgICB9KTsKICAgIH0sCiAgICBvbmU6IGZ1bmN0aW9uIG9uZShpZCkgewogICAgICB2YXIgX3JlZjQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgY2FuY2VsVG9rZW4gPSBfcmVmNC5jYW5jZWxUb2tlbjsKCiAgICAgIHZhciBoZWFkZXJzID0ge307CiAgICAgIGhlYWRlcnNbYXBpQ29uc3RhbnRzLkhFQURFUlMuR1NUX0FOQUxZVElDU10gPSAxOwogICAgICByZXR1cm4gZmV0Y2hBUEkuZ2V0KCIiLmNvbmNhdChhcGlDb25zdGFudHMuQkFTRV9VUkwsICIvYXBpL3Byb2R1Y3QvIikuY29uY2F0KGlkKSwge30sIGhlYWRlcnMsIHsKICAgICAgICBjYW5jZWxUb2tlbjogY2FuY2VsVG9rZW4KICAgICAgfSk7CiAgICB9LAogICAgb25lQnlMZWdhY3k6IGZ1bmN0aW9uIG9uZUJ5TGVnYWN5KF9yZWY1LCBjb25maWcpIHsKICAgICAgdmFyIGlkID0gX3JlZjUuaWQ7CiAgICAgIHZhciBoZWFkZXJzID0ge307CiAgICAgIGhlYWRlcnNbYXBpQ29uc3RhbnRzLkhFQURFUlMuR1NUX0FOQUxZVElDU10gPSAxOwogICAgICByZXR1cm4gZmV0Y2hBUEkuZ2V0KCIiLmNvbmNhdChhcGlDb25zdGFudHMuQkFTRV9VUkwsICIvYXBpL3Byb2R1Y3QvbGVnYWN5LyIpLmNvbmNhdChpZCksIHt9LCBoZWFkZXJzLCBjb25maWcpOwogICAgfSwKICAgIGNhbGN1bGF0ZUJvbnVzUG9pbnRzRWFybjogZnVuY3Rpb24gY2FsY3VsYXRlQm9udXNQb2ludHNFYXJuKGlkLCBfcmVmNikgewogICAgICB2YXIgYW1vdW50ID0gX3JlZjYuYW1vdW50OwogICAgICByZXR1cm4gZmV0Y2hBUEkucG9zdCgiIi5jb25jYXQoYXBpQ29uc3RhbnRzLkJBU0VfVVJMLCAiL2FwaS9jb21wdXRlL2Vhcm4vcG9pbnRzIiksIHsKICAgICAgICBwcm9kdWN0SWQ6IGlkLAogICAgICAgIGFtb3VudDogYW1vdW50CiAgICAgIH0pOwogICAgfSwKICAgIGluZm9ybWF0aW9uRGV0YWlsczogZnVuY3Rpb24gaW5mb3JtYXRpb25EZXRhaWxzKGlkKSB7CiAgICAgIHJldHVybiBmZXRjaEFQSS5nZXQoIiIuY29uY2F0KGFwaUNvbnN0YW50cy5CQVNFX1VSTCwgIi9hcGkvcHJvZHVjdC8iKS5jb25jYXQoaWQsICIvaW5mbyIpKTsKICAgIH0sCiAgICBkYXRlczogZnVuY3Rpb24gZGF0ZXMoaWQpIHsKICAgICAgdmFyIGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0R2V0UGFyYW0ubGltaXQ7CiAgICAgIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRlZmF1bHRHZXRQYXJhbS5vZmZzZXQ7CiAgICAgIHJldHVybiBmZXRjaEFQSS5nZXQoIiIuY29uY2F0KGFwaUNvbnN0YW50cy5CQVNFX1VSTCwgIi9hcGkvcHJvZHVjdC9kYXRlcyIpLCBhcGlVdGlsc05vcm1hbGl6ZVF1ZXJ5UGFyYW1zKHsKICAgICAgICBpZDogaWQsCiAgICAgICAgbGltaXQ6IGxpbWl0LAogICAgICAgIG9mZnNldDogb2Zmc2V0CiAgICAgIH0pKTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChfeCkgewogIHJldHVybiBfcmVmNy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfcmVmNygpIHsKICBfcmVmNyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShjb25maWcpIHsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgY3JlYXRlQXBpU2VydmljZShjb25maWcsIGFwaSkpOwoKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CiAgcmV0dXJuIF9yZWY3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0="},{"version":3,"sources":["/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceEvents.js"],"names":["apiConstants","fetch","getDefaultGetParams","apiUtilsGetDefaultGetParams","getDefaultGetParamsWithCount","apiUtilsGetDefaultGetParamsWithCount","normalizeQueryParamsWithCityLocation","apiUtilsNormalizeQueryParamsWithCityLocation","normalizeQueryParams","apiUtilsNormalizeQueryParams","createApiService","fetchAPI","defaultGetParam","defaultGetParamWithCount","api","getCancelRequest","events","get","categoryId","city","keyword","attractionId","startDate","endDate","venueId","limit","offset","count","sort","userAnalytics","cancelToken","headers","HEADERS","GST_ANALYTICS","getList","BASE_URL","order","toUpperCase","one","id","oneByLegacy","config","calculateBonusPointsEarn","amount","post","productId","informationDetails","dates"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SACIC,mBAAmB,IAAIC,2BAD3B,EAEIC,4BAA4B,IAAIC,oCAFpC,EAGIC,oCAAoC,IAAIC,4CAH5C,EAIIC,oBAAoB,IAAIC,4BAJ5B,QAKO,sBALP;AAMA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,kBAA3C;AAEA,IAAMC,eAAe,GAAGT,2BAA2B,EAAnD;AACA,IAAMU,wBAAwB,GAAGR,oCAAoC,EAArE;AAEA,IAAIS,GAAG,GAAG;AACNC,EAAAA,gBAAgB,EAAEd,KAAK,CAACc,gBADlB;AAENC,EAAAA,MAAM,EAAE;AACJC,IAAAA,GAAG,EAAE,eAgBA;AAAA,qFAHGJ,wBAGH;AAAA,iCAdGK,UAcH;AAAA,UAdGA,UAcH,gCAdgB,EAchB;AAAA,2BAbGC,IAaH;AAAA,UAbGA,IAaH,0BAbU,EAaV;AAAA,8BAZGC,OAYH;AAAA,UAZGA,OAYH,6BAZaR,eAAe,CAACQ,OAY7B;AAAA,mCAXGC,YAWH;AAAA,UAXGA,YAWH,kCAXkB,EAWlB;AAAA,gCAVGC,SAUH;AAAA,UAVGA,SAUH,+BAVc,EAUd;AAAA,8BATGC,OASH;AAAA,UATGA,OASH,6BATY,EASZ;AAAA,8BARGC,OAQH;AAAA,UARGA,OAQH,6BARa,EAQb;AAAA,4BAPGC,KAOH;AAAA,UAPGA,KAOH,2BAPWb,eAAe,CAACa,KAO3B;AAAA,6BANGC,MAMH;AAAA,UANGA,MAMH,4BANYd,eAAe,CAACc,MAM5B;AAAA,4BALGC,KAKH;AAAA,UALGA,KAKH,2BALW,KAKX;AAAA,2BAJGC,IAIH;AAAA,UAJGA,IAIH,0BAJU,EAIV;;AAAA,sFAFmB,EAEnB;AAAA,UAFCC,aAED,SAFCA,aAED;;AAAA,sFADiB,EACjB;AAAA,UADCC,WACD,SADCA,WACD;;AACD,UAAMC,OAAO,GAAG,EAAhB;AAEA,UAAKF,aAAL,EAAqBE,OAAO,CAAE/B,YAAY,CAACgC,OAAb,CAAqBC,aAAvB,CAAP,GAAgD,CAAhD;AAErB,aAAOtB,QAAQ,CAACuB,OAAT,WACAlC,YAAY,CAACmC,QADb,mBAEH5B,4CAA4C,CAAG;AAC3CW,QAAAA,UAAU,EAAVA,UAD2C;AAE3CC,QAAAA,IAAI,EAAJA,IAF2C;AAG3CC,QAAAA,OAAO,EAAPA,OAH2C;AAI3CC,QAAAA,YAAY,EAAZA,YAJ2C;AAK3CC,QAAAA,SAAS,EAATA,SAL2C;AAM3CC,QAAAA,OAAO,EAAPA,OAN2C;AAO3CC,QAAAA,OAAO,EAAPA,OAP2C;AAQ3CC,QAAAA,KAAK,EAALA,KAR2C;AAS3CC,QAAAA,MAAM,EAANA,MAT2C;AAU3CC,QAAAA,KAAK,EAALA,KAV2C;AAW3CS,QAAAA,KAAK,EAAER,IAAI,CAACS,WAAL;AAXoC,OAAH,CAFzC,EAeHN,OAfG,EAgBH;AACID,QAAAA,WAAW,EAAXA;AADJ,OAhBG,CAAP;AAoBH,KA1CG;AA2CJQ,IAAAA,GAAG,EAAE,aACDC,EADC,EAGA;AAAA,sFADiB,EACjB;AAAA,UADCT,WACD,SADCA,WACD;;AACD,UAAMC,OAAO,GAAG,EAAhB;AAEAA,MAAAA,OAAO,CAAE/B,YAAY,CAACgC,OAAb,CAAqBC,aAAvB,CAAP,GAAgD,CAAhD;AAEA,aAAOtB,QAAQ,CAACM,GAAT,WACAjB,YAAY,CAACmC,QADb,0BACqCI,EADrC,GAEH,EAFG,EAGHR,OAHG,EAIH;AACID,QAAAA,WAAW,EAAXA;AADJ,OAJG,CAAP;AAQH,KA3DG;AA4DJU,IAAAA,WAAW,EAAE,4BAAUC,MAAV,EAAsB;AAAA,UAAlBF,EAAkB,SAAlBA,EAAkB;AAC/B,UAAMR,OAAO,GAAG,EAAhB;AAEAA,MAAAA,OAAO,CAAE/B,YAAY,CAACgC,OAAb,CAAqBC,aAAvB,CAAP,GAAgD,CAAhD;AAEA,aAAOtB,QAAQ,CAACM,GAAT,WAAiBjB,YAAY,CAACmC,QAA9B,iCAA6DI,EAA7D,GAAmE,EAAnE,EAAwER,OAAxE,EAAiFU,MAAjF,CAAP;AACH,KAlEG;AAmEJC,IAAAA,wBAAwB,EAAE,kCAAEH,EAAF,SAAsB;AAAA,UAAdI,MAAc,SAAdA,MAAc;AAC5C,aAAOhC,QAAQ,CAACiC,IAAT,WAAkB5C,YAAY,CAACmC,QAA/B,+BAAmE;AAAEU,QAAAA,SAAS,EAAEN,EAAb;AAAiBI,QAAAA,MAAM,EAANA;AAAjB,OAAnE,CAAP;AACH,KArEG;AAsEJG,IAAAA,kBAAkB,EAAE,4BAAEP,EAAF,EAAW;AAC3B,aAAO5B,QAAQ,CAACM,GAAT,WAAiBjB,YAAY,CAACmC,QAA9B,0BAAsDI,EAAtD,WAAP;AACH,KAxEG;AAyEJQ,IAAAA,KAAK,EAAE,eAAER,EAAF,EAA0E;AAAA,UAApEd,KAAoE,uEAA5Db,eAAe,CAACa,KAA4C;AAAA,UAArCC,MAAqC,uEAA5Bd,eAAe,CAACc,MAAY;AAC7E,aAAOf,QAAQ,CAACM,GAAT,WAAiBjB,YAAY,CAACmC,QAA9B,yBAA4D1B,4BAA4B,CAAE;AAAE8B,QAAAA,EAAE,EAAFA,EAAF;AAAMd,QAAAA,KAAK,EAALA,KAAN;AAAaC,QAAAA,MAAM,EAANA;AAAb,OAAF,CAAxF,CAAP;AACH;AA3EG;AAFF,CAAV;AAiFA;AAAA;AAAA;;;kEAAe,iBAAiBe,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,6CACJ/B,gBAAgB,CAAE+B,MAAF,EAAU3B,GAAV,CADZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import apiConstants from '@core/utils/constants/api';\nimport fetch from '@core/utils/fetch';\nimport {\n    getDefaultGetParams as apiUtilsGetDefaultGetParams,\n    getDefaultGetParamsWithCount as apiUtilsGetDefaultGetParamsWithCount,\n    normalizeQueryParamsWithCityLocation as apiUtilsNormalizeQueryParamsWithCityLocation,\n    normalizeQueryParams as apiUtilsNormalizeQueryParams,\n} from '@core/utils/apiUtils';\nimport { createApiService, fetchAPI } from '@core/api/_utils';\n\nconst defaultGetParam = apiUtilsGetDefaultGetParams( );\nconst defaultGetParamWithCount = apiUtilsGetDefaultGetParamsWithCount( );\n\nlet api = {\n    getCancelRequest: fetch.getCancelRequest,\n    events: {\n        get: (\n            {\n                categoryId = '',\n                city = {},\n                keyword = defaultGetParam.keyword,\n                attractionId = '',\n                startDate= '',\n                endDate= '',\n                venueId = '',\n                limit = defaultGetParam.limit,\n                offset = defaultGetParam.offset,\n                count = false,\n                sort = '',\n            } = defaultGetParamWithCount,\n            { userAnalytics } = { },\n            { cancelToken } = { }\n        ) => {\n            const headers = { };\n\n            if ( userAnalytics ) headers[ apiConstants.HEADERS.GST_ANALYTICS ] = 1;\n\n            return fetchAPI.getList(\n                `${apiConstants.BASE_URL}/api/product`,\n                apiUtilsNormalizeQueryParamsWithCityLocation ( {\n                    categoryId,\n                    city,\n                    keyword,\n                    attractionId,\n                    startDate,\n                    endDate,\n                    venueId,\n                    limit,\n                    offset,\n                    count,\n                    order: sort.toUpperCase( )\n                } ),\n                headers,\n                {\n                    cancelToken\n                }\n            );\n        },\n        one: (\n            id,\n            { cancelToken } = { }\n        ) => {\n            const headers = { };\n\n            headers[ apiConstants.HEADERS.GST_ANALYTICS ] = 1;\n\n            return fetchAPI.get(\n                `${apiConstants.BASE_URL}/api/product/${id}`,\n                {},\n                headers,\n                {\n                    cancelToken\n                }\n            );\n        },\n        oneByLegacy: ( { id }, config ) => {\n            const headers = { };\n\n            headers[ apiConstants.HEADERS.GST_ANALYTICS ] = 1;\n\n            return fetchAPI.get( `${apiConstants.BASE_URL}/api/product/legacy/${id}`, { }, headers, config );\n        },\n        calculateBonusPointsEarn: ( id, { amount } ) => {\n            return fetchAPI.post( `${apiConstants.BASE_URL}/api/compute/earn/points`, { productId: id, amount } );\n        },\n        informationDetails: ( id )  => {\n            return fetchAPI.get( `${apiConstants.BASE_URL}/api/product/${id}/info` );\n        },\n        dates: ( id, limit = defaultGetParam.limit, offset = defaultGetParam.offset ) => {\n            return fetchAPI.get( `${apiConstants.BASE_URL}/api/product/dates`, apiUtilsNormalizeQueryParams( { id, limit, offset } ) );\n        }\n    }\n};\n\nexport default async function ( config ) {\n    return createApiService( config, api );\n}"]}]}