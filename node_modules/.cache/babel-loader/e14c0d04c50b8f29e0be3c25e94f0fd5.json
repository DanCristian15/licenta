{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceTopEvents.js","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceTopEvents.js","mtime":1645805363871},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL2NyaXN0aWFuZGFuL0Rlc2t0b3AvcHJvaWVjdC1saWNlbnRhLWZyb250L25vZGVfbW9kdWxlcy9AdnVlL2JhYmVsLXByZXNldC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvY3Jpc3RpYW5kYW4vRGVza3RvcC9wcm9pZWN0LWxpY2VudGEtZnJvbnQvbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBhcGlDb25zdGFudHMgZnJvbSAnQGNvcmUvdXRpbHMvY29uc3RhbnRzL2FwaSc7CmltcG9ydCBjb3VudHJ5Q29uc3RhbnRzIGZyb20gJ0Bjb3JlL3V0aWxzL2NvbnN0YW50cy9jb3VudHJ5JzsKaW1wb3J0IGZldGNoIGZyb20gJ0Bjb3JlL3V0aWxzL2ZldGNoJzsKaW1wb3J0IHsgZ2V0RGVmYXVsdEdldFBhcmFtcyBhcyBhcGlVdGlsc0dldERlZmF1bHRHZXRQYXJhbXMsIG5vcm1hbGl6ZVF1ZXJ5UGFyYW1zV2l0aENpdHlMb2NhdGlvbiBhcyBhcGlVdGlsc05vcm1hbGl6ZVF1ZXJ5UGFyYW1zV2l0aENpdHlMb2NhdGlvbiB9IGZyb20gJ0Bjb3JlL3V0aWxzL2FwaVV0aWxzJzsKaW1wb3J0IHsgY3JlYXRlQXBpU2VydmljZSwgZmV0Y2hBUEkgfSBmcm9tICdAY29yZS9hcGkvX3V0aWxzJzsKdmFyIGRlZmF1bHRHZXRQYXJhbSA9IGFwaVV0aWxzR2V0RGVmYXVsdEdldFBhcmFtcygpOwp2YXIgZGVmYXVsdENvdW50cnlDb2RlID0gY291bnRyeUNvbnN0YW50cy5ERUZBVUxULmNvdW50cnlDb2RlOwp2YXIgYXBpID0gewogIGdldENhbmNlbFJlcXVlc3Q6IGZldGNoLmdldENhbmNlbFJlcXVlc3QsCiAgdG9wRXZlbnRzOiB7CiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGRlZmF1bHRHZXRQYXJhbSwKICAgICAgICAgIF9yZWYkY2l0eSA9IF9yZWYuY2l0eSwKICAgICAgICAgIGNpdHkgPSBfcmVmJGNpdHkgPT09IHZvaWQgMCA/IHt9IDogX3JlZiRjaXR5LAogICAgICAgICAgX3JlZiRrZXl3b3JkID0gX3JlZi5rZXl3b3JkLAogICAgICAgICAga2V5d29yZCA9IF9yZWYka2V5d29yZCA9PT0gdm9pZCAwID8gZGVmYXVsdEdldFBhcmFtLmtleXdvcmQgOiBfcmVmJGtleXdvcmQsCiAgICAgICAgICBfcmVmJGxpbWl0ID0gX3JlZi5saW1pdCwKICAgICAgICAgIGxpbWl0ID0gX3JlZiRsaW1pdCA9PT0gdm9pZCAwID8gZGVmYXVsdEdldFBhcmFtLmxpbWl0IDogX3JlZiRsaW1pdCwKICAgICAgICAgIF9yZWYkb2Zmc2V0ID0gX3JlZi5vZmZzZXQsCiAgICAgICAgICBvZmZzZXQgPSBfcmVmJG9mZnNldCA9PT0gdm9pZCAwID8gZGVmYXVsdEdldFBhcmFtLm9mZnNldCA6IF9yZWYkb2Zmc2V0LAogICAgICAgICAgX3JlZiRhdHRyYWN0aW9uSWQgPSBfcmVmLmF0dHJhY3Rpb25JZCwKICAgICAgICAgIGF0dHJhY3Rpb25JZCA9IF9yZWYkYXR0cmFjdGlvbklkID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkYXR0cmFjdGlvbklkLAogICAgICAgICAgX3JlZiRzdGFydERhdGUgPSBfcmVmLnN0YXJ0RGF0ZSwKICAgICAgICAgIHN0YXJ0RGF0ZSA9IF9yZWYkc3RhcnREYXRlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkc3RhcnREYXRlLAogICAgICAgICAgX3JlZiRlbmREYXRlID0gX3JlZi5lbmREYXRlLAogICAgICAgICAgZW5kRGF0ZSA9IF9yZWYkZW5kRGF0ZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmJGVuZERhdGUsCiAgICAgICAgICBfcmVmJGNvdW50cnlDb2RlID0gX3JlZi5jb3VudHJ5Q29kZSwKICAgICAgICAgIGNvdW50cnlDb2RlID0gX3JlZiRjb3VudHJ5Q29kZSA9PT0gdm9pZCAwID8gZGVmYXVsdENvdW50cnlDb2RlIDogX3JlZiRjb3VudHJ5Q29kZSwKICAgICAgICAgIHNlYXJjaCA9IF9yZWYuc2VhcmNoOwoKICAgICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIHVzZXJBbmFseXRpY3MgPSBfcmVmMi51c2VyQW5hbHl0aWNzOwoKICAgICAgdmFyIHRyYW5zZm9ybVNlYXJjaCA9IGZ1bmN0aW9uIHRyYW5zZm9ybVNlYXJjaCgpIHsKICAgICAgICBpZiAoIXNlYXJjaCB8fCAhc2VhcmNoLnNwbGl0KSB7CiAgICAgICAgICByZXR1cm4ge307CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBzZWFyY2hBcnIgPSBzZWFyY2guc3BsaXQoJz0nKTsKICAgICAgICAgIHZhciByZXQgPSB7fTsKICAgICAgICAgIHJldFtzZWFyY2hBcnJbMF1dID0gc2VhcmNoQXJyWzFdOwogICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9CiAgICAgIH07CgogICAgICB2YXIgaGVhZGVycyA9IHt9OwogICAgICBpZiAodXNlckFuYWx5dGljcykgaWYgKHVzZXJBbmFseXRpY3MpIGhlYWRlcnNbYXBpQ29uc3RhbnRzLkhFQURFUlMuR1NUX0FOQUxZVElDU10gPSAxOwogICAgICByZXR1cm4gZmV0Y2hBUEkuZ2V0TGlzdCgiIi5jb25jYXQoYXBpQ29uc3RhbnRzLkJBU0VfVVJMLCAiL2FwaS9wcm9kdWN0L3BvcHVsYXIiKSwgYXBpVXRpbHNOb3JtYWxpemVRdWVyeVBhcmFtc1dpdGhDaXR5TG9jYXRpb24oX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0cmFuc2Zvcm1TZWFyY2goKSksIHt9LCB7CiAgICAgICAgY2l0eTogY2l0eSwKICAgICAgICBrZXl3b3JkOiBrZXl3b3JkLAogICAgICAgIGxpbWl0OiBsaW1pdCwKICAgICAgICBvZmZzZXQ6IG9mZnNldCwKICAgICAgICBhdHRyYWN0aW9uSWQ6IGF0dHJhY3Rpb25JZCwKICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSwKICAgICAgICBlbmREYXRlOiBlbmREYXRlLAogICAgICAgIGNvdW50cnlDb2RlOiBjb3VudHJ5Q29kZQogICAgICB9KSksIGhlYWRlcnMpOwogICAgfQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKF94KSB7CiAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9yZWYzKCkgewogIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGNvbmZpZykgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBjcmVhdGVBcGlTZXJ2aWNlKGNvbmZpZywgYXBpKSk7CgogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},{"version":3,"sources":["/Users/cristiandan/Desktop/proiect-licenta-front/src/core/api/apiServiceTopEvents.js"],"names":["apiConstants","countryConstants","fetch","getDefaultGetParams","apiUtilsGetDefaultGetParams","normalizeQueryParamsWithCityLocation","apiUtilsNormalizeQueryParamsWithCityLocation","createApiService","fetchAPI","defaultGetParam","defaultCountryCode","DEFAULT","countryCode","api","getCancelRequest","topEvents","get","city","keyword","limit","offset","attractionId","startDate","endDate","search","userAnalytics","transformSearch","split","searchArr","ret","headers","HEADERS","GST_ANALYTICS","getList","BASE_URL","config"],"mappings":";;;;;;AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SACIC,mBAAmB,IAAIC,2BAD3B,EAEIC,oCAAoC,IAAIC,4CAF5C,QAGO,sBAHP;AAIA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,kBAA3C;AAEA,IAAMC,eAAe,GAAGL,2BAA2B,EAAnD;AACA,IAAMM,kBAAkB,GAAGT,gBAAgB,CAACU,OAAjB,CAAyBC,WAApD;AAEA,IAAIC,GAAG,GAAG;AACNC,EAAAA,gBAAgB,EAAEZ,KAAK,CAACY,gBADlB;AAENC,EAAAA,SAAS,EAAE;AACPC,IAAAA,GAAG,EAAE,eAY4B;AAAA,qFADzBP,eACyB;AAAA,2BAVzBQ,IAUyB;AAAA,UAVzBA,IAUyB,0BAVlB,EAUkB;AAAA,8BATzBC,OASyB;AAAA,UATzBA,OASyB,6BATfT,eAAe,CAACS,OASD;AAAA,4BARzBC,KAQyB;AAAA,UARzBA,KAQyB,2BARjBV,eAAe,CAACU,KAQC;AAAA,6BAPzBC,MAOyB;AAAA,UAPzBA,MAOyB,4BAPhBX,eAAe,CAACW,MAOA;AAAA,mCANzBC,YAMyB;AAAA,UANzBA,YAMyB,kCANV,EAMU;AAAA,gCALzBC,SAKyB;AAAA,UALzBA,SAKyB,+BALd,EAKc;AAAA,8BAJzBC,OAIyB;AAAA,UAJzBA,OAIyB,6BAJhB,EAIgB;AAAA,kCAHzBX,WAGyB;AAAA,UAHzBA,WAGyB,iCAHXF,kBAGW;AAAA,UAFzBc,MAEyB,QAFzBA,MAEyB;;AAAA,sFAAT,EAAS;AAAA,UAA3BC,aAA2B,SAA3BA,aAA2B;;AAC7B,UAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAO;AAC3B,YAAK,CAACF,MAAD,IAAW,CAACA,MAAM,CAACG,KAAxB,EAAgC;AAC5B,iBAAO,EAAP;AACH,SAFD,MAEO;AACH,cAAIC,SAAS,GAAGJ,MAAM,CAACG,KAAP,CAAc,GAAd,CAAhB;AACA,cAAIE,GAAG,GAAG,EAAV;AACAA,UAAAA,GAAG,CAAED,SAAS,CAAC,CAAD,CAAX,CAAH,GAAsBA,SAAS,CAAE,CAAF,CAA/B;AAEA,iBAAOC,GAAP;AACH;AACJ,OAVD;;AAYA,UAAMC,OAAO,GAAG,EAAhB;AACA,UAAKL,aAAL,EAAqB,IAAKA,aAAL,EAAqBK,OAAO,CAAC9B,YAAY,CAAC+B,OAAb,CAAqBC,aAAtB,CAAP,GAA8C,CAA9C;AAE1C,aAAOxB,QAAQ,CAACyB,OAAT,WACAjC,YAAY,CAACkC,QADb,2BAEH5B,4CAA4C,iCACrCoB,eAAe,EADsB;AAExCT,QAAAA,IAAI,EAAJA,IAFwC;AAGxCC,QAAAA,OAAO,EAAPA,OAHwC;AAIxCC,QAAAA,KAAK,EAALA,KAJwC;AAKxCC,QAAAA,MAAM,EAANA,MALwC;AAMxCC,QAAAA,YAAY,EAAZA,YANwC;AAOxCC,QAAAA,SAAS,EAATA,SAPwC;AAQxCC,QAAAA,OAAO,EAAPA,OARwC;AASxCX,QAAAA,WAAW,EAAXA;AATwC,SAFzC,EAaHkB,OAbG,CAAP;AAeH;AA5CM;AAFL,CAAV;AAkDA;AAAA;AAAA;;;kEAAe,iBAAiBK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,6CACJ5B,gBAAgB,CAAE4B,MAAF,EAAUtB,GAAV,CADZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import apiConstants from '@core/utils/constants/api';\nimport countryConstants from '@core/utils/constants/country';\nimport fetch from '@core/utils/fetch';\nimport {\n    getDefaultGetParams as apiUtilsGetDefaultGetParams,\n    normalizeQueryParamsWithCityLocation as apiUtilsNormalizeQueryParamsWithCityLocation,\n} from '@core/utils/apiUtils';\nimport { createApiService, fetchAPI } from '@core/api/_utils';\n\nconst defaultGetParam = apiUtilsGetDefaultGetParams( );\nconst defaultCountryCode = countryConstants.DEFAULT.countryCode;\n\nlet api = {\n    getCancelRequest: fetch.getCancelRequest,\n    topEvents: {\n        get: (\n            {\n                city = {},\n                keyword = defaultGetParam.keyword,\n                limit = defaultGetParam.limit,\n                offset = defaultGetParam.offset,\n                attractionId = '',\n                startDate= '',\n                endDate= '',\n                countryCode = defaultCountryCode,\n                search\n            } = defaultGetParam,\n            { userAnalytics } = { } ) => {\n            const transformSearch = ( ) => {\n                if ( !search || !search.split ) {\n                    return { };\n                } else {\n                    let searchArr = search.split( '=' );\n                    let ret = { };\n                    ret [searchArr[0] ] = searchArr[ 1 ];\n\n                    return ret;\n                }\n            };\n\n            const headers = { };\n            if ( userAnalytics ) if ( userAnalytics ) headers[apiConstants.HEADERS.GST_ANALYTICS] = 1;\n\n            return fetchAPI.getList(\n                `${apiConstants.BASE_URL}/api/product/popular`,\n                apiUtilsNormalizeQueryParamsWithCityLocation( {\n                    ...transformSearch( ),\n                    city,\n                    keyword,\n                    limit,\n                    offset,\n                    attractionId,\n                    startDate,\n                    endDate,\n                    countryCode\n                } ),\n                headers\n            );\n        }\n    }\n};\n\nexport default async function ( config ) {\n    return createApiService( config, api );\n}"]}]}