{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/lifestyle-ui/src/core/helpers/storeModuleFactory.js","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/helpers/storeModuleFactory.js","mtime":1645805363895},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/cristiandan/Desktop/lifestyle-ui/src/core/helpers/storeModuleFactory.js"],"names":["storeConstants","isStoreOutDated","storeUtilsIsStoreOutDated","LogService","mutationTypes","defaultApi","api","get","createModuleView","storeName","options","overrides","defaultState","list","totalCount","timestamp","loading","allItemsLoaded","refresh","detail","actionGetOptionsDefault","offset","limit","ITEMS_PER_PAGE","mapListItemFn","module","name","namespaced","state","getters","isLoading","mutations","APPEND_TO_LIST","pageData","Date","getTime","map","CLEAR_LIST","SET_LOADING","SET_TOTAL_COUNT","SET_REFRESH","SET_ALL_ITEMS_LOADED","SET_DETAIL","actions","commit","needsRefresh","REFRESH_TIME","filter","sort","response","success","data","length","pop","debug","getRaw","context","item","one","id","setRefreshIfOutdated","setRefresh","Object","assign","modules"],"mappings":"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","sourcesContent":["import storeConstants from '@core/utils/constants/store';\nimport { isStoreOutDated as storeUtilsIsStoreOutDated } from '@core/utils/storeUtils';\nimport LogService from '@core/services/LogService';\nimport mutationTypes from './storeFactories/helpers/mutationTypes';\n\nconst defaultApi = {\n    api: {\n        get: '', // function from api\n    },\n};\n\n/**\n *\n * @param {string} storeName\n * @param {Object} api\n * @param {Object} config\n *  - actionGetOptionsDefault - options that will be put on the get action - default { refresh: true, cache: false }\n *  - mapListItemFn - function to remap the items\n * @param {Object} overrides\n *  - getOptions - default options for get Action\n *  - state - overrides default state\n *  - getters - overrides getters\n *  - mutations - overrides the mutations\n *  - actions - overrides the actions\n */\nconst createModuleView  = ( storeName, api = defaultApi, options = { }, overrides = { } ) => {\n    const defaultState = {\n        list:               [],\n        totalCount:         0,\n        timestamp:          0,\n        loading:            0,\n        allItemsLoaded: false,\n        refresh:            false,\n        detail:             {}\n    };\n\n    let actionGetOptionsDefault = options && options.actionGetOptionsDefault ? options.actionGetOptionsDefault : {\n            refresh: true,\n            offset: 0,\n            limit: storeConstants.ITEMS_PER_PAGE\n        },\n        mapListItemFn = options && options.mapListItemFn ? options.mapListItemFn : false;\n\n    const module = {\n        name: storeName,\n        namespaced: true,\n        state: { ...defaultState, ...overrides.state },\n        getters: {\n            isLoading: state => !!state.loading,\n        },\n        mutations: {\n            [ mutationTypes.APPEND_TO_LIST ] ( state, pageData ) {\n                state.timestamp = new Date( ).getTime( );\n                state.list = [\n                    ...state.list,\n                    ...( mapListItemFn ? pageData.map( mapListItemFn ) : pageData )\n                ];\n            },\n            [ mutationTypes.CLEAR_LIST ] ( state ) {\n                state.list = [ ];\n            },\n            [ mutationTypes.SET_LOADING ]( state, loading ) {\n                state.loading = loading;\n            },\n            [ mutationTypes.SET_TOTAL_COUNT ] ( state, totalCount ) {\n                state.totalCount = totalCount;\n            },\n            [ mutationTypes.SET_REFRESH ] ( state, refresh ) {\n                state.refresh = refresh;\n            },\n            [ mutationTypes.SET_ALL_ITEMS_LOADED ] ( state, allItemsLoaded ) {\n                state.allItemsLoaded = allItemsLoaded;\n            },\n            [ mutationTypes.SET_DETAIL ] ( state, detail ) {\n                state.detail = detail;\n            }\n        },\n        actions: {\n            get: async ( { commit, state }, options = actionGetOptionsDefault ) => {\n\n                const needsRefresh = options.refresh || state.refresh || storeUtilsIsStoreOutDated ( state.timestamp, storeConstants.REFRESH_TIME );\n\n                if ( needsRefresh ) {\n                    commit( mutationTypes.CLEAR_LIST );\n                    commit( mutationTypes.SET_TOTAL_COUNT, 0 );\n                    commit( mutationTypes.SET_ALL_ITEMS_LOADED, false );\n                }\n\n                commit( mutationTypes.SET_LOADING, state.loading + 1 );\n\n                const response = await api.get ( {\n                    offset: options.offset,\n                    limit:  options.limit + 1,\n                    filter: options.filter,\n                    sort: options.sort\n                } );\n\n                if ( response.success ) {\n                    let { list } = response.data;\n\n                    if ( list.length <  options.limit + 1 ) {\n                        commit( mutationTypes.SET_ALL_ITEMS_LOADED, true );\n                    } else if ( list.length ===  options.limit + 1 ) {\n                        list.pop();\n                    }\n\n                    if ( needsRefresh ) {\n                        commit( mutationTypes.CLEAR_LIST );\n                    }\n\n                    commit( mutationTypes.SET_TOTAL_COUNT, list.length + state.totalCount );\n                    commit( mutationTypes.APPEND_TO_LIST, list );\n                    commit( mutationTypes.SET_LOADING, state.loading - 1 );\n\n                    return response.data;\n                } else {\n                    commit( mutationTypes.SET_LOADING, state.loading - 1 );\n                    commit( mutationTypes.SET_ALL_ITEMS_LOADED, true );\n                    LogService.debug( `problem loading ${storeName}` );\n                    return false;\n                }\n            },\n            async getRaw( context, options = { } ) {\n                const response = await api.get ( {\n                    offset: options.offset,\n                    limit:  options.limit + 1,\n                    filter: options.filter,\n                    sort: options.sort\n                } );\n\n                if ( response.success ) {\n                    return {\n                        ...response,\n                        data: {\n                            ...response.data,\n                            list: response.data.list.map ( item => mapListItemFn ? mapListItemFn( item ) : item )\n                        }\n                    };\n                } else {\n                    return response;\n                }\n            },\n            async one ( { commit }, id  ) {\n                const response = await api.one( id );\n\n                if ( response.success ) {\n                    commit( mutationTypes.SET_DETAIL, response.data );\n                    return response.data;\n                } else {\n                    LogService.debug( `problems loading detail on ${storeName}, id: ${id}` );\n                    return false;\n                }\n            },\n            setRefreshIfOutdated( { commit, state }, timestamp ) {\n                if ( timestamp > state.timestamp ) {\n                    commit( mutationTypes.SET_REFRESH, true );\n                }\n            },\n            setRefresh( { commit }, refresh ) {\n                commit( mutationTypes.SET_REFRESH, refresh );\n            }\n        }\n    };\n\n    !overrides.getters || Object.assign( module.getters, overrides.getters );\n    !overrides.mutations || Object.assign( module.mutations, overrides.mutations );\n    !overrides.actions || Object.assign( module.actions, overrides.actions );\n    !overrides.modules || ( module.modules = overrides.modules );\n\n    return module;\n};\n\nexport default  {\n    mutationTypes,\n    createModuleView\n};\n"]}]}