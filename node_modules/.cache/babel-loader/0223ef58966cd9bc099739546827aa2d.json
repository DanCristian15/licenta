{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/lifestyle-ui/src/core/filters/distance.js","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/filters/distance.js","mtime":1645805363889},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGkxOG5leHQgZnJvbSAnaTE4bmV4dCc7CmltcG9ydCB7IGNvbnZlcnREaXN0YW5jZSB9IGZyb20gJ0Bjb3JlL3V0aWxzL21lYXN1cmVVdGlscyc7CmltcG9ydCBudW1iZXIgZnJvbSAnLi9udW1iZXInOwovKioKICogQ29udmVydCBkaXN0YW5jZSB1bml0IGFuZCByZXR1cm4gdGhlIGZvcm1hdHRlZCBudW1iZXIgKCBkaXN0YW5jZSBzaG91bGQgYmUgaW4ga20pCiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gZGlzdGFuY2UgLSBkaXN0YW5jZSB2YWx1ZQogKiBAcGFyYW0ge1VOSVQuTUlMRVN9ICAgIHRvIC0gdGhlIHVuaXQgaW4gd2hpY2ggdGhlIGRpc3RhbmNlIHNob3VsZCBiZSBjb252ZXJ0ZWQKICogQHJldHVybnMge1N0cmluZ30KICovCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXN0YW5jZShkaXN0YW5jZSwgdG8pIHsKICB2YXIgZGlzdCA9IGNvbnZlcnREaXN0YW5jZShkaXN0YW5jZSwgdG8pOwogIHJldHVybiBpMThuZXh0LnQoJ19jb21tb246dGVybXMuZGlzdGFuY2UnLCB7CiAgICBkaXN0YW5jZTogbnVtYmVyKGRpc3QsICcwLDAuMCcpLAogICAgY29udGV4dDogdG8KICB9KTsKfQ=="},{"version":3,"sources":["/Users/cristiandan/Desktop/lifestyle-ui/src/core/filters/distance.js"],"names":["i18next","convertDistance","number","distance","to","dist","t","context"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,QAAT,CAAoBA,QAApB,EAA8BC,EAA9B,EAAmC;AAC9C,MAAMC,IAAI,GAAGJ,eAAe,CAAEE,QAAF,EAAYC,EAAZ,CAA5B;AAEA,SAAOJ,OAAO,CAACM,CAAR,CACH,wBADG,EACuB;AACtBH,IAAAA,QAAQ,EAAED,MAAM,CAAEG,IAAF,EAAQ,OAAR,CADM;AAEtBE,IAAAA,OAAO,EAAEH;AAFa,GADvB,CAAP;AAKH","sourcesContent":["import i18next from 'i18next';\nimport { convertDistance } from '@core/utils/measureUtils';\nimport number from './number';\n\n/**\n * Convert distance unit and return the formatted number ( distance should be in km)\n * @param {Number|String} distance - distance value\n * @param {UNIT.MILES}    to - the unit in which the distance should be converted\n * @returns {String}\n */\nexport default function distance ( distance, to ) {\n    const dist = convertDistance( distance, to );\n\n    return i18next.t(\n        '_common:terms.distance', {\n            distance: number( dist, '0,0.0' ),\n            context: to,\n        } );\n}\n"]}]}