{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/lifestyle-ui/src/core/utils/searchUtils.js","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/utils/searchUtils.js","mtime":1645805364010},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9jcmlzdGlhbmRhbi9EZXNrdG9wL2xpZmVzdHlsZS11aS9ub2RlX21vZHVsZXMvQHZ1ZS9iYWJlbC1wcmVzZXQtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IHN0YXJ0T2ZUb2RheSBmcm9tICdkYXRlLWZucy9zdGFydE9mVG9kYXknOwppbXBvcnQgeyBpc1dpdGhpbkludGVydmFsIGFzIGRhdGVVdGlsc0lzV2l0aGluSW50ZXJ2YWwsIHBhcnNlU3RyaW5nIGFzIGRhdGVVdGlsc1BhcnNlU3RyaW5nLCBmb3JtYXRRdWVyeVBhcmFtIGFzIGRhdGVVdGlsc0Zvcm1hdFF1ZXJ5UGFyYW0sIGlzVmFsaWQgYXMgZGF0ZVV0aWxzSXNWYWxpZCB9IGZyb20gJ0Bjb3JlL3V0aWxzL2RhdGVVdGlscyc7CmltcG9ydCBkYXRlQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzL2RhdGUnOwppbXBvcnQgeyBoYXNDaXR5IGFzIHNlYXJjaE9iamVjdFV0aWxzSGFzQ2l0eSwgaGFzQ3VzdG9tQ2l0eUxvY2F0aW9uIGFzIHNlYXJjaE9iamVjdFV0aWxzSGFzQ3VzdG9tQ2l0eUxvY2F0aW9uIH0gZnJvbSAnLi9zZWFyY2hPYmplY3RVdGlscyc7CmV4cG9ydCBmdW5jdGlvbiBpc1BhcmFtUGVyaW9kVmFsaWQoc3RhcnREYXRlLCBlbmREYXRlKSB7CiAgaWYgKHN0YXJ0RGF0ZSAmJiBlbmREYXRlICYmIHN0YXJ0RGF0ZS5nZXRUaW1lKCkgPD0gZW5kRGF0ZS5nZXRUaW1lKCkpIHsKICAgIHJldHVybiBkYXRlVXRpbHNJc1dpdGhpbkludGVydmFsKHN0YXJ0T2ZUb2RheSgpLCBkYXRlQ29uc3RhbnRzLkZJUlNUX0RBVEUsIGVuZERhdGUpOwogIH0KCiAgcmV0dXJuIGZhbHNlOwp9CmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVEYXRhSW5pdGlhbFN0YXRlKGRhdGEpIHsKICBpZiAoIWRhdGEgfHwgIWRhdGEuY2l0eSB8fCAhZGF0YS5zdGFydERhdGUgfHwgIWRhdGEuZW5kRGF0ZSB8fCAhZGF0YS5sb3lhbHR5QWNjb3VudCB8fCAhZGF0YS5sb3lhbHR5QWNjb3VudC5pZCkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICB2YXIgcmV0ID0gX29iamVjdFNwcmVhZCh7fSwgZGF0YSk7CgogIGlmICghc2VhcmNoT2JqZWN0VXRpbHNIYXNDaXR5KGRhdGEpKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHJldC5zdGFydERhdGUgPSBkYXRlVXRpbHNQYXJzZVN0cmluZyhyZXQuc3RhcnREYXRlLCBkYXRlQ29uc3RhbnRzLkZPUk1BVC5ERUZBVUxUKTsKICByZXQuZW5kRGF0ZSA9IGRhdGVVdGlsc1BhcnNlU3RyaW5nKHJldC5lbmREYXRlLCBkYXRlQ29uc3RhbnRzLkZPUk1BVC5ERUZBVUxUKTsKCiAgaWYgKCFpc1BhcmFtUGVyaW9kVmFsaWQocmV0LnN0YXJ0RGF0ZSwgcmV0LmVuZERhdGUpKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHJldHVybiByZXQ7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZUZyb21RdWVyeShxdWVyeSkgewogIHJldHVybiB7CiAgICBjaXR5OiB7CiAgICAgIG5hbWU6IHF1ZXJ5LmNpdHlOYW1lLAogICAgICBzdGF0ZUNvZGU6IHF1ZXJ5LnN0YXRlQ29kZSwKICAgICAgY291bnRyeUNvZGU6IHF1ZXJ5LmNvdW50cnlDb2RlCiAgICB9LAogICAgc3RhcnREYXRlOiBxdWVyeS5zdGFydERhdGUsCiAgICBlbmREYXRlOiBxdWVyeS5lbmREYXRlLAogICAgbG95YWx0eUFjY291bnQ6IHsKICAgICAgaWQ6IHF1ZXJ5LmxveWFsdHlBY2NvdW50SWQKICAgIH0KICB9Owp9CmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVJbml0aWFsU3RhdGVGcm9tUXVlcnkocXVlcnkpIHsKICByZXR1cm4gbm9ybWFsaXplRGF0YUluaXRpYWxTdGF0ZShnZXRJbml0aWFsU3RhdGVGcm9tUXVlcnkocXVlcnkpKTsKfQpleHBvcnQgZnVuY3Rpb24gYnVpbGRTZWFyY2hRdWVyeU9iamVjdChfcmVmKSB7CiAgdmFyIGtleXdvcmQgPSBfcmVmLmtleXdvcmQsCiAgICAgIHN0YXJ0RGF0ZSA9IF9yZWYuc3RhcnREYXRlLAogICAgICBlbmREYXRlID0gX3JlZi5lbmREYXRlLAogICAgICBjaXR5ID0gX3JlZi5jaXR5LAogICAgICBzb3J0ID0gX3JlZi5zb3J0OwoKICB2YXIgZ2V0Q2l0eSA9IGZ1bmN0aW9uIGdldENpdHkoKSB7CiAgICBpZiAoc2VhcmNoT2JqZWN0VXRpbHNIYXNDaXR5KHsKICAgICAgY2l0eTogY2l0eQogICAgfSkpIHsKICAgICAgdmFyIHJldCA9IHsKICAgICAgICBjaXR5TmFtZTogY2l0eS5uYW1lLAogICAgICAgIHN0YXRlQ29kZTogY2l0eS5zdGF0ZUNvZGUsCiAgICAgICAgY291bnRyeUNvZGU6IGNpdHkuY291bnRyeUNvZGUsCiAgICAgICAgY2l0eUV4aXN0c0luQXBpOiBjaXR5LmV4aXN0c0luQXBpCiAgICAgIH07CgogICAgICBpZiAoc2VhcmNoT2JqZWN0VXRpbHNIYXNDdXN0b21DaXR5TG9jYXRpb24oewogICAgICAgIGNpdHk6IGNpdHkKICAgICAgfSkpIHsKICAgICAgICByZXQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHJldCksIHt9LCB7CiAgICAgICAgICBsYXRpdHVkZTogY2l0eS5sb2NhdGlvbi5sYXRpdHVkZSwKICAgICAgICAgIGxvbmdpdHVkZTogY2l0eS5sb2NhdGlvbi5sb25naXR1ZGUsCiAgICAgICAgICBsb2NhdGlvbkN1cnJlbnQ6IGNpdHkubG9jYXRpb24uY3VycmVudAogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gcmV0OwogICAgfQoKICAgIHJldHVybiB7fTsKICB9OwoKICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwga2V5d29yZCA/IHsKICAgIGtleXdvcmQ6IGtleXdvcmQKICB9IDoge30sIHN0YXJ0RGF0ZSA/IHsKICAgIHN0YXJ0RGF0ZTogZGF0ZVV0aWxzRm9ybWF0UXVlcnlQYXJhbShzdGFydERhdGUsICd5eXl5LU1NLWRkJykKICB9IDoge30sIGVuZERhdGUgPyB7CiAgICBlbmREYXRlOiBkYXRlVXRpbHNGb3JtYXRRdWVyeVBhcmFtKGVuZERhdGUsICd5eXl5LU1NLWRkJykKICB9IDoge30sIHNvcnQgPyB7CiAgICBzb3J0OiBzb3J0LnRvVXBwZXJDYXNlKCkKICB9IDoge30sIGdldENpdHkoKSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVNlYXJjaFF1ZXJ5KHF1ZXJ5KSB7CiAgdmFyIGdldFNlYXJjaE9iamVjdEZyb21RdWVyeSA9IGZ1bmN0aW9uIGdldFNlYXJjaE9iamVjdEZyb21RdWVyeShxKSB7CiAgICByZXR1cm4gewogICAgICBrZXl3b3JkOiBxLmtleXdvcmQsCiAgICAgIGNpdHk6IHsKICAgICAgICBuYW1lOiBxLmNpdHlOYW1lLAogICAgICAgIHN0YXRlQ29kZTogcS5zdGF0ZUNvZGUsCiAgICAgICAgY291bnRyeUNvZGU6IHEuY291bnRyeUNvZGUsCiAgICAgICAgZXhpc3RzSW5BcGk6IHEuY2l0eUV4aXN0c0luQXBpID09PSAnMScsCiAgICAgICAgbG9jYXRpb246IHsKICAgICAgICAgIGxhdGl0dWRlOiBxLmxhdGl0dWRlID8gcS5sYXRpdHVkZSAqIDEgOiBudWxsLAogICAgICAgICAgbG9uZ2l0dWRlOiBxLmxvbmdpdHVkZSA/IHEubG9uZ2l0dWRlICogMSA6IG51bGwsCiAgICAgICAgICBjdXJyZW50OiBxLmxvY2F0aW9uQ3VycmVudCA9PT0gJzEnCiAgICAgICAgfQogICAgICB9LAogICAgICBzdGFydERhdGU6IHEuc3RhcnREYXRlLAogICAgICBlbmREYXRlOiBxLmVuZERhdGUKICAgIH07CiAgfTsKCiAgdmFyIHF1ZXJ5T2JqZWN0ID0gZ2V0U2VhcmNoT2JqZWN0RnJvbVF1ZXJ5KHF1ZXJ5KTsKCiAgaWYgKCFxdWVyeSkgewogICAgcmV0dXJuIHt9OwogIH0KCiAgdmFyIHJldCA9IF9vYmplY3RTcHJlYWQoe30sIHF1ZXJ5T2JqZWN0KTsKCiAgc2VhcmNoT2JqZWN0VXRpbHNIYXNDaXR5KHJldCkgfHwgZGVsZXRlIHJldC5jaXR5OwogIHJldC5rZXl3b3JkIHx8IGRlbGV0ZSByZXQua2V5d29yZDsKICByZXQuc3RhcnREYXRlID0gZGF0ZVV0aWxzUGFyc2VTdHJpbmcocmV0LnN0YXJ0RGF0ZSk7CiAgcmV0LmVuZERhdGUgPSBkYXRlVXRpbHNQYXJzZVN0cmluZyhyZXQuZW5kRGF0ZSk7CgogIGlmIChkYXRlVXRpbHNJc1ZhbGlkKHJldC5zdGFydERhdGUpICYmICFkYXRlVXRpbHNJc1ZhbGlkKHJldC5lbmREYXRlKSkgewogICAgZGVsZXRlIHJldC5lbmREYXRlOwogIH0gZWxzZSBpZiAoIWlzUGFyYW1QZXJpb2RWYWxpZChyZXQuc3RhcnREYXRlLCByZXQuZW5kRGF0ZSkpIHsKICAgIGRlbGV0ZSByZXQuc3RhcnREYXRlOwogICAgZGVsZXRlIHJldC5lbmREYXRlOwogIH0KCiAgcmV0dXJuIHJldDsKfQ=="},{"version":3,"sources":["/Users/cristiandan/Desktop/lifestyle-ui/src/core/utils/searchUtils.js"],"names":["startOfToday","isWithinInterval","dateUtilsIsWithinInterval","parseString","dateUtilsParseString","formatQueryParam","dateUtilsFormatQueryParam","isValid","dateUtilsIsValid","dateConstants","hasCity","searchObjectUtilsHasCity","hasCustomCityLocation","searchObjectUtilsHasCustomCityLocation","isParamPeriodValid","startDate","endDate","getTime","FIRST_DATE","normalizeDataInitialState","data","city","loyaltyAccount","id","ret","FORMAT","DEFAULT","getInitialStateFromQuery","query","name","cityName","stateCode","countryCode","loyaltyAccountId","normalizeInitialStateFromQuery","buildSearchQueryObject","keyword","sort","getCity","cityExistsInApi","existsInApi","latitude","location","longitude","locationCurrent","current","Object","assign","toUpperCase","normalizeSearchQuery","getSearchObjectFromQuery","q","queryObject"],"mappings":"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","sourcesContent":["import startOfToday from  'date-fns/startOfToday';\nimport {\n    isWithinInterval as dateUtilsIsWithinInterval,\n    parseString as dateUtilsParseString,\n    formatQueryParam as dateUtilsFormatQueryParam,\n    isValid as dateUtilsIsValid\n} from '@core/utils/dateUtils';\nimport dateConstants from './constants/date';\nimport {\n    hasCity as searchObjectUtilsHasCity,\n    hasCustomCityLocation as searchObjectUtilsHasCustomCityLocation\n} from './searchObjectUtils';\n\nexport function isParamPeriodValid ( startDate, endDate ) {\n    if ( startDate && endDate && startDate.getTime( ) <= endDate.getTime( ) ) {\n        return dateUtilsIsWithinInterval ( startOfToday( ), dateConstants.FIRST_DATE, endDate );\n    }\n    return false;\n}\n\nexport function normalizeDataInitialState ( data ) {\n    if ( !data || !data.city || !data.startDate || !data.endDate || !data.loyaltyAccount || !data.loyaltyAccount.id ) {\n        return null;\n    }\n    const ret = { ...data };\n\n    if ( !searchObjectUtilsHasCity ( data ) ) {\n        return null;\n    }\n\n    ret.startDate = dateUtilsParseString ( ret.startDate, dateConstants.FORMAT.DEFAULT  );\n    ret.endDate   = dateUtilsParseString ( ret.endDate, dateConstants.FORMAT.DEFAULT );\n    if ( !isParamPeriodValid( ret.startDate, ret.endDate ) ) {\n        return null;\n    }\n    return ret;\n}\n\nexport function getInitialStateFromQuery ( query ) {\n    return {\n        city: {\n            name:           query.cityName,\n            stateCode:      query.stateCode,\n            countryCode:    query.countryCode\n        },\n        startDate:          query.startDate,\n        endDate:            query.endDate,\n        loyaltyAccount:     {\n            id:             query.loyaltyAccountId\n        }\n    };\n}\n\nexport function normalizeInitialStateFromQuery ( query ) {\n    return normalizeDataInitialState( getInitialStateFromQuery( query ) );\n}\n\nexport function buildSearchQueryObject ( { keyword, startDate, endDate, city, sort } ) {\n    const getCity = ( ) => {\n        if ( searchObjectUtilsHasCity( { city } ) ) {\n            let ret = {\n                cityName: city.name,\n                stateCode: city.stateCode,\n                countryCode: city.countryCode,\n                cityExistsInApi: city.existsInApi,\n                    \n            };\n            if ( searchObjectUtilsHasCustomCityLocation( { city } ) ) {\n                ret = {\n                    ...ret,\n                    latitude: city.location.latitude,\n                    longitude: city.location.longitude,\n                    locationCurrent: city.location.current,\n                };\n            }\n\n            return ret;\n        }\n\n        return { };\n    };\n\n    return Object.assign(\n        { },\n        keyword ? { keyword } : {},\n        startDate ? { startDate: dateUtilsFormatQueryParam( startDate, 'yyyy-MM-dd' )  } : {},\n        endDate ? { endDate: dateUtilsFormatQueryParam( endDate, 'yyyy-MM-dd' ) } : { },\n        sort ? { sort: sort.toUpperCase( ) } : {},\n        getCity( )\n    );\n}\n    \nexport function normalizeSearchQuery ( query ) {\n    const getSearchObjectFromQuery = ( q ) => {\n        return {\n            keyword:    q.keyword,\n            city: {\n                name:           q.cityName,\n                stateCode:      q.stateCode,\n                countryCode:    q.countryCode,\n                existsInApi:    q.cityExistsInApi === '1',\n                location: {\n                    latitude: q.latitude ? q.latitude * 1 : null,\n                    longitude: q.longitude ? q.longitude * 1 : null,\n                    current: q.locationCurrent === '1',\n                }\n            },\n            startDate:  q.startDate,\n            endDate:    q.endDate,\n        };\n    };\n    const queryObject = getSearchObjectFromQuery( query );\n\n    if ( !query ) {\n        return { };\n    }\n    let ret = { ...queryObject };\n        \n    searchObjectUtilsHasCity ( ret ) || ( delete ret.city );\n    ret.keyword || ( delete ret.keyword );\n    ret.startDate = dateUtilsParseString ( ret.startDate );\n    ret.endDate   = dateUtilsParseString ( ret.endDate );\n    if ( dateUtilsIsValid( ret.startDate ) &&  !dateUtilsIsValid( ret.endDate ) ) {\n        delete ret.endDate;\n    } else if ( !isParamPeriodValid( ret.startDate, ret.endDate ) ) {\n        delete ret.startDate;\n        delete ret.endDate;\n    }\n\n    return ret;\n}\n"]}]}