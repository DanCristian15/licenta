{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/lifestyle-ui/src/core/utils/measureUtils.js","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/utils/measureUtils.js","mtime":1645805364009},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0LmpzIjsKaW1wb3J0IHsgRElTVEFOQ0UgfSBmcm9tICdAY29yZS91dGlscy9jb25zdGFudHMvbWVhc3VyZSc7CmltcG9ydCBudW1iZXIgZnJvbSAnQGNvcmUvZmlsdGVycy9udW1iZXInOwp2YXIgVU5JVCA9IERJU1RBTkNFLlVOSVQsCiAgICBSQVRFID0gRElTVEFOQ0UuUkFURTsKZXhwb3J0IGZ1bmN0aW9uIGdldERpc3RhbmNlVW5pdE9mTWVhc3VyZUZvckNvdW50cnkoY291bnRyeUNvZGUpIHsKICBzd2l0Y2ggKGNvdW50cnlDb2RlKSB7CiAgICBjYXNlICdVUyc6CiAgICBjYXNlICdVSyc6CiAgICAgIHJldHVybiBESVNUQU5DRS5VTklULk1JTEVTOwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBESVNUQU5DRS5VTklULktNOwogIH0KfQovKioKICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBkaXN0YW5jZSAtIGRpc3RhbmNlIHZhbHVlCiAqIEBwYXJhbSB7IFVOSVQuTUlMRVMgfSAgdW5pdFRvIC0gdGhlIHVuaXQgaW4gd2hpY2ggdGhlIGRpc3RhbmNlIHNob3VsZCBiZSBjb252ZXJ0ZWQKICogQHJldHVybnMge1N0cmluZ30KICovCgpleHBvcnQgZnVuY3Rpb24gY29udmVydERpc3RhbmNlKGRpc3RhbmNlKSB7CiAgdmFyIHVuaXRUbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogVU5JVC5NSUxFUzsKICB2YXIgZGlzdGFuY2VQYXJzZWQgPSBOdW1iZXIucGFyc2VGbG9hdChkaXN0YW5jZSk7CgogIGlmIChpc05hTihkaXN0YW5jZSkpIHsKICAgIHJldHVybiAnJzsKICB9CgogIGlmICh1bml0VG8gPT09IFVOSVQuTUlMRVMpIHsKICAgIHJldHVybiBudW1iZXIoZGlzdGFuY2VQYXJzZWQgLyBSQVRFLktNX0ZST01fTUlMRSwgJzAsMC4wJyk7CiAgfQoKICByZXR1cm4gZGlzdGFuY2U7Cn0="},{"version":3,"sources":["/Users/cristiandan/Desktop/lifestyle-ui/src/core/utils/measureUtils.js"],"names":["DISTANCE","number","UNIT","RATE","getDistanceUnitOfMeasureForCountry","countryCode","MILES","KM","convertDistance","distance","unitTo","distanceParsed","Number","parseFloat","isNaN","KM_FROM_MILE"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,+BAAzB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;IAEQC,I,GAAeF,Q,CAAfE,I;IAAMC,I,GAASH,Q,CAATG,I;AAEd,OAAO,SAASC,kCAAT,CAA6CC,WAA7C,EAA2D;AAC9D,UAAQA,WAAR;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACI,aAAOL,QAAQ,CAACE,IAAT,CAAcI,KAArB;;AACJ;AACI,aAAON,QAAQ,CAACE,IAAT,CAAcK,EAArB;AALJ;AAOH;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAA0BC,QAA1B,EAA0D;AAAA,MAAtBC,MAAsB,uEAAbR,IAAI,CAACI,KAAQ;AAC7D,MAAMK,cAAc,GAAGC,MAAM,CAACC,UAAP,CAAmBJ,QAAnB,CAAvB;;AAEA,MAAIK,KAAK,CAAEL,QAAF,CAAT,EAAwB;AACpB,WAAO,EAAP;AACH;;AAED,MAAIC,MAAM,KAAKR,IAAI,CAACI,KAApB,EAA4B;AACxB,WAAOL,MAAM,CAAEU,cAAc,GAAGR,IAAI,CAACY,YAAxB,EAAsC,OAAtC,CAAb;AACH;;AAED,SAAON,QAAP;AACH","sourcesContent":["import { DISTANCE } from '@core/utils/constants/measure';\nimport number from '@core/filters/number';\n\nconst { UNIT, RATE } = DISTANCE;\n\nexport function getDistanceUnitOfMeasureForCountry( countryCode ) {\n    switch( countryCode ) {\n    case 'US':\n    case 'UK':\n        return DISTANCE.UNIT.MILES;\n    default:\n        return DISTANCE.UNIT.KM;\n    }\n}\n\n\n/**\n * @param {Number|String} distance - distance value\n * @param { UNIT.MILES }  unitTo - the unit in which the distance should be converted\n * @returns {String}\n */\nexport function convertDistance( distance, unitTo = UNIT.MILES ) {\n    const distanceParsed = Number.parseFloat( distance );\n\n    if( isNaN( distance ) ) {\n        return '';\n    }\n\n    if( unitTo === UNIT.MILES ) {\n        return number( distanceParsed / RATE.KM_FROM_MILE, '0,0.0' );\n    }\n\n    return distance;\n}\n"]}]}