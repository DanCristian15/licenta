{"remainingRequest":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/lifestyle-ui/src/core/helpers/storeFactories/read/readStoreAllItemsFactory.js","dependencies":[{"path":"/Users/cristiandan/Desktop/lifestyle-ui/src/core/helpers/storeFactories/read/readStoreAllItemsFactory.js","mtime":1645805363894},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/lifestyle-ui/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/cristiandan/Desktop/lifestyle-ui/src/core/helpers/storeFactories/read/readStoreAllItemsFactory.js"],"names":["storeConstants","isStoreOutDated","storeUtilsIsStoreOutDated","LogService","mutationTypes","defaultApi","api","get","createModuleView","storeName","config","overrides","defaultState","list","totalCount","timestamp","loading","allItemsLoaded","getParams","offset","limit","refresh","detail","actionGetOptionsDefault","mapListItemFn","module","name","namespaced","state","getters","isLoading","mutations","SET_LIST","pageData","Date","getTime","map","CLEAR_LIST","SET_LOADING","SET_TOTAL_COUNT","SET_REFRESH","SET_ALL_ITEMS_LOADED","SET_DETAIL","actions","context","options","commit","needsRefresh","REFRESH_TIME","promiseLoading","Promise","resolve","unwatchLoading","watch","val","response","success","data","length","debug","getRaw","filter","sort","item","one","id","setRefreshIfOutdated","setRefresh","Object","assign","modules"],"mappings":"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","sourcesContent":["import storeConstants from '@core/utils/constants/store';\nimport { isStoreOutDated as storeUtilsIsStoreOutDated } from '@core/utils/storeUtils';\nimport LogService from '@core/services/LogService';\nimport mutationTypes from '../helpers/mutationTypes';\n\nconst defaultApi = {\n    api: {\n        get: '', // function from api\n    },\n};\n\n/**\n *\n * @param {string} storeName\n * @param {Object} api\n * @param {Object} config\n *  - actionGetOptionsDefault - options that will be put on the get action - default { refresh: true, cache: false }\n *  - mapListItemFn - function to remap the items\n * @param {Object} overrides\n *  - getOptions - default options for get Action\n *  - state - overrides default state\n *  - getters - overrides getters\n *  - mutations - overrides the mutations\n *  - actions - overrides the actions\n */\nexport function createModuleView ( storeName, api = defaultApi, config = { }, overrides = { } ) {\n    const defaultState = {\n        list:               [],\n        totalCount:         0,\n        timestamp:          0,\n        loading:            0,\n        allItemsLoaded:     false,\n        getParams:          { offset: 1, limit: 1000 },\n        refresh:            false,\n        detail:             { }                              \n    };\n\n    let actionGetOptionsDefault = config && config.actionGetOptionsDefault ? config.actionGetOptionsDefault : {\n            refresh: false,\n        },\n        mapListItemFn = config && config.mapListItemFn ? config.mapListItemFn : false;\n\n    const module = {\n        name: storeName,\n        namespaced: true,\n        state: { ...defaultState, ...overrides.state },\n        getters: {\n            isLoading: state => !!state.loading,\n            list: state => state.list\n        },\n        mutations: {\n            [ mutationTypes.SET_LIST ] ( state, pageData ) {\n                state.timestamp = new Date( ).getTime( );\n                state.list = [\n                    ...( mapListItemFn ? pageData.map( mapListItemFn ) : pageData )\n                ];\n            },\n            [ mutationTypes.CLEAR_LIST ] ( state ) {\n                state.list = [ ];\n            },\n            [ mutationTypes.SET_LOADING ]( state, loading ) {\n                state.loading = loading;\n            },\n            [ mutationTypes.SET_TOTAL_COUNT ] ( state, totalCount ) {\n                state.totalCount = totalCount;\n            },\n            [ mutationTypes.SET_REFRESH ] ( state, refresh ) {\n                state.refresh = refresh;\n            },\n            [ mutationTypes.SET_ALL_ITEMS_LOADED ] ( state, allItemsLoaded ) {\n                state.allItemsLoaded = allItemsLoaded;\n            },\n            [ mutationTypes.SET_DETAIL ] ( state, detail ) {\n                state.detail = detail;\n            }\n        },\n        actions: {\n            async get ( context, options = actionGetOptionsDefault ) {\n                const { commit, state } = context;\n                const needsRefresh = options.refresh || state.refresh || storeUtilsIsStoreOutDated ( state.timestamp, storeConstants.REFRESH_TIME );\n                \n                if ( state.loading ) {\n                    let promiseLoading = new Promise( ( resolve ) => {\n                        let unwatchLoading = this.watch(\n                            ( state ) => {\n                                return state[ storeName ].loading;\n                            },\n                            ( val ) => {\n                                if ( !val ) {\n                                    unwatchLoading();\n                                    resolve();\n                                }\n                            }\n                        );\n                    } );\n                    await promiseLoading;\n                } else {\n                    if ( needsRefresh ) {\n                        commit( mutationTypes.CLEAR_LIST );\n                        commit( mutationTypes.SET_TOTAL_COUNT, 0 );\n                        commit( mutationTypes.SET_ALL_ITEMS_LOADED, false );\n                        commit( mutationTypes.SET_LOADING, state.loading + 1 );\n                        const response = await api.get( state.getParams );\n                        if ( response.success ) {\n                            let { list } = response.data;\n                            commit( mutationTypes.SET_ALL_ITEMS_LOADED, true );\n                            commit( mutationTypes.SET_LIST, list );\n                            commit( mutationTypes.SET_TOTAL_COUNT, list.length );\n                            commit( mutationTypes.SET_LOADING, state.loading - 1 );\n        \n                            return state.list;\n                        } else {\n                            commit( mutationTypes.SET_LOADING, state.loading - 1 );\n                            commit( mutationTypes.SET_ALL_ITEMS_LOADED, true );\n                            LogService.debug( `problem loading ${storeName}` );\n                            return false;\n                        }\n                    }\n                }\n\n                return state.list;\n            },\n            async getRaw( context, options = { } ) {\n                const response = await api.get ( {\n                    offset: options.offset,\n                    limit:  options.limit + 1,\n                    filter: options.filter,\n                    sort: options.sort\n                } );\n\n                if ( response.success ) {\n                    return {\n                        ...response,\n                        data: {\n                            ...response.data,\n                            list: response.data.list.map ( item => mapListItemFn ? mapListItemFn( item ) : item )\n                        }\n                    };\n                } else {\n                    return response;\n                }\n            },\n            one: async ( { commit }, id  ) => {\n                const response = await api.one( id );\n\n                if ( response.success ) {\n                    commit( mutationTypes.SET_DETAIL, response.data );\n                    return response.data;\n                } else {\n                    LogService.debug( `problems loading detail on ${storeName}, id: ${id}` );\n                    return false;\n                }\n            },\n            setRefreshIfOutdated( { commit, state }, timestamp ) {\n                if ( timestamp > state.timestamp ) {\n                    commit( mutationTypes.SET_REFRESH, true );\n                }\n            },\n            setRefresh( { commit }, refresh ) {\n                commit( mutationTypes.SET_REFRESH, refresh );\n            }\n        }\n    };\n\n    !overrides.getters || Object.assign( module.getters, overrides.getters );\n    !overrides.mutations || Object.assign( module.mutations, overrides.mutations );\n    !overrides.actions || Object.assign( module.actions, overrides.actions );\n    !overrides.modules || ( module.modules = overrides.modules );\n\n    return module;\n}\n\nexport default { createModuleView };\n"]}]}