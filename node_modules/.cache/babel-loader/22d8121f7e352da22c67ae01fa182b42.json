{"remainingRequest":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js!/Users/cristiandan/Desktop/proiect-licenta-front/src/core/store/modules/cities.js","dependencies":[{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/src/core/store/modules/cities.js","mtime":1645805363990},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/cache-loader/dist/cjs.js","mtime":1637061222564},{"path":"/Users/cristiandan/Desktop/proiect-licenta-front/node_modules/babel-loader/lib/index.js","mtime":1637061222406}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/cristiandan/Desktop/proiect-licenta-front/src/core/store/modules/cities.js"],"names":["storeConstants","isStoreOutDated","storeUtilsIsStoreOutDated","apiServiceCities","LogService","REFRESH_TIME","STORE_NAME","ITEMS_PER_PAGE","name","namespaced","state","list","timestamp","loading","listFirstLoad","refresh","mutations","setLoading","clearList","setList","data","Date","getTime","setRefresh","actions","get","commit","search","needsRefresh","api","cities","offset","limit","response","success","debug","context","exists","city","keyword","countryCode","stateCode","length","searchList","dispatch"],"mappings":"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","sourcesContent":["import storeConstants from '@core/utils/constants/store';\nimport { isStoreOutDated as storeUtilsIsStoreOutDated } from '@core/utils/storeUtils';\nimport apiServiceCities from '@core/api/apiServiceCities';\nimport LogService from '@services/LogService';\n\nconst REFRESH_TIME = storeConstants.REFRESH_TIME;\n\nconst STORE_NAME = 'cities';\nconst ITEMS_PER_PAGE = 5;\n\nexport default {\n    name: STORE_NAME,\n    namespaced: true,\n    state: {\n        list:               [],\n        timestamp:          0,\n        loading:            0,\n        listFirstLoad:      false,\n        refresh:            false,\n    },\n    mutations: {\n        setLoading( state, loading ) {\n            state.loading = loading ? loading : 0;\n        },\n        clearList( state ) {\n            state.list = [ ];\n        },\n        setList( state, data ) {\n            state.timestamp = new Date( ).getTime( );\n            state.listFirstLoad = true;\n            state.list = [ ...data ];\n        },\n        setRefresh( state, refresh ) {\n            state.refresh = refresh;\n        }\n    },\n\n    actions: {\n        get: async ( { commit, state }, { refresh, search } = { } ) => {\n            const needsRefresh = refresh || state.refresh || storeUtilsIsStoreOutDated( state.timestamp, REFRESH_TIME );\n            const api = await apiServiceCities( '' );\n\n            if ( needsRefresh ) {\n                commit( 'clearList' );\n                commit( 'setLoading', state.loading + 1 );\n                const response = await api.cities.get( {\n                    offset: 0,\n                    limit:  ITEMS_PER_PAGE,\n                    ...search\n                } );\n                commit( 'setLoading', state.loading - 1 );\n                if ( response.success ) {\n                    state.loading || commit( 'setList', response.data.list );\n\n                    return state.list;\n                } else {\n                    LogService.debug( 'problem loading top cities' );\n                    return false;\n                }\n            }\n        },\n        search: async ( context, { search } ) => {\n            const api = await apiServiceCities( '' );\n            return await api.cities.get( {\n                ...search\n            } );\n        },\n        exists: async ( context, { city } ) => {\n            const api = await apiServiceCities( '' );\n            const response = await api.cities.get( {\n                offset: 0,\n                limit: 10,\n                keyword: city.name,\n                countryCode: city.countryCode,\n                stateCode: city.stateCode\n            } );\n            return response.success && response.data.list.length;\n        },\n        searchList: async( { dispatch }, { search } ) => {\n            const response = await dispatch( 'search', { search } );\n\n            return response.success ? response.data.list : null;\n        },\n        needsRefresh( { commit } ) {\n            commit( 'setRefresh', true );\n        }\n    }\n};\n"]}]}